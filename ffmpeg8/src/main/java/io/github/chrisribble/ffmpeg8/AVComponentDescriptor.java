// Generated by jextract

package io.github.chrisribble.ffmpeg8;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct AVComponentDescriptor {
 *     int plane;
 *     int step;
 *     int offset;
 *     int shift;
 *     int depth;
 * }
 * }
 */
public class AVComponentDescriptor {

    AVComponentDescriptor() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FFmpeg.C_INT.withName("plane"),
        FFmpeg.C_INT.withName("step"),
        FFmpeg.C_INT.withName("offset"),
        FFmpeg.C_INT.withName("shift"),
        FFmpeg.C_INT.withName("depth")
    ).withName("AVComponentDescriptor");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt plane$LAYOUT = (OfInt)$LAYOUT.select(groupElement("plane"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int plane
     * }
     */
    public static final OfInt plane$layout() {
        return plane$LAYOUT;
    }

    private static final long plane$OFFSET = $LAYOUT.byteOffset(groupElement("plane"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int plane
     * }
     */
    public static final long plane$offset() {
        return plane$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int plane
     * }
     */
    public static int plane(MemorySegment struct) {
        return struct.get(plane$LAYOUT, plane$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int plane
     * }
     */
    public static void plane(MemorySegment struct, int fieldValue) {
        struct.set(plane$LAYOUT, plane$OFFSET, fieldValue);
    }

    private static final OfInt step$LAYOUT = (OfInt)$LAYOUT.select(groupElement("step"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int step
     * }
     */
    public static final OfInt step$layout() {
        return step$LAYOUT;
    }

    private static final long step$OFFSET = $LAYOUT.byteOffset(groupElement("step"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int step
     * }
     */
    public static final long step$offset() {
        return step$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int step
     * }
     */
    public static int step(MemorySegment struct) {
        return struct.get(step$LAYOUT, step$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int step
     * }
     */
    public static void step(MemorySegment struct, int fieldValue) {
        struct.set(step$LAYOUT, step$OFFSET, fieldValue);
    }

    private static final OfInt offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int offset
     * }
     */
    public static final OfInt offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = $LAYOUT.byteOffset(groupElement("offset"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int offset
     * }
     */
    public static int offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int offset
     * }
     */
    public static void offset(MemorySegment struct, int fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfInt shift$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int shift
     * }
     */
    public static final OfInt shift$layout() {
        return shift$LAYOUT;
    }

    private static final long shift$OFFSET = $LAYOUT.byteOffset(groupElement("shift"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int shift
     * }
     */
    public static final long shift$offset() {
        return shift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int shift
     * }
     */
    public static int shift(MemorySegment struct) {
        return struct.get(shift$LAYOUT, shift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int shift
     * }
     */
    public static void shift(MemorySegment struct, int fieldValue) {
        struct.set(shift$LAYOUT, shift$OFFSET, fieldValue);
    }

    private static final OfInt depth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int depth
     * }
     */
    public static final OfInt depth$layout() {
        return depth$LAYOUT;
    }

    private static final long depth$OFFSET = $LAYOUT.byteOffset(groupElement("depth"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int depth
     * }
     */
    public static final long depth$offset() {
        return depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int depth
     * }
     */
    public static int depth(MemorySegment struct) {
        return struct.get(depth$LAYOUT, depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int depth
     * }
     */
    public static void depth(MemorySegment struct, int fieldValue) {
        struct.set(depth$LAYOUT, depth$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

