// Generated by jextract

package io.github.chrisribble.ffmpeg8;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SwsContext {
 *     const AVClass *av_class;
 *     void *opaque;
 *     unsigned int flags;
 *     double scaler_params[2];
 *     int threads;
 *     SwsDither dither;
 *     SwsAlphaBlend alpha_blend;
 *     int gamma_flag;
 *     int src_w;
 *     int src_h;
 *     int dst_w;
 *     int dst_h;
 *     int src_format;
 *     int dst_format;
 *     int src_range;
 *     int dst_range;
 *     int src_v_chr_pos;
 *     int src_h_chr_pos;
 *     int dst_v_chr_pos;
 *     int dst_h_chr_pos;
 *     int intent;
 * }
 * }
 */
public class SwsContext {

    SwsContext() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FFmpeg.C_POINTER.withName("av_class"),
        FFmpeg.C_POINTER.withName("opaque"),
        FFmpeg.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(2, FFmpeg.C_DOUBLE).withName("scaler_params"),
        FFmpeg.C_INT.withName("threads"),
        FFmpeg.C_INT.withName("dither"),
        FFmpeg.C_INT.withName("alpha_blend"),
        FFmpeg.C_INT.withName("gamma_flag"),
        FFmpeg.C_INT.withName("src_w"),
        FFmpeg.C_INT.withName("src_h"),
        FFmpeg.C_INT.withName("dst_w"),
        FFmpeg.C_INT.withName("dst_h"),
        FFmpeg.C_INT.withName("src_format"),
        FFmpeg.C_INT.withName("dst_format"),
        FFmpeg.C_INT.withName("src_range"),
        FFmpeg.C_INT.withName("dst_range"),
        FFmpeg.C_INT.withName("src_v_chr_pos"),
        FFmpeg.C_INT.withName("src_h_chr_pos"),
        FFmpeg.C_INT.withName("dst_v_chr_pos"),
        FFmpeg.C_INT.withName("dst_h_chr_pos"),
        FFmpeg.C_INT.withName("intent"),
        MemoryLayout.paddingLayout(4)
    ).withName("SwsContext");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout av_class$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("av_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const AVClass *av_class
     * }
     */
    public static final AddressLayout av_class$layout() {
        return av_class$LAYOUT;
    }

    private static final long av_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const AVClass *av_class
     * }
     */
    public static final long av_class$offset() {
        return av_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const AVClass *av_class
     * }
     */
    public static MemorySegment av_class(MemorySegment struct) {
        return struct.get(av_class$LAYOUT, av_class$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const AVClass *av_class
     * }
     */
    public static void av_class(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(av_class$LAYOUT, av_class$OFFSET, fieldValue);
    }

    private static final AddressLayout opaque$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("opaque"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *opaque
     * }
     */
    public static final AddressLayout opaque$layout() {
        return opaque$LAYOUT;
    }

    private static final long opaque$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *opaque
     * }
     */
    public static final long opaque$offset() {
        return opaque$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *opaque
     * }
     */
    public static MemorySegment opaque(MemorySegment struct) {
        return struct.get(opaque$LAYOUT, opaque$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *opaque
     * }
     */
    public static void opaque(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(opaque$LAYOUT, opaque$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final SequenceLayout scaler_params$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("scaler_params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double scaler_params[2]
     * }
     */
    public static final SequenceLayout scaler_params$layout() {
        return scaler_params$LAYOUT;
    }

    private static final long scaler_params$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double scaler_params[2]
     * }
     */
    public static final long scaler_params$offset() {
        return scaler_params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double scaler_params[2]
     * }
     */
    public static MemorySegment scaler_params(MemorySegment struct) {
        return struct.asSlice(scaler_params$OFFSET, scaler_params$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double scaler_params[2]
     * }
     */
    public static void scaler_params(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, scaler_params$OFFSET, scaler_params$LAYOUT.byteSize());
    }

    private static long[] scaler_params$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double scaler_params[2]
     * }
     */
    public static long[] scaler_params$dimensions() {
        return scaler_params$DIMS;
    }
    private static final VarHandle scaler_params$ELEM_HANDLE = scaler_params$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double scaler_params[2]
     * }
     */
    public static double scaler_params(MemorySegment struct, long index0) {
        return (double)scaler_params$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double scaler_params[2]
     * }
     */
    public static void scaler_params(MemorySegment struct, long index0, double fieldValue) {
        scaler_params$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt threads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("threads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int threads
     * }
     */
    public static final OfInt threads$layout() {
        return threads$LAYOUT;
    }

    private static final long threads$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int threads
     * }
     */
    public static final long threads$offset() {
        return threads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int threads
     * }
     */
    public static int threads(MemorySegment struct) {
        return struct.get(threads$LAYOUT, threads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int threads
     * }
     */
    public static void threads(MemorySegment struct, int fieldValue) {
        struct.set(threads$LAYOUT, threads$OFFSET, fieldValue);
    }

    private static final OfInt dither$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dither"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SwsDither dither
     * }
     */
    public static final OfInt dither$layout() {
        return dither$LAYOUT;
    }

    private static final long dither$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SwsDither dither
     * }
     */
    public static final long dither$offset() {
        return dither$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SwsDither dither
     * }
     */
    public static int dither(MemorySegment struct) {
        return struct.get(dither$LAYOUT, dither$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SwsDither dither
     * }
     */
    public static void dither(MemorySegment struct, int fieldValue) {
        struct.set(dither$LAYOUT, dither$OFFSET, fieldValue);
    }

    private static final OfInt alpha_blend$LAYOUT = (OfInt)$LAYOUT.select(groupElement("alpha_blend"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SwsAlphaBlend alpha_blend
     * }
     */
    public static final OfInt alpha_blend$layout() {
        return alpha_blend$LAYOUT;
    }

    private static final long alpha_blend$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SwsAlphaBlend alpha_blend
     * }
     */
    public static final long alpha_blend$offset() {
        return alpha_blend$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SwsAlphaBlend alpha_blend
     * }
     */
    public static int alpha_blend(MemorySegment struct) {
        return struct.get(alpha_blend$LAYOUT, alpha_blend$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SwsAlphaBlend alpha_blend
     * }
     */
    public static void alpha_blend(MemorySegment struct, int fieldValue) {
        struct.set(alpha_blend$LAYOUT, alpha_blend$OFFSET, fieldValue);
    }

    private static final OfInt gamma_flag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("gamma_flag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int gamma_flag
     * }
     */
    public static final OfInt gamma_flag$layout() {
        return gamma_flag$LAYOUT;
    }

    private static final long gamma_flag$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int gamma_flag
     * }
     */
    public static final long gamma_flag$offset() {
        return gamma_flag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int gamma_flag
     * }
     */
    public static int gamma_flag(MemorySegment struct) {
        return struct.get(gamma_flag$LAYOUT, gamma_flag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int gamma_flag
     * }
     */
    public static void gamma_flag(MemorySegment struct, int fieldValue) {
        struct.set(gamma_flag$LAYOUT, gamma_flag$OFFSET, fieldValue);
    }

    private static final OfInt src_w$LAYOUT = (OfInt)$LAYOUT.select(groupElement("src_w"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int src_w
     * }
     */
    public static final OfInt src_w$layout() {
        return src_w$LAYOUT;
    }

    private static final long src_w$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int src_w
     * }
     */
    public static final long src_w$offset() {
        return src_w$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int src_w
     * }
     */
    public static int src_w(MemorySegment struct) {
        return struct.get(src_w$LAYOUT, src_w$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int src_w
     * }
     */
    public static void src_w(MemorySegment struct, int fieldValue) {
        struct.set(src_w$LAYOUT, src_w$OFFSET, fieldValue);
    }

    private static final OfInt src_h$LAYOUT = (OfInt)$LAYOUT.select(groupElement("src_h"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int src_h
     * }
     */
    public static final OfInt src_h$layout() {
        return src_h$LAYOUT;
    }

    private static final long src_h$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int src_h
     * }
     */
    public static final long src_h$offset() {
        return src_h$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int src_h
     * }
     */
    public static int src_h(MemorySegment struct) {
        return struct.get(src_h$LAYOUT, src_h$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int src_h
     * }
     */
    public static void src_h(MemorySegment struct, int fieldValue) {
        struct.set(src_h$LAYOUT, src_h$OFFSET, fieldValue);
    }

    private static final OfInt dst_w$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dst_w"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dst_w
     * }
     */
    public static final OfInt dst_w$layout() {
        return dst_w$LAYOUT;
    }

    private static final long dst_w$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dst_w
     * }
     */
    public static final long dst_w$offset() {
        return dst_w$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dst_w
     * }
     */
    public static int dst_w(MemorySegment struct) {
        return struct.get(dst_w$LAYOUT, dst_w$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dst_w
     * }
     */
    public static void dst_w(MemorySegment struct, int fieldValue) {
        struct.set(dst_w$LAYOUT, dst_w$OFFSET, fieldValue);
    }

    private static final OfInt dst_h$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dst_h"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dst_h
     * }
     */
    public static final OfInt dst_h$layout() {
        return dst_h$LAYOUT;
    }

    private static final long dst_h$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dst_h
     * }
     */
    public static final long dst_h$offset() {
        return dst_h$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dst_h
     * }
     */
    public static int dst_h(MemorySegment struct) {
        return struct.get(dst_h$LAYOUT, dst_h$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dst_h
     * }
     */
    public static void dst_h(MemorySegment struct, int fieldValue) {
        struct.set(dst_h$LAYOUT, dst_h$OFFSET, fieldValue);
    }

    private static final OfInt src_format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("src_format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int src_format
     * }
     */
    public static final OfInt src_format$layout() {
        return src_format$LAYOUT;
    }

    private static final long src_format$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int src_format
     * }
     */
    public static final long src_format$offset() {
        return src_format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int src_format
     * }
     */
    public static int src_format(MemorySegment struct) {
        return struct.get(src_format$LAYOUT, src_format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int src_format
     * }
     */
    public static void src_format(MemorySegment struct, int fieldValue) {
        struct.set(src_format$LAYOUT, src_format$OFFSET, fieldValue);
    }

    private static final OfInt dst_format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dst_format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dst_format
     * }
     */
    public static final OfInt dst_format$layout() {
        return dst_format$LAYOUT;
    }

    private static final long dst_format$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dst_format
     * }
     */
    public static final long dst_format$offset() {
        return dst_format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dst_format
     * }
     */
    public static int dst_format(MemorySegment struct) {
        return struct.get(dst_format$LAYOUT, dst_format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dst_format
     * }
     */
    public static void dst_format(MemorySegment struct, int fieldValue) {
        struct.set(dst_format$LAYOUT, dst_format$OFFSET, fieldValue);
    }

    private static final OfInt src_range$LAYOUT = (OfInt)$LAYOUT.select(groupElement("src_range"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int src_range
     * }
     */
    public static final OfInt src_range$layout() {
        return src_range$LAYOUT;
    }

    private static final long src_range$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int src_range
     * }
     */
    public static final long src_range$offset() {
        return src_range$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int src_range
     * }
     */
    public static int src_range(MemorySegment struct) {
        return struct.get(src_range$LAYOUT, src_range$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int src_range
     * }
     */
    public static void src_range(MemorySegment struct, int fieldValue) {
        struct.set(src_range$LAYOUT, src_range$OFFSET, fieldValue);
    }

    private static final OfInt dst_range$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dst_range"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dst_range
     * }
     */
    public static final OfInt dst_range$layout() {
        return dst_range$LAYOUT;
    }

    private static final long dst_range$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dst_range
     * }
     */
    public static final long dst_range$offset() {
        return dst_range$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dst_range
     * }
     */
    public static int dst_range(MemorySegment struct) {
        return struct.get(dst_range$LAYOUT, dst_range$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dst_range
     * }
     */
    public static void dst_range(MemorySegment struct, int fieldValue) {
        struct.set(dst_range$LAYOUT, dst_range$OFFSET, fieldValue);
    }

    private static final OfInt src_v_chr_pos$LAYOUT = (OfInt)$LAYOUT.select(groupElement("src_v_chr_pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int src_v_chr_pos
     * }
     */
    public static final OfInt src_v_chr_pos$layout() {
        return src_v_chr_pos$LAYOUT;
    }

    private static final long src_v_chr_pos$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int src_v_chr_pos
     * }
     */
    public static final long src_v_chr_pos$offset() {
        return src_v_chr_pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int src_v_chr_pos
     * }
     */
    public static int src_v_chr_pos(MemorySegment struct) {
        return struct.get(src_v_chr_pos$LAYOUT, src_v_chr_pos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int src_v_chr_pos
     * }
     */
    public static void src_v_chr_pos(MemorySegment struct, int fieldValue) {
        struct.set(src_v_chr_pos$LAYOUT, src_v_chr_pos$OFFSET, fieldValue);
    }

    private static final OfInt src_h_chr_pos$LAYOUT = (OfInt)$LAYOUT.select(groupElement("src_h_chr_pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int src_h_chr_pos
     * }
     */
    public static final OfInt src_h_chr_pos$layout() {
        return src_h_chr_pos$LAYOUT;
    }

    private static final long src_h_chr_pos$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int src_h_chr_pos
     * }
     */
    public static final long src_h_chr_pos$offset() {
        return src_h_chr_pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int src_h_chr_pos
     * }
     */
    public static int src_h_chr_pos(MemorySegment struct) {
        return struct.get(src_h_chr_pos$LAYOUT, src_h_chr_pos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int src_h_chr_pos
     * }
     */
    public static void src_h_chr_pos(MemorySegment struct, int fieldValue) {
        struct.set(src_h_chr_pos$LAYOUT, src_h_chr_pos$OFFSET, fieldValue);
    }

    private static final OfInt dst_v_chr_pos$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dst_v_chr_pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dst_v_chr_pos
     * }
     */
    public static final OfInt dst_v_chr_pos$layout() {
        return dst_v_chr_pos$LAYOUT;
    }

    private static final long dst_v_chr_pos$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dst_v_chr_pos
     * }
     */
    public static final long dst_v_chr_pos$offset() {
        return dst_v_chr_pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dst_v_chr_pos
     * }
     */
    public static int dst_v_chr_pos(MemorySegment struct) {
        return struct.get(dst_v_chr_pos$LAYOUT, dst_v_chr_pos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dst_v_chr_pos
     * }
     */
    public static void dst_v_chr_pos(MemorySegment struct, int fieldValue) {
        struct.set(dst_v_chr_pos$LAYOUT, dst_v_chr_pos$OFFSET, fieldValue);
    }

    private static final OfInt dst_h_chr_pos$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dst_h_chr_pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dst_h_chr_pos
     * }
     */
    public static final OfInt dst_h_chr_pos$layout() {
        return dst_h_chr_pos$LAYOUT;
    }

    private static final long dst_h_chr_pos$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dst_h_chr_pos
     * }
     */
    public static final long dst_h_chr_pos$offset() {
        return dst_h_chr_pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dst_h_chr_pos
     * }
     */
    public static int dst_h_chr_pos(MemorySegment struct) {
        return struct.get(dst_h_chr_pos$LAYOUT, dst_h_chr_pos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dst_h_chr_pos
     * }
     */
    public static void dst_h_chr_pos(MemorySegment struct, int fieldValue) {
        struct.set(dst_h_chr_pos$LAYOUT, dst_h_chr_pos$OFFSET, fieldValue);
    }

    private static final OfInt intent$LAYOUT = (OfInt)$LAYOUT.select(groupElement("intent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int intent
     * }
     */
    public static final OfInt intent$layout() {
        return intent$LAYOUT;
    }

    private static final long intent$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int intent
     * }
     */
    public static final long intent$offset() {
        return intent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int intent
     * }
     */
    public static int intent(MemorySegment struct) {
        return struct.get(intent$LAYOUT, intent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int intent
     * }
     */
    public static void intent(MemorySegment struct, int fieldValue) {
        struct.set(intent$LAYOUT, intent$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

