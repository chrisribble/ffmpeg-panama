// Generated by jextract

package io.github.chrisribble.ffmpeg5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct AVInputFormat {
 *     const char *name;
 *     const char *long_name;
 *     int flags;
 *     const char *extensions;
 *     const struct AVCodecTag *const *codec_tag;
 *     const AVClass *priv_class;
 *     const char *mime_type;
 *     int raw_codec_id;
 *     int priv_data_size;
 *     int flags_internal;
 *     int (*read_probe)(const AVProbeData *);
 *     int (*read_header)(struct AVFormatContext *);
 *     int (*read_packet)(struct AVFormatContext *, AVPacket *);
 *     int (*read_close)(struct AVFormatContext *);
 *     int (*read_seek)(struct AVFormatContext *, int, int64_t, int);
 *     int64_t (*read_timestamp)(struct AVFormatContext *, int, int64_t *, int64_t);
 *     int (*read_play)(struct AVFormatContext *);
 *     int (*read_pause)(struct AVFormatContext *);
 *     int (*read_seek2)(struct AVFormatContext *, int, int64_t, int64_t, int64_t, int);
 *     int (*get_device_list)(struct AVFormatContext *, struct AVDeviceInfoList *);
 * }
 * }
 */
public class AVInputFormat {

    AVInputFormat() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FFmpeg.C_POINTER.withName("name"),
        FFmpeg.C_POINTER.withName("long_name"),
        FFmpeg.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4),
        FFmpeg.C_POINTER.withName("extensions"),
        FFmpeg.C_POINTER.withName("codec_tag"),
        FFmpeg.C_POINTER.withName("priv_class"),
        FFmpeg.C_POINTER.withName("mime_type"),
        FFmpeg.C_INT.withName("raw_codec_id"),
        FFmpeg.C_INT.withName("priv_data_size"),
        FFmpeg.C_INT.withName("flags_internal"),
        MemoryLayout.paddingLayout(4),
        FFmpeg.C_POINTER.withName("read_probe"),
        FFmpeg.C_POINTER.withName("read_header"),
        FFmpeg.C_POINTER.withName("read_packet"),
        FFmpeg.C_POINTER.withName("read_close"),
        FFmpeg.C_POINTER.withName("read_seek"),
        FFmpeg.C_POINTER.withName("read_timestamp"),
        FFmpeg.C_POINTER.withName("read_play"),
        FFmpeg.C_POINTER.withName("read_pause"),
        FFmpeg.C_POINTER.withName("read_seek2"),
        FFmpeg.C_POINTER.withName("get_device_list")
    ).withName("AVInputFormat");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout long_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("long_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *long_name
     * }
     */
    public static final AddressLayout long_name$layout() {
        return long_name$LAYOUT;
    }

    private static final long long_name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *long_name
     * }
     */
    public static final long long_name$offset() {
        return long_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *long_name
     * }
     */
    public static MemorySegment long_name(MemorySegment struct) {
        return struct.get(long_name$LAYOUT, long_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *long_name
     * }
     */
    public static void long_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(long_name$LAYOUT, long_name$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final AddressLayout extensions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("extensions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *extensions
     * }
     */
    public static final AddressLayout extensions$layout() {
        return extensions$LAYOUT;
    }

    private static final long extensions$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *extensions
     * }
     */
    public static final long extensions$offset() {
        return extensions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *extensions
     * }
     */
    public static MemorySegment extensions(MemorySegment struct) {
        return struct.get(extensions$LAYOUT, extensions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *extensions
     * }
     */
    public static void extensions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(extensions$LAYOUT, extensions$OFFSET, fieldValue);
    }

    private static final AddressLayout codec_tag$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("codec_tag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct AVCodecTag *const *codec_tag
     * }
     */
    public static final AddressLayout codec_tag$layout() {
        return codec_tag$LAYOUT;
    }

    private static final long codec_tag$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct AVCodecTag *const *codec_tag
     * }
     */
    public static final long codec_tag$offset() {
        return codec_tag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct AVCodecTag *const *codec_tag
     * }
     */
    public static MemorySegment codec_tag(MemorySegment struct) {
        return struct.get(codec_tag$LAYOUT, codec_tag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct AVCodecTag *const *codec_tag
     * }
     */
    public static void codec_tag(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(codec_tag$LAYOUT, codec_tag$OFFSET, fieldValue);
    }

    private static final AddressLayout priv_class$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("priv_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const AVClass *priv_class
     * }
     */
    public static final AddressLayout priv_class$layout() {
        return priv_class$LAYOUT;
    }

    private static final long priv_class$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const AVClass *priv_class
     * }
     */
    public static final long priv_class$offset() {
        return priv_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const AVClass *priv_class
     * }
     */
    public static MemorySegment priv_class(MemorySegment struct) {
        return struct.get(priv_class$LAYOUT, priv_class$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const AVClass *priv_class
     * }
     */
    public static void priv_class(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(priv_class$LAYOUT, priv_class$OFFSET, fieldValue);
    }

    private static final AddressLayout mime_type$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mime_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *mime_type
     * }
     */
    public static final AddressLayout mime_type$layout() {
        return mime_type$LAYOUT;
    }

    private static final long mime_type$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *mime_type
     * }
     */
    public static final long mime_type$offset() {
        return mime_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *mime_type
     * }
     */
    public static MemorySegment mime_type(MemorySegment struct) {
        return struct.get(mime_type$LAYOUT, mime_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *mime_type
     * }
     */
    public static void mime_type(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mime_type$LAYOUT, mime_type$OFFSET, fieldValue);
    }

    private static final OfInt raw_codec_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("raw_codec_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int raw_codec_id
     * }
     */
    public static final OfInt raw_codec_id$layout() {
        return raw_codec_id$LAYOUT;
    }

    private static final long raw_codec_id$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int raw_codec_id
     * }
     */
    public static final long raw_codec_id$offset() {
        return raw_codec_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int raw_codec_id
     * }
     */
    public static int raw_codec_id(MemorySegment struct) {
        return struct.get(raw_codec_id$LAYOUT, raw_codec_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int raw_codec_id
     * }
     */
    public static void raw_codec_id(MemorySegment struct, int fieldValue) {
        struct.set(raw_codec_id$LAYOUT, raw_codec_id$OFFSET, fieldValue);
    }

    private static final OfInt priv_data_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("priv_data_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int priv_data_size
     * }
     */
    public static final OfInt priv_data_size$layout() {
        return priv_data_size$LAYOUT;
    }

    private static final long priv_data_size$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int priv_data_size
     * }
     */
    public static final long priv_data_size$offset() {
        return priv_data_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int priv_data_size
     * }
     */
    public static int priv_data_size(MemorySegment struct) {
        return struct.get(priv_data_size$LAYOUT, priv_data_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int priv_data_size
     * }
     */
    public static void priv_data_size(MemorySegment struct, int fieldValue) {
        struct.set(priv_data_size$LAYOUT, priv_data_size$OFFSET, fieldValue);
    }

    private static final OfInt flags_internal$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags_internal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int flags_internal
     * }
     */
    public static final OfInt flags_internal$layout() {
        return flags_internal$LAYOUT;
    }

    private static final long flags_internal$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int flags_internal
     * }
     */
    public static final long flags_internal$offset() {
        return flags_internal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int flags_internal
     * }
     */
    public static int flags_internal(MemorySegment struct) {
        return struct.get(flags_internal$LAYOUT, flags_internal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int flags_internal
     * }
     */
    public static void flags_internal(MemorySegment struct, int fieldValue) {
        struct.set(flags_internal$LAYOUT, flags_internal$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*read_probe)(const AVProbeData *)
     * }
     */
    public static class read_probe {

        read_probe() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(read_probe.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(read_probe.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout read_probe$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read_probe"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*read_probe)(const AVProbeData *)
     * }
     */
    public static final AddressLayout read_probe$layout() {
        return read_probe$LAYOUT;
    }

    private static final long read_probe$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*read_probe)(const AVProbeData *)
     * }
     */
    public static final long read_probe$offset() {
        return read_probe$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*read_probe)(const AVProbeData *)
     * }
     */
    public static MemorySegment read_probe(MemorySegment struct) {
        return struct.get(read_probe$LAYOUT, read_probe$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*read_probe)(const AVProbeData *)
     * }
     */
    public static void read_probe(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read_probe$LAYOUT, read_probe$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*read_header)(struct AVFormatContext *)
     * }
     */
    public static class read_header {

        read_header() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(read_header.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(read_header.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout read_header$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read_header"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*read_header)(struct AVFormatContext *)
     * }
     */
    public static final AddressLayout read_header$layout() {
        return read_header$LAYOUT;
    }

    private static final long read_header$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*read_header)(struct AVFormatContext *)
     * }
     */
    public static final long read_header$offset() {
        return read_header$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*read_header)(struct AVFormatContext *)
     * }
     */
    public static MemorySegment read_header(MemorySegment struct) {
        return struct.get(read_header$LAYOUT, read_header$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*read_header)(struct AVFormatContext *)
     * }
     */
    public static void read_header(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read_header$LAYOUT, read_header$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*read_packet)(struct AVFormatContext *, AVPacket *)
     * }
     */
    public static class read_packet {

        read_packet() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER,
            FFmpeg.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(read_packet.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(read_packet.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout read_packet$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read_packet"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*read_packet)(struct AVFormatContext *, AVPacket *)
     * }
     */
    public static final AddressLayout read_packet$layout() {
        return read_packet$LAYOUT;
    }

    private static final long read_packet$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*read_packet)(struct AVFormatContext *, AVPacket *)
     * }
     */
    public static final long read_packet$offset() {
        return read_packet$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*read_packet)(struct AVFormatContext *, AVPacket *)
     * }
     */
    public static MemorySegment read_packet(MemorySegment struct) {
        return struct.get(read_packet$LAYOUT, read_packet$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*read_packet)(struct AVFormatContext *, AVPacket *)
     * }
     */
    public static void read_packet(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read_packet$LAYOUT, read_packet$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*read_close)(struct AVFormatContext *)
     * }
     */
    public static class read_close {

        read_close() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(read_close.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(read_close.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout read_close$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read_close"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*read_close)(struct AVFormatContext *)
     * }
     */
    public static final AddressLayout read_close$layout() {
        return read_close$LAYOUT;
    }

    private static final long read_close$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*read_close)(struct AVFormatContext *)
     * }
     */
    public static final long read_close$offset() {
        return read_close$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*read_close)(struct AVFormatContext *)
     * }
     */
    public static MemorySegment read_close(MemorySegment struct) {
        return struct.get(read_close$LAYOUT, read_close$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*read_close)(struct AVFormatContext *)
     * }
     */
    public static void read_close(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read_close$LAYOUT, read_close$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*read_seek)(struct AVFormatContext *, int, int64_t, int)
     * }
     */
    public static class read_seek {

        read_seek() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, long _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER,
            FFmpeg.C_INT,
            FFmpeg.C_LONG,
            FFmpeg.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(read_seek.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(read_seek.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, long _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout read_seek$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read_seek"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*read_seek)(struct AVFormatContext *, int, int64_t, int)
     * }
     */
    public static final AddressLayout read_seek$layout() {
        return read_seek$LAYOUT;
    }

    private static final long read_seek$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*read_seek)(struct AVFormatContext *, int, int64_t, int)
     * }
     */
    public static final long read_seek$offset() {
        return read_seek$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*read_seek)(struct AVFormatContext *, int, int64_t, int)
     * }
     */
    public static MemorySegment read_seek(MemorySegment struct) {
        return struct.get(read_seek$LAYOUT, read_seek$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*read_seek)(struct AVFormatContext *, int, int64_t, int)
     * }
     */
    public static void read_seek(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read_seek$LAYOUT, read_seek$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int64_t (*read_timestamp)(struct AVFormatContext *, int, int64_t *, int64_t)
     * }
     */
    public static class read_timestamp {

        read_timestamp() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0, int _x1, MemorySegment _x2, long _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_LONG,
            FFmpeg.C_POINTER,
            FFmpeg.C_INT,
            FFmpeg.C_POINTER,
            FFmpeg.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(read_timestamp.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(read_timestamp.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, long _x3) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout read_timestamp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read_timestamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t (*read_timestamp)(struct AVFormatContext *, int, int64_t *, int64_t)
     * }
     */
    public static final AddressLayout read_timestamp$layout() {
        return read_timestamp$LAYOUT;
    }

    private static final long read_timestamp$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t (*read_timestamp)(struct AVFormatContext *, int, int64_t *, int64_t)
     * }
     */
    public static final long read_timestamp$offset() {
        return read_timestamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t (*read_timestamp)(struct AVFormatContext *, int, int64_t *, int64_t)
     * }
     */
    public static MemorySegment read_timestamp(MemorySegment struct) {
        return struct.get(read_timestamp$LAYOUT, read_timestamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t (*read_timestamp)(struct AVFormatContext *, int, int64_t *, int64_t)
     * }
     */
    public static void read_timestamp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read_timestamp$LAYOUT, read_timestamp$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*read_play)(struct AVFormatContext *)
     * }
     */
    public static class read_play {

        read_play() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(read_play.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(read_play.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout read_play$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read_play"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*read_play)(struct AVFormatContext *)
     * }
     */
    public static final AddressLayout read_play$layout() {
        return read_play$LAYOUT;
    }

    private static final long read_play$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*read_play)(struct AVFormatContext *)
     * }
     */
    public static final long read_play$offset() {
        return read_play$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*read_play)(struct AVFormatContext *)
     * }
     */
    public static MemorySegment read_play(MemorySegment struct) {
        return struct.get(read_play$LAYOUT, read_play$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*read_play)(struct AVFormatContext *)
     * }
     */
    public static void read_play(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read_play$LAYOUT, read_play$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*read_pause)(struct AVFormatContext *)
     * }
     */
    public static class read_pause {

        read_pause() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(read_pause.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(read_pause.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout read_pause$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read_pause"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*read_pause)(struct AVFormatContext *)
     * }
     */
    public static final AddressLayout read_pause$layout() {
        return read_pause$LAYOUT;
    }

    private static final long read_pause$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*read_pause)(struct AVFormatContext *)
     * }
     */
    public static final long read_pause$offset() {
        return read_pause$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*read_pause)(struct AVFormatContext *)
     * }
     */
    public static MemorySegment read_pause(MemorySegment struct) {
        return struct.get(read_pause$LAYOUT, read_pause$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*read_pause)(struct AVFormatContext *)
     * }
     */
    public static void read_pause(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read_pause$LAYOUT, read_pause$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*read_seek2)(struct AVFormatContext *, int, int64_t, int64_t, int64_t, int)
     * }
     */
    public static class read_seek2 {

        read_seek2() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, long _x2, long _x3, long _x4, int _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER,
            FFmpeg.C_INT,
            FFmpeg.C_LONG,
            FFmpeg.C_LONG,
            FFmpeg.C_LONG,
            FFmpeg.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(read_seek2.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(read_seek2.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, long _x2, long _x3, long _x4, int _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout read_seek2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("read_seek2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*read_seek2)(struct AVFormatContext *, int, int64_t, int64_t, int64_t, int)
     * }
     */
    public static final AddressLayout read_seek2$layout() {
        return read_seek2$LAYOUT;
    }

    private static final long read_seek2$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*read_seek2)(struct AVFormatContext *, int, int64_t, int64_t, int64_t, int)
     * }
     */
    public static final long read_seek2$offset() {
        return read_seek2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*read_seek2)(struct AVFormatContext *, int, int64_t, int64_t, int64_t, int)
     * }
     */
    public static MemorySegment read_seek2(MemorySegment struct) {
        return struct.get(read_seek2$LAYOUT, read_seek2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*read_seek2)(struct AVFormatContext *, int, int64_t, int64_t, int64_t, int)
     * }
     */
    public static void read_seek2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(read_seek2$LAYOUT, read_seek2$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*get_device_list)(struct AVFormatContext *, struct AVDeviceInfoList *)
     * }
     */
    public static class get_device_list {

        get_device_list() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER,
            FFmpeg.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(get_device_list.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_device_list.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_device_list$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_device_list"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*get_device_list)(struct AVFormatContext *, struct AVDeviceInfoList *)
     * }
     */
    public static final AddressLayout get_device_list$layout() {
        return get_device_list$LAYOUT;
    }

    private static final long get_device_list$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*get_device_list)(struct AVFormatContext *, struct AVDeviceInfoList *)
     * }
     */
    public static final long get_device_list$offset() {
        return get_device_list$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*get_device_list)(struct AVFormatContext *, struct AVDeviceInfoList *)
     * }
     */
    public static MemorySegment get_device_list(MemorySegment struct) {
        return struct.get(get_device_list$LAYOUT, get_device_list$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*get_device_list)(struct AVFormatContext *, struct AVDeviceInfoList *)
     * }
     */
    public static void get_device_list(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_device_list$LAYOUT, get_device_list$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

