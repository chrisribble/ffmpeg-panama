// Generated by jextract

package io.github.chrisribble.ffmpeg5;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct AVHWAccel {
 *     const char *name;
 *     enum AVMediaType type;
 *     enum AVCodecID id;
 *     enum AVPixelFormat pix_fmt;
 *     int capabilities;
 *     int (*alloc_frame)(AVCodecContext *, AVFrame *);
 *     int (*start_frame)(AVCodecContext *, const uint8_t *, uint32_t);
 *     int (*decode_params)(AVCodecContext *, int, const uint8_t *, uint32_t);
 *     int (*decode_slice)(AVCodecContext *, const uint8_t *, uint32_t);
 *     int (*end_frame)(AVCodecContext *);
 *     int frame_priv_data_size;
 *     int (*init)(AVCodecContext *);
 *     int (*uninit)(AVCodecContext *);
 *     int priv_data_size;
 *     int caps_internal;
 *     int (*frame_params)(AVCodecContext *, AVBufferRef *);
 * }
 * }
 */
public class AVHWAccel {

    AVHWAccel() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FFmpeg.C_POINTER.withName("name"),
        FFmpeg.C_INT.withName("type"),
        FFmpeg.C_INT.withName("id"),
        FFmpeg.C_INT.withName("pix_fmt"),
        FFmpeg.C_INT.withName("capabilities"),
        FFmpeg.C_POINTER.withName("alloc_frame"),
        FFmpeg.C_POINTER.withName("start_frame"),
        FFmpeg.C_POINTER.withName("decode_params"),
        FFmpeg.C_POINTER.withName("decode_slice"),
        FFmpeg.C_POINTER.withName("end_frame"),
        FFmpeg.C_INT.withName("frame_priv_data_size"),
        MemoryLayout.paddingLayout(4),
        FFmpeg.C_POINTER.withName("init"),
        FFmpeg.C_POINTER.withName("uninit"),
        FFmpeg.C_INT.withName("priv_data_size"),
        FFmpeg.C_INT.withName("caps_internal"),
        FFmpeg.C_POINTER.withName("frame_params")
    ).withName("AVHWAccel");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum AVMediaType type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum AVMediaType type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum AVMediaType type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum AVMediaType type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum AVCodecID id
     * }
     */
    public static final OfInt id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum AVCodecID id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum AVCodecID id
     * }
     */
    public static int id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum AVCodecID id
     * }
     */
    public static void id(MemorySegment struct, int fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final OfInt pix_fmt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pix_fmt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum AVPixelFormat pix_fmt
     * }
     */
    public static final OfInt pix_fmt$layout() {
        return pix_fmt$LAYOUT;
    }

    private static final long pix_fmt$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum AVPixelFormat pix_fmt
     * }
     */
    public static final long pix_fmt$offset() {
        return pix_fmt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum AVPixelFormat pix_fmt
     * }
     */
    public static int pix_fmt(MemorySegment struct) {
        return struct.get(pix_fmt$LAYOUT, pix_fmt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum AVPixelFormat pix_fmt
     * }
     */
    public static void pix_fmt(MemorySegment struct, int fieldValue) {
        struct.set(pix_fmt$LAYOUT, pix_fmt$OFFSET, fieldValue);
    }

    private static final OfInt capabilities$LAYOUT = (OfInt)$LAYOUT.select(groupElement("capabilities"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int capabilities
     * }
     */
    public static final OfInt capabilities$layout() {
        return capabilities$LAYOUT;
    }

    private static final long capabilities$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int capabilities
     * }
     */
    public static final long capabilities$offset() {
        return capabilities$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int capabilities
     * }
     */
    public static int capabilities(MemorySegment struct) {
        return struct.get(capabilities$LAYOUT, capabilities$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int capabilities
     * }
     */
    public static void capabilities(MemorySegment struct, int fieldValue) {
        struct.set(capabilities$LAYOUT, capabilities$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*alloc_frame)(AVCodecContext *, AVFrame *)
     * }
     */
    public static class alloc_frame {

        alloc_frame() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER,
            FFmpeg.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(alloc_frame.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(alloc_frame.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout alloc_frame$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("alloc_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*alloc_frame)(AVCodecContext *, AVFrame *)
     * }
     */
    public static final AddressLayout alloc_frame$layout() {
        return alloc_frame$LAYOUT;
    }

    private static final long alloc_frame$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*alloc_frame)(AVCodecContext *, AVFrame *)
     * }
     */
    public static final long alloc_frame$offset() {
        return alloc_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*alloc_frame)(AVCodecContext *, AVFrame *)
     * }
     */
    public static MemorySegment alloc_frame(MemorySegment struct) {
        return struct.get(alloc_frame$LAYOUT, alloc_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*alloc_frame)(AVCodecContext *, AVFrame *)
     * }
     */
    public static void alloc_frame(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(alloc_frame$LAYOUT, alloc_frame$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*start_frame)(AVCodecContext *, const uint8_t *, uint32_t)
     * }
     */
    public static class start_frame {

        start_frame() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER,
            FFmpeg.C_POINTER,
            FFmpeg.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(start_frame.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(start_frame.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout start_frame$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("start_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*start_frame)(AVCodecContext *, const uint8_t *, uint32_t)
     * }
     */
    public static final AddressLayout start_frame$layout() {
        return start_frame$LAYOUT;
    }

    private static final long start_frame$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*start_frame)(AVCodecContext *, const uint8_t *, uint32_t)
     * }
     */
    public static final long start_frame$offset() {
        return start_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*start_frame)(AVCodecContext *, const uint8_t *, uint32_t)
     * }
     */
    public static MemorySegment start_frame(MemorySegment struct) {
        return struct.get(start_frame$LAYOUT, start_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*start_frame)(AVCodecContext *, const uint8_t *, uint32_t)
     * }
     */
    public static void start_frame(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(start_frame$LAYOUT, start_frame$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*decode_params)(AVCodecContext *, int, const uint8_t *, uint32_t)
     * }
     */
    public static class decode_params {

        decode_params() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER,
            FFmpeg.C_INT,
            FFmpeg.C_POINTER,
            FFmpeg.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(decode_params.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(decode_params.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout decode_params$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("decode_params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*decode_params)(AVCodecContext *, int, const uint8_t *, uint32_t)
     * }
     */
    public static final AddressLayout decode_params$layout() {
        return decode_params$LAYOUT;
    }

    private static final long decode_params$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*decode_params)(AVCodecContext *, int, const uint8_t *, uint32_t)
     * }
     */
    public static final long decode_params$offset() {
        return decode_params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*decode_params)(AVCodecContext *, int, const uint8_t *, uint32_t)
     * }
     */
    public static MemorySegment decode_params(MemorySegment struct) {
        return struct.get(decode_params$LAYOUT, decode_params$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*decode_params)(AVCodecContext *, int, const uint8_t *, uint32_t)
     * }
     */
    public static void decode_params(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(decode_params$LAYOUT, decode_params$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*decode_slice)(AVCodecContext *, const uint8_t *, uint32_t)
     * }
     */
    public static class decode_slice {

        decode_slice() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER,
            FFmpeg.C_POINTER,
            FFmpeg.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(decode_slice.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(decode_slice.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout decode_slice$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("decode_slice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*decode_slice)(AVCodecContext *, const uint8_t *, uint32_t)
     * }
     */
    public static final AddressLayout decode_slice$layout() {
        return decode_slice$LAYOUT;
    }

    private static final long decode_slice$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*decode_slice)(AVCodecContext *, const uint8_t *, uint32_t)
     * }
     */
    public static final long decode_slice$offset() {
        return decode_slice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*decode_slice)(AVCodecContext *, const uint8_t *, uint32_t)
     * }
     */
    public static MemorySegment decode_slice(MemorySegment struct) {
        return struct.get(decode_slice$LAYOUT, decode_slice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*decode_slice)(AVCodecContext *, const uint8_t *, uint32_t)
     * }
     */
    public static void decode_slice(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(decode_slice$LAYOUT, decode_slice$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*end_frame)(AVCodecContext *)
     * }
     */
    public static class end_frame {

        end_frame() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(end_frame.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(end_frame.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout end_frame$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("end_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*end_frame)(AVCodecContext *)
     * }
     */
    public static final AddressLayout end_frame$layout() {
        return end_frame$LAYOUT;
    }

    private static final long end_frame$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*end_frame)(AVCodecContext *)
     * }
     */
    public static final long end_frame$offset() {
        return end_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*end_frame)(AVCodecContext *)
     * }
     */
    public static MemorySegment end_frame(MemorySegment struct) {
        return struct.get(end_frame$LAYOUT, end_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*end_frame)(AVCodecContext *)
     * }
     */
    public static void end_frame(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(end_frame$LAYOUT, end_frame$OFFSET, fieldValue);
    }

    private static final OfInt frame_priv_data_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frame_priv_data_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int frame_priv_data_size
     * }
     */
    public static final OfInt frame_priv_data_size$layout() {
        return frame_priv_data_size$LAYOUT;
    }

    private static final long frame_priv_data_size$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int frame_priv_data_size
     * }
     */
    public static final long frame_priv_data_size$offset() {
        return frame_priv_data_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int frame_priv_data_size
     * }
     */
    public static int frame_priv_data_size(MemorySegment struct) {
        return struct.get(frame_priv_data_size$LAYOUT, frame_priv_data_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int frame_priv_data_size
     * }
     */
    public static void frame_priv_data_size(MemorySegment struct, int fieldValue) {
        struct.set(frame_priv_data_size$LAYOUT, frame_priv_data_size$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*init)(AVCodecContext *)
     * }
     */
    public static class init {

        init() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(init.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(init.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout init$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("init"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*init)(AVCodecContext *)
     * }
     */
    public static final AddressLayout init$layout() {
        return init$LAYOUT;
    }

    private static final long init$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*init)(AVCodecContext *)
     * }
     */
    public static final long init$offset() {
        return init$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*init)(AVCodecContext *)
     * }
     */
    public static MemorySegment init(MemorySegment struct) {
        return struct.get(init$LAYOUT, init$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*init)(AVCodecContext *)
     * }
     */
    public static void init(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(init$LAYOUT, init$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*uninit)(AVCodecContext *)
     * }
     */
    public static class uninit {

        uninit() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(uninit.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(uninit.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout uninit$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("uninit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*uninit)(AVCodecContext *)
     * }
     */
    public static final AddressLayout uninit$layout() {
        return uninit$LAYOUT;
    }

    private static final long uninit$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*uninit)(AVCodecContext *)
     * }
     */
    public static final long uninit$offset() {
        return uninit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*uninit)(AVCodecContext *)
     * }
     */
    public static MemorySegment uninit(MemorySegment struct) {
        return struct.get(uninit$LAYOUT, uninit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*uninit)(AVCodecContext *)
     * }
     */
    public static void uninit(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(uninit$LAYOUT, uninit$OFFSET, fieldValue);
    }

    private static final OfInt priv_data_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("priv_data_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int priv_data_size
     * }
     */
    public static final OfInt priv_data_size$layout() {
        return priv_data_size$LAYOUT;
    }

    private static final long priv_data_size$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int priv_data_size
     * }
     */
    public static final long priv_data_size$offset() {
        return priv_data_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int priv_data_size
     * }
     */
    public static int priv_data_size(MemorySegment struct) {
        return struct.get(priv_data_size$LAYOUT, priv_data_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int priv_data_size
     * }
     */
    public static void priv_data_size(MemorySegment struct, int fieldValue) {
        struct.set(priv_data_size$LAYOUT, priv_data_size$OFFSET, fieldValue);
    }

    private static final OfInt caps_internal$LAYOUT = (OfInt)$LAYOUT.select(groupElement("caps_internal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int caps_internal
     * }
     */
    public static final OfInt caps_internal$layout() {
        return caps_internal$LAYOUT;
    }

    private static final long caps_internal$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int caps_internal
     * }
     */
    public static final long caps_internal$offset() {
        return caps_internal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int caps_internal
     * }
     */
    public static int caps_internal(MemorySegment struct) {
        return struct.get(caps_internal$LAYOUT, caps_internal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int caps_internal
     * }
     */
    public static void caps_internal(MemorySegment struct, int fieldValue) {
        struct.set(caps_internal$LAYOUT, caps_internal$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*frame_params)(AVCodecContext *, AVBufferRef *)
     * }
     */
    public static class frame_params {

        frame_params() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            FFmpeg.C_INT,
            FFmpeg.C_POINTER,
            FFmpeg.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = FFmpeg.upcallHandle(frame_params.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(frame_params.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout frame_params$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("frame_params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*frame_params)(AVCodecContext *, AVBufferRef *)
     * }
     */
    public static final AddressLayout frame_params$layout() {
        return frame_params$LAYOUT;
    }

    private static final long frame_params$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*frame_params)(AVCodecContext *, AVBufferRef *)
     * }
     */
    public static final long frame_params$offset() {
        return frame_params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*frame_params)(AVCodecContext *, AVBufferRef *)
     * }
     */
    public static MemorySegment frame_params(MemorySegment struct) {
        return struct.get(frame_params$LAYOUT, frame_params$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*frame_params)(AVCodecContext *, AVBufferRef *)
     * }
     */
    public static void frame_params(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(frame_params$LAYOUT, frame_params$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

