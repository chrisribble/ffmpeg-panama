// Generated by jextract

package com.chrisribble.ffmpeg5;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FFmpeg5_2 extends FFmpeg5_1 {

    public static MethodHandle av_hwdevice_hwconfig_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$5,"av_hwdevice_hwconfig_alloc");
    }
    /**
     * {@snippet :
     * void* av_hwdevice_hwconfig_alloc(AVBufferRef* device_ctx);
     * }
     */
    public static MemorySegment av_hwdevice_hwconfig_alloc(MemorySegment device_ctx) {
        var mh$ = av_hwdevice_hwconfig_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwdevice_get_hwframe_constraints$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$0,"av_hwdevice_get_hwframe_constraints");
    }
    /**
     * {@snippet :
     * AVHWFramesConstraints* av_hwdevice_get_hwframe_constraints(AVBufferRef* ref, void* hwconfig);
     * }
     */
    public static MemorySegment av_hwdevice_get_hwframe_constraints(MemorySegment ref, MemorySegment hwconfig) {
        var mh$ = av_hwdevice_get_hwframe_constraints$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ref, hwconfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwframe_constraints_free$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$1,"av_hwframe_constraints_free");
    }
    /**
     * {@snippet :
     * void av_hwframe_constraints_free(AVHWFramesConstraints** constraints);
     * }
     */
    public static void av_hwframe_constraints_free(MemorySegment constraints) {
        var mh$ = av_hwframe_constraints_free$MH();
        try {
            mh$.invokeExact(constraints);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .AV_HWFRAME_MAP_READ = 1;
     * }
     */
    public static int AV_HWFRAME_MAP_READ() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .AV_HWFRAME_MAP_WRITE = 2;
     * }
     */
    public static int AV_HWFRAME_MAP_WRITE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .AV_HWFRAME_MAP_OVERWRITE = 4;
     * }
     */
    public static int AV_HWFRAME_MAP_OVERWRITE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .AV_HWFRAME_MAP_DIRECT = 8;
     * }
     */
    public static int AV_HWFRAME_MAP_DIRECT() {
        return (int)8L;
    }
    public static MethodHandle av_hwframe_map$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$2,"av_hwframe_map");
    }
    /**
     * {@snippet :
     * int av_hwframe_map(AVFrame* dst, const AVFrame* src, int flags);
     * }
     */
    public static int av_hwframe_map(MemorySegment dst, MemorySegment src, int flags) {
        var mh$ = av_hwframe_map$MH();
        try {
            return (int)mh$.invokeExact(dst, src, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwframe_ctx_create_derived$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$3,"av_hwframe_ctx_create_derived");
    }
    /**
     * {@snippet :
     * int av_hwframe_ctx_create_derived(AVBufferRef** derived_frame_ctx, enum AVPixelFormat format, AVBufferRef* derived_device_ctx, AVBufferRef* source_frame_ctx, int flags);
     * }
     */
    public static int av_hwframe_ctx_create_derived(MemorySegment derived_frame_ctx, int format, MemorySegment derived_device_ctx, MemorySegment source_frame_ctx, int flags) {
        var mh$ = av_hwframe_ctx_create_derived$MH();
        try {
            return (int)mh$.invokeExact(derived_frame_ctx, format, derived_device_ctx, source_frame_ctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_NONE = 0;
     * }
     */
    public static int AV_CODEC_ID_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MPEG1VIDEO = 1;
     * }
     */
    public static int AV_CODEC_ID_MPEG1VIDEO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MPEG2VIDEO = 2;
     * }
     */
    public static int AV_CODEC_ID_MPEG2VIDEO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_H261 = 3;
     * }
     */
    public static int AV_CODEC_ID_H261() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_H263 = 4;
     * }
     */
    public static int AV_CODEC_ID_H263() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_RV10 = 5;
     * }
     */
    public static int AV_CODEC_ID_RV10() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_RV20 = 6;
     * }
     */
    public static int AV_CODEC_ID_RV20() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MJPEG = 7;
     * }
     */
    public static int AV_CODEC_ID_MJPEG() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MJPEGB = 8;
     * }
     */
    public static int AV_CODEC_ID_MJPEGB() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_LJPEG = 9;
     * }
     */
    public static int AV_CODEC_ID_LJPEG() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SP5X = 10;
     * }
     */
    public static int AV_CODEC_ID_SP5X() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_JPEGLS = 11;
     * }
     */
    public static int AV_CODEC_ID_JPEGLS() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MPEG4 = 12;
     * }
     */
    public static int AV_CODEC_ID_MPEG4() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_RAWVIDEO = 13;
     * }
     */
    public static int AV_CODEC_ID_RAWVIDEO() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MSMPEG4V1 = 14;
     * }
     */
    public static int AV_CODEC_ID_MSMPEG4V1() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MSMPEG4V2 = 15;
     * }
     */
    public static int AV_CODEC_ID_MSMPEG4V2() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MSMPEG4V3 = 16;
     * }
     */
    public static int AV_CODEC_ID_MSMPEG4V3() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WMV1 = 17;
     * }
     */
    public static int AV_CODEC_ID_WMV1() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WMV2 = 18;
     * }
     */
    public static int AV_CODEC_ID_WMV2() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_H263P = 19;
     * }
     */
    public static int AV_CODEC_ID_H263P() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_H263I = 20;
     * }
     */
    public static int AV_CODEC_ID_H263I() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FLV1 = 21;
     * }
     */
    public static int AV_CODEC_ID_FLV1() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SVQ1 = 22;
     * }
     */
    public static int AV_CODEC_ID_SVQ1() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SVQ3 = 23;
     * }
     */
    public static int AV_CODEC_ID_SVQ3() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DVVIDEO = 24;
     * }
     */
    public static int AV_CODEC_ID_DVVIDEO() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_HUFFYUV = 25;
     * }
     */
    public static int AV_CODEC_ID_HUFFYUV() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CYUV = 26;
     * }
     */
    public static int AV_CODEC_ID_CYUV() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_H264 = 27;
     * }
     */
    public static int AV_CODEC_ID_H264() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_INDEO3 = 28;
     * }
     */
    public static int AV_CODEC_ID_INDEO3() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VP3 = 29;
     * }
     */
    public static int AV_CODEC_ID_VP3() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_THEORA = 30;
     * }
     */
    public static int AV_CODEC_ID_THEORA() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ASV1 = 31;
     * }
     */
    public static int AV_CODEC_ID_ASV1() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ASV2 = 32;
     * }
     */
    public static int AV_CODEC_ID_ASV2() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FFV1 = 33;
     * }
     */
    public static int AV_CODEC_ID_FFV1() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_4XM = 34;
     * }
     */
    public static int AV_CODEC_ID_4XM() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VCR1 = 35;
     * }
     */
    public static int AV_CODEC_ID_VCR1() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CLJR = 36;
     * }
     */
    public static int AV_CODEC_ID_CLJR() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MDEC = 37;
     * }
     */
    public static int AV_CODEC_ID_MDEC() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ROQ = 38;
     * }
     */
    public static int AV_CODEC_ID_ROQ() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_INTERPLAY_VIDEO = 39;
     * }
     */
    public static int AV_CODEC_ID_INTERPLAY_VIDEO() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_XAN_WC3 = 40;
     * }
     */
    public static int AV_CODEC_ID_XAN_WC3() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_XAN_WC4 = 41;
     * }
     */
    public static int AV_CODEC_ID_XAN_WC4() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_RPZA = 42;
     * }
     */
    public static int AV_CODEC_ID_RPZA() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CINEPAK = 43;
     * }
     */
    public static int AV_CODEC_ID_CINEPAK() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WS_VQA = 44;
     * }
     */
    public static int AV_CODEC_ID_WS_VQA() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MSRLE = 45;
     * }
     */
    public static int AV_CODEC_ID_MSRLE() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MSVIDEO1 = 46;
     * }
     */
    public static int AV_CODEC_ID_MSVIDEO1() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_IDCIN = 47;
     * }
     */
    public static int AV_CODEC_ID_IDCIN() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_8BPS = 48;
     * }
     */
    public static int AV_CODEC_ID_8BPS() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SMC = 49;
     * }
     */
    public static int AV_CODEC_ID_SMC() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FLIC = 50;
     * }
     */
    public static int AV_CODEC_ID_FLIC() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TRUEMOTION1 = 51;
     * }
     */
    public static int AV_CODEC_ID_TRUEMOTION1() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VMDVIDEO = 52;
     * }
     */
    public static int AV_CODEC_ID_VMDVIDEO() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MSZH = 53;
     * }
     */
    public static int AV_CODEC_ID_MSZH() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ZLIB = 54;
     * }
     */
    public static int AV_CODEC_ID_ZLIB() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_QTRLE = 55;
     * }
     */
    public static int AV_CODEC_ID_QTRLE() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TSCC = 56;
     * }
     */
    public static int AV_CODEC_ID_TSCC() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ULTI = 57;
     * }
     */
    public static int AV_CODEC_ID_ULTI() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_QDRAW = 58;
     * }
     */
    public static int AV_CODEC_ID_QDRAW() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VIXL = 59;
     * }
     */
    public static int AV_CODEC_ID_VIXL() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_QPEG = 60;
     * }
     */
    public static int AV_CODEC_ID_QPEG() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PNG = 61;
     * }
     */
    public static int AV_CODEC_ID_PNG() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PPM = 62;
     * }
     */
    public static int AV_CODEC_ID_PPM() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PBM = 63;
     * }
     */
    public static int AV_CODEC_ID_PBM() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PGM = 64;
     * }
     */
    public static int AV_CODEC_ID_PGM() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PGMYUV = 65;
     * }
     */
    public static int AV_CODEC_ID_PGMYUV() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PAM = 66;
     * }
     */
    public static int AV_CODEC_ID_PAM() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FFVHUFF = 67;
     * }
     */
    public static int AV_CODEC_ID_FFVHUFF() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_RV30 = 68;
     * }
     */
    public static int AV_CODEC_ID_RV30() {
        return (int)68L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_RV40 = 69;
     * }
     */
    public static int AV_CODEC_ID_RV40() {
        return (int)69L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VC1 = 70;
     * }
     */
    public static int AV_CODEC_ID_VC1() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WMV3 = 71;
     * }
     */
    public static int AV_CODEC_ID_WMV3() {
        return (int)71L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_LOCO = 72;
     * }
     */
    public static int AV_CODEC_ID_LOCO() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WNV1 = 73;
     * }
     */
    public static int AV_CODEC_ID_WNV1() {
        return (int)73L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AASC = 74;
     * }
     */
    public static int AV_CODEC_ID_AASC() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_INDEO2 = 75;
     * }
     */
    public static int AV_CODEC_ID_INDEO2() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FRAPS = 76;
     * }
     */
    public static int AV_CODEC_ID_FRAPS() {
        return (int)76L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TRUEMOTION2 = 77;
     * }
     */
    public static int AV_CODEC_ID_TRUEMOTION2() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_BMP = 78;
     * }
     */
    public static int AV_CODEC_ID_BMP() {
        return (int)78L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CSCD = 79;
     * }
     */
    public static int AV_CODEC_ID_CSCD() {
        return (int)79L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MMVIDEO = 80;
     * }
     */
    public static int AV_CODEC_ID_MMVIDEO() {
        return (int)80L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ZMBV = 81;
     * }
     */
    public static int AV_CODEC_ID_ZMBV() {
        return (int)81L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AVS = 82;
     * }
     */
    public static int AV_CODEC_ID_AVS() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SMACKVIDEO = 83;
     * }
     */
    public static int AV_CODEC_ID_SMACKVIDEO() {
        return (int)83L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_NUV = 84;
     * }
     */
    public static int AV_CODEC_ID_NUV() {
        return (int)84L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_KMVC = 85;
     * }
     */
    public static int AV_CODEC_ID_KMVC() {
        return (int)85L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FLASHSV = 86;
     * }
     */
    public static int AV_CODEC_ID_FLASHSV() {
        return (int)86L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CAVS = 87;
     * }
     */
    public static int AV_CODEC_ID_CAVS() {
        return (int)87L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_JPEG2000 = 88;
     * }
     */
    public static int AV_CODEC_ID_JPEG2000() {
        return (int)88L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VMNC = 89;
     * }
     */
    public static int AV_CODEC_ID_VMNC() {
        return (int)89L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VP5 = 90;
     * }
     */
    public static int AV_CODEC_ID_VP5() {
        return (int)90L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VP6 = 91;
     * }
     */
    public static int AV_CODEC_ID_VP6() {
        return (int)91L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VP6F = 92;
     * }
     */
    public static int AV_CODEC_ID_VP6F() {
        return (int)92L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TARGA = 93;
     * }
     */
    public static int AV_CODEC_ID_TARGA() {
        return (int)93L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DSICINVIDEO = 94;
     * }
     */
    public static int AV_CODEC_ID_DSICINVIDEO() {
        return (int)94L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TIERTEXSEQVIDEO = 95;
     * }
     */
    public static int AV_CODEC_ID_TIERTEXSEQVIDEO() {
        return (int)95L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TIFF = 96;
     * }
     */
    public static int AV_CODEC_ID_TIFF() {
        return (int)96L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_GIF = 97;
     * }
     */
    public static int AV_CODEC_ID_GIF() {
        return (int)97L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DXA = 98;
     * }
     */
    public static int AV_CODEC_ID_DXA() {
        return (int)98L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DNXHD = 99;
     * }
     */
    public static int AV_CODEC_ID_DNXHD() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_THP = 100;
     * }
     */
    public static int AV_CODEC_ID_THP() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SGI = 101;
     * }
     */
    public static int AV_CODEC_ID_SGI() {
        return (int)101L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_C93 = 102;
     * }
     */
    public static int AV_CODEC_ID_C93() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_BETHSOFTVID = 103;
     * }
     */
    public static int AV_CODEC_ID_BETHSOFTVID() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PTX = 104;
     * }
     */
    public static int AV_CODEC_ID_PTX() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TXD = 105;
     * }
     */
    public static int AV_CODEC_ID_TXD() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VP6A = 106;
     * }
     */
    public static int AV_CODEC_ID_VP6A() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AMV = 107;
     * }
     */
    public static int AV_CODEC_ID_AMV() {
        return (int)107L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VB = 108;
     * }
     */
    public static int AV_CODEC_ID_VB() {
        return (int)108L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCX = 109;
     * }
     */
    public static int AV_CODEC_ID_PCX() {
        return (int)109L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SUNRAST = 110;
     * }
     */
    public static int AV_CODEC_ID_SUNRAST() {
        return (int)110L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_INDEO4 = 111;
     * }
     */
    public static int AV_CODEC_ID_INDEO4() {
        return (int)111L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_INDEO5 = 112;
     * }
     */
    public static int AV_CODEC_ID_INDEO5() {
        return (int)112L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MIMIC = 113;
     * }
     */
    public static int AV_CODEC_ID_MIMIC() {
        return (int)113L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_RL2 = 114;
     * }
     */
    public static int AV_CODEC_ID_RL2() {
        return (int)114L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ESCAPE124 = 115;
     * }
     */
    public static int AV_CODEC_ID_ESCAPE124() {
        return (int)115L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DIRAC = 116;
     * }
     */
    public static int AV_CODEC_ID_DIRAC() {
        return (int)116L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_BFI = 117;
     * }
     */
    public static int AV_CODEC_ID_BFI() {
        return (int)117L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CMV = 118;
     * }
     */
    public static int AV_CODEC_ID_CMV() {
        return (int)118L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MOTIONPIXELS = 119;
     * }
     */
    public static int AV_CODEC_ID_MOTIONPIXELS() {
        return (int)119L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TGV = 120;
     * }
     */
    public static int AV_CODEC_ID_TGV() {
        return (int)120L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TGQ = 121;
     * }
     */
    public static int AV_CODEC_ID_TGQ() {
        return (int)121L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TQI = 122;
     * }
     */
    public static int AV_CODEC_ID_TQI() {
        return (int)122L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AURA = 123;
     * }
     */
    public static int AV_CODEC_ID_AURA() {
        return (int)123L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AURA2 = 124;
     * }
     */
    public static int AV_CODEC_ID_AURA2() {
        return (int)124L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_V210X = 125;
     * }
     */
    public static int AV_CODEC_ID_V210X() {
        return (int)125L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TMV = 126;
     * }
     */
    public static int AV_CODEC_ID_TMV() {
        return (int)126L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_V210 = 127;
     * }
     */
    public static int AV_CODEC_ID_V210() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DPX = 128;
     * }
     */
    public static int AV_CODEC_ID_DPX() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MAD = 129;
     * }
     */
    public static int AV_CODEC_ID_MAD() {
        return (int)129L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FRWU = 130;
     * }
     */
    public static int AV_CODEC_ID_FRWU() {
        return (int)130L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FLASHSV2 = 131;
     * }
     */
    public static int AV_CODEC_ID_FLASHSV2() {
        return (int)131L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CDGRAPHICS = 132;
     * }
     */
    public static int AV_CODEC_ID_CDGRAPHICS() {
        return (int)132L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_R210 = 133;
     * }
     */
    public static int AV_CODEC_ID_R210() {
        return (int)133L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ANM = 134;
     * }
     */
    public static int AV_CODEC_ID_ANM() {
        return (int)134L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_BINKVIDEO = 135;
     * }
     */
    public static int AV_CODEC_ID_BINKVIDEO() {
        return (int)135L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_IFF_ILBM = 136;
     * }
     */
    public static int AV_CODEC_ID_IFF_ILBM() {
        return (int)136L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_KGV1 = 137;
     * }
     */
    public static int AV_CODEC_ID_KGV1() {
        return (int)137L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_YOP = 138;
     * }
     */
    public static int AV_CODEC_ID_YOP() {
        return (int)138L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VP8 = 139;
     * }
     */
    public static int AV_CODEC_ID_VP8() {
        return (int)139L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PICTOR = 140;
     * }
     */
    public static int AV_CODEC_ID_PICTOR() {
        return (int)140L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ANSI = 141;
     * }
     */
    public static int AV_CODEC_ID_ANSI() {
        return (int)141L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_A64_MULTI = 142;
     * }
     */
    public static int AV_CODEC_ID_A64_MULTI() {
        return (int)142L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_A64_MULTI5 = 143;
     * }
     */
    public static int AV_CODEC_ID_A64_MULTI5() {
        return (int)143L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_R10K = 144;
     * }
     */
    public static int AV_CODEC_ID_R10K() {
        return (int)144L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MXPEG = 145;
     * }
     */
    public static int AV_CODEC_ID_MXPEG() {
        return (int)145L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_LAGARITH = 146;
     * }
     */
    public static int AV_CODEC_ID_LAGARITH() {
        return (int)146L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PRORES = 147;
     * }
     */
    public static int AV_CODEC_ID_PRORES() {
        return (int)147L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_JV = 148;
     * }
     */
    public static int AV_CODEC_ID_JV() {
        return (int)148L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DFA = 149;
     * }
     */
    public static int AV_CODEC_ID_DFA() {
        return (int)149L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WMV3IMAGE = 150;
     * }
     */
    public static int AV_CODEC_ID_WMV3IMAGE() {
        return (int)150L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VC1IMAGE = 151;
     * }
     */
    public static int AV_CODEC_ID_VC1IMAGE() {
        return (int)151L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_UTVIDEO = 152;
     * }
     */
    public static int AV_CODEC_ID_UTVIDEO() {
        return (int)152L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_BMV_VIDEO = 153;
     * }
     */
    public static int AV_CODEC_ID_BMV_VIDEO() {
        return (int)153L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VBLE = 154;
     * }
     */
    public static int AV_CODEC_ID_VBLE() {
        return (int)154L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DXTORY = 155;
     * }
     */
    public static int AV_CODEC_ID_DXTORY() {
        return (int)155L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_V410 = 156;
     * }
     */
    public static int AV_CODEC_ID_V410() {
        return (int)156L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_XWD = 157;
     * }
     */
    public static int AV_CODEC_ID_XWD() {
        return (int)157L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CDXL = 158;
     * }
     */
    public static int AV_CODEC_ID_CDXL() {
        return (int)158L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_XBM = 159;
     * }
     */
    public static int AV_CODEC_ID_XBM() {
        return (int)159L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ZEROCODEC = 160;
     * }
     */
    public static int AV_CODEC_ID_ZEROCODEC() {
        return (int)160L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MSS1 = 161;
     * }
     */
    public static int AV_CODEC_ID_MSS1() {
        return (int)161L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MSA1 = 162;
     * }
     */
    public static int AV_CODEC_ID_MSA1() {
        return (int)162L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TSCC2 = 163;
     * }
     */
    public static int AV_CODEC_ID_TSCC2() {
        return (int)163L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MTS2 = 164;
     * }
     */
    public static int AV_CODEC_ID_MTS2() {
        return (int)164L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CLLC = 165;
     * }
     */
    public static int AV_CODEC_ID_CLLC() {
        return (int)165L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MSS2 = 166;
     * }
     */
    public static int AV_CODEC_ID_MSS2() {
        return (int)166L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VP9 = 167;
     * }
     */
    public static int AV_CODEC_ID_VP9() {
        return (int)167L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AIC = 168;
     * }
     */
    public static int AV_CODEC_ID_AIC() {
        return (int)168L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ESCAPE130 = 169;
     * }
     */
    public static int AV_CODEC_ID_ESCAPE130() {
        return (int)169L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_G2M = 170;
     * }
     */
    public static int AV_CODEC_ID_G2M() {
        return (int)170L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WEBP = 171;
     * }
     */
    public static int AV_CODEC_ID_WEBP() {
        return (int)171L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_HNM4_VIDEO = 172;
     * }
     */
    public static int AV_CODEC_ID_HNM4_VIDEO() {
        return (int)172L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_HEVC = 173;
     * }
     */
    public static int AV_CODEC_ID_HEVC() {
        return (int)173L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FIC = 174;
     * }
     */
    public static int AV_CODEC_ID_FIC() {
        return (int)174L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ALIAS_PIX = 175;
     * }
     */
    public static int AV_CODEC_ID_ALIAS_PIX() {
        return (int)175L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_BRENDER_PIX = 176;
     * }
     */
    public static int AV_CODEC_ID_BRENDER_PIX() {
        return (int)176L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PAF_VIDEO = 177;
     * }
     */
    public static int AV_CODEC_ID_PAF_VIDEO() {
        return (int)177L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_EXR = 178;
     * }
     */
    public static int AV_CODEC_ID_EXR() {
        return (int)178L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VP7 = 179;
     * }
     */
    public static int AV_CODEC_ID_VP7() {
        return (int)179L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SANM = 180;
     * }
     */
    public static int AV_CODEC_ID_SANM() {
        return (int)180L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SGIRLE = 181;
     * }
     */
    public static int AV_CODEC_ID_SGIRLE() {
        return (int)181L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MVC1 = 182;
     * }
     */
    public static int AV_CODEC_ID_MVC1() {
        return (int)182L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MVC2 = 183;
     * }
     */
    public static int AV_CODEC_ID_MVC2() {
        return (int)183L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_HQX = 184;
     * }
     */
    public static int AV_CODEC_ID_HQX() {
        return (int)184L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TDSC = 185;
     * }
     */
    public static int AV_CODEC_ID_TDSC() {
        return (int)185L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_HQ_HQA = 186;
     * }
     */
    public static int AV_CODEC_ID_HQ_HQA() {
        return (int)186L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_HAP = 187;
     * }
     */
    public static int AV_CODEC_ID_HAP() {
        return (int)187L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DDS = 188;
     * }
     */
    public static int AV_CODEC_ID_DDS() {
        return (int)188L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DXV = 189;
     * }
     */
    public static int AV_CODEC_ID_DXV() {
        return (int)189L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SCREENPRESSO = 190;
     * }
     */
    public static int AV_CODEC_ID_SCREENPRESSO() {
        return (int)190L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_RSCC = 191;
     * }
     */
    public static int AV_CODEC_ID_RSCC() {
        return (int)191L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AVS2 = 192;
     * }
     */
    public static int AV_CODEC_ID_AVS2() {
        return (int)192L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PGX = 193;
     * }
     */
    public static int AV_CODEC_ID_PGX() {
        return (int)193L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AVS3 = 194;
     * }
     */
    public static int AV_CODEC_ID_AVS3() {
        return (int)194L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MSP2 = 195;
     * }
     */
    public static int AV_CODEC_ID_MSP2() {
        return (int)195L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VVC = 196;
     * }
     */
    public static int AV_CODEC_ID_VVC() {
        return (int)196L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_Y41P = 197;
     * }
     */
    public static int AV_CODEC_ID_Y41P() {
        return (int)197L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AVRP = 198;
     * }
     */
    public static int AV_CODEC_ID_AVRP() {
        return (int)198L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_012V = 199;
     * }
     */
    public static int AV_CODEC_ID_012V() {
        return (int)199L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AVUI = 200;
     * }
     */
    public static int AV_CODEC_ID_AVUI() {
        return (int)200L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AYUV = 201;
     * }
     */
    public static int AV_CODEC_ID_AYUV() {
        return (int)201L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TARGA_Y216 = 202;
     * }
     */
    public static int AV_CODEC_ID_TARGA_Y216() {
        return (int)202L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_V308 = 203;
     * }
     */
    public static int AV_CODEC_ID_V308() {
        return (int)203L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_V408 = 204;
     * }
     */
    public static int AV_CODEC_ID_V408() {
        return (int)204L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_YUV4 = 205;
     * }
     */
    public static int AV_CODEC_ID_YUV4() {
        return (int)205L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AVRN = 206;
     * }
     */
    public static int AV_CODEC_ID_AVRN() {
        return (int)206L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CPIA = 207;
     * }
     */
    public static int AV_CODEC_ID_CPIA() {
        return (int)207L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_XFACE = 208;
     * }
     */
    public static int AV_CODEC_ID_XFACE() {
        return (int)208L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SNOW = 209;
     * }
     */
    public static int AV_CODEC_ID_SNOW() {
        return (int)209L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SMVJPEG = 210;
     * }
     */
    public static int AV_CODEC_ID_SMVJPEG() {
        return (int)210L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_APNG = 211;
     * }
     */
    public static int AV_CODEC_ID_APNG() {
        return (int)211L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DAALA = 212;
     * }
     */
    public static int AV_CODEC_ID_DAALA() {
        return (int)212L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CFHD = 213;
     * }
     */
    public static int AV_CODEC_ID_CFHD() {
        return (int)213L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TRUEMOTION2RT = 214;
     * }
     */
    public static int AV_CODEC_ID_TRUEMOTION2RT() {
        return (int)214L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_M101 = 215;
     * }
     */
    public static int AV_CODEC_ID_M101() {
        return (int)215L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MAGICYUV = 216;
     * }
     */
    public static int AV_CODEC_ID_MAGICYUV() {
        return (int)216L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SHEERVIDEO = 217;
     * }
     */
    public static int AV_CODEC_ID_SHEERVIDEO() {
        return (int)217L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_YLC = 218;
     * }
     */
    public static int AV_CODEC_ID_YLC() {
        return (int)218L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PSD = 219;
     * }
     */
    public static int AV_CODEC_ID_PSD() {
        return (int)219L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PIXLET = 220;
     * }
     */
    public static int AV_CODEC_ID_PIXLET() {
        return (int)220L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SPEEDHQ = 221;
     * }
     */
    public static int AV_CODEC_ID_SPEEDHQ() {
        return (int)221L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FMVC = 222;
     * }
     */
    public static int AV_CODEC_ID_FMVC() {
        return (int)222L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SCPR = 223;
     * }
     */
    public static int AV_CODEC_ID_SCPR() {
        return (int)223L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CLEARVIDEO = 224;
     * }
     */
    public static int AV_CODEC_ID_CLEARVIDEO() {
        return (int)224L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_XPM = 225;
     * }
     */
    public static int AV_CODEC_ID_XPM() {
        return (int)225L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AV1 = 226;
     * }
     */
    public static int AV_CODEC_ID_AV1() {
        return (int)226L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_BITPACKED = 227;
     * }
     */
    public static int AV_CODEC_ID_BITPACKED() {
        return (int)227L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MSCC = 228;
     * }
     */
    public static int AV_CODEC_ID_MSCC() {
        return (int)228L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SRGC = 229;
     * }
     */
    public static int AV_CODEC_ID_SRGC() {
        return (int)229L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SVG = 230;
     * }
     */
    public static int AV_CODEC_ID_SVG() {
        return (int)230L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_GDV = 231;
     * }
     */
    public static int AV_CODEC_ID_GDV() {
        return (int)231L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FITS = 232;
     * }
     */
    public static int AV_CODEC_ID_FITS() {
        return (int)232L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_IMM4 = 233;
     * }
     */
    public static int AV_CODEC_ID_IMM4() {
        return (int)233L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PROSUMER = 234;
     * }
     */
    public static int AV_CODEC_ID_PROSUMER() {
        return (int)234L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MWSC = 235;
     * }
     */
    public static int AV_CODEC_ID_MWSC() {
        return (int)235L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WCMV = 236;
     * }
     */
    public static int AV_CODEC_ID_WCMV() {
        return (int)236L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_RASC = 237;
     * }
     */
    public static int AV_CODEC_ID_RASC() {
        return (int)237L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_HYMT = 238;
     * }
     */
    public static int AV_CODEC_ID_HYMT() {
        return (int)238L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ARBC = 239;
     * }
     */
    public static int AV_CODEC_ID_ARBC() {
        return (int)239L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AGM = 240;
     * }
     */
    public static int AV_CODEC_ID_AGM() {
        return (int)240L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_LSCR = 241;
     * }
     */
    public static int AV_CODEC_ID_LSCR() {
        return (int)241L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VP4 = 242;
     * }
     */
    public static int AV_CODEC_ID_VP4() {
        return (int)242L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_IMM5 = 243;
     * }
     */
    public static int AV_CODEC_ID_IMM5() {
        return (int)243L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MVDV = 244;
     * }
     */
    public static int AV_CODEC_ID_MVDV() {
        return (int)244L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MVHA = 245;
     * }
     */
    public static int AV_CODEC_ID_MVHA() {
        return (int)245L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CDTOONS = 246;
     * }
     */
    public static int AV_CODEC_ID_CDTOONS() {
        return (int)246L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MV30 = 247;
     * }
     */
    public static int AV_CODEC_ID_MV30() {
        return (int)247L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_NOTCHLC = 248;
     * }
     */
    public static int AV_CODEC_ID_NOTCHLC() {
        return (int)248L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PFM = 249;
     * }
     */
    public static int AV_CODEC_ID_PFM() {
        return (int)249L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MOBICLIP = 250;
     * }
     */
    public static int AV_CODEC_ID_MOBICLIP() {
        return (int)250L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PHOTOCD = 251;
     * }
     */
    public static int AV_CODEC_ID_PHOTOCD() {
        return (int)251L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_IPU = 252;
     * }
     */
    public static int AV_CODEC_ID_IPU() {
        return (int)252L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ARGO = 253;
     * }
     */
    public static int AV_CODEC_ID_ARGO() {
        return (int)253L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CRI = 254;
     * }
     */
    public static int AV_CODEC_ID_CRI() {
        return (int)254L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SIMBIOSIS_IMX = 255;
     * }
     */
    public static int AV_CODEC_ID_SIMBIOSIS_IMX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SGA_VIDEO = 256;
     * }
     */
    public static int AV_CODEC_ID_SGA_VIDEO() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_GEM = 257;
     * }
     */
    public static int AV_CODEC_ID_GEM() {
        return (int)257L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VBN = 258;
     * }
     */
    public static int AV_CODEC_ID_VBN() {
        return (int)258L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_JPEGXL = 259;
     * }
     */
    public static int AV_CODEC_ID_JPEGXL() {
        return (int)259L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_QOI = 260;
     * }
     */
    public static int AV_CODEC_ID_QOI() {
        return (int)260L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PHM = 261;
     * }
     */
    public static int AV_CODEC_ID_PHM() {
        return (int)261L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FIRST_AUDIO = 65536;
     * }
     */
    public static int AV_CODEC_ID_FIRST_AUDIO() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S16LE = 65536;
     * }
     */
    public static int AV_CODEC_ID_PCM_S16LE() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S16BE = 65537;
     * }
     */
    public static int AV_CODEC_ID_PCM_S16BE() {
        return (int)65537L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_U16LE = 65538;
     * }
     */
    public static int AV_CODEC_ID_PCM_U16LE() {
        return (int)65538L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_U16BE = 65539;
     * }
     */
    public static int AV_CODEC_ID_PCM_U16BE() {
        return (int)65539L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S8 = 65540;
     * }
     */
    public static int AV_CODEC_ID_PCM_S8() {
        return (int)65540L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_U8 = 65541;
     * }
     */
    public static int AV_CODEC_ID_PCM_U8() {
        return (int)65541L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_MULAW = 65542;
     * }
     */
    public static int AV_CODEC_ID_PCM_MULAW() {
        return (int)65542L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_ALAW = 65543;
     * }
     */
    public static int AV_CODEC_ID_PCM_ALAW() {
        return (int)65543L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S32LE = 65544;
     * }
     */
    public static int AV_CODEC_ID_PCM_S32LE() {
        return (int)65544L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S32BE = 65545;
     * }
     */
    public static int AV_CODEC_ID_PCM_S32BE() {
        return (int)65545L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_U32LE = 65546;
     * }
     */
    public static int AV_CODEC_ID_PCM_U32LE() {
        return (int)65546L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_U32BE = 65547;
     * }
     */
    public static int AV_CODEC_ID_PCM_U32BE() {
        return (int)65547L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S24LE = 65548;
     * }
     */
    public static int AV_CODEC_ID_PCM_S24LE() {
        return (int)65548L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S24BE = 65549;
     * }
     */
    public static int AV_CODEC_ID_PCM_S24BE() {
        return (int)65549L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_U24LE = 65550;
     * }
     */
    public static int AV_CODEC_ID_PCM_U24LE() {
        return (int)65550L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_U24BE = 65551;
     * }
     */
    public static int AV_CODEC_ID_PCM_U24BE() {
        return (int)65551L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S24DAUD = 65552;
     * }
     */
    public static int AV_CODEC_ID_PCM_S24DAUD() {
        return (int)65552L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_ZORK = 65553;
     * }
     */
    public static int AV_CODEC_ID_PCM_ZORK() {
        return (int)65553L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S16LE_PLANAR = 65554;
     * }
     */
    public static int AV_CODEC_ID_PCM_S16LE_PLANAR() {
        return (int)65554L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_DVD = 65555;
     * }
     */
    public static int AV_CODEC_ID_PCM_DVD() {
        return (int)65555L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_F32BE = 65556;
     * }
     */
    public static int AV_CODEC_ID_PCM_F32BE() {
        return (int)65556L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_F32LE = 65557;
     * }
     */
    public static int AV_CODEC_ID_PCM_F32LE() {
        return (int)65557L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_F64BE = 65558;
     * }
     */
    public static int AV_CODEC_ID_PCM_F64BE() {
        return (int)65558L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_F64LE = 65559;
     * }
     */
    public static int AV_CODEC_ID_PCM_F64LE() {
        return (int)65559L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_BLURAY = 65560;
     * }
     */
    public static int AV_CODEC_ID_PCM_BLURAY() {
        return (int)65560L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_LXF = 65561;
     * }
     */
    public static int AV_CODEC_ID_PCM_LXF() {
        return (int)65561L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_S302M = 65562;
     * }
     */
    public static int AV_CODEC_ID_S302M() {
        return (int)65562L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S8_PLANAR = 65563;
     * }
     */
    public static int AV_CODEC_ID_PCM_S8_PLANAR() {
        return (int)65563L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S24LE_PLANAR = 65564;
     * }
     */
    public static int AV_CODEC_ID_PCM_S24LE_PLANAR() {
        return (int)65564L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S32LE_PLANAR = 65565;
     * }
     */
    public static int AV_CODEC_ID_PCM_S32LE_PLANAR() {
        return (int)65565L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S16BE_PLANAR = 65566;
     * }
     */
    public static int AV_CODEC_ID_PCM_S16BE_PLANAR() {
        return (int)65566L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S64LE = 65567;
     * }
     */
    public static int AV_CODEC_ID_PCM_S64LE() {
        return (int)65567L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_S64BE = 65568;
     * }
     */
    public static int AV_CODEC_ID_PCM_S64BE() {
        return (int)65568L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_F16LE = 65569;
     * }
     */
    public static int AV_CODEC_ID_PCM_F16LE() {
        return (int)65569L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_F24LE = 65570;
     * }
     */
    public static int AV_CODEC_ID_PCM_F24LE() {
        return (int)65570L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_VIDC = 65571;
     * }
     */
    public static int AV_CODEC_ID_PCM_VIDC() {
        return (int)65571L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PCM_SGA = 65572;
     * }
     */
    public static int AV_CODEC_ID_PCM_SGA() {
        return (int)65572L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_QT = 69632;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_QT() {
        return (int)69632L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV = 69633;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_WAV() {
        return (int)69633L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_DK3 = 69634;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_DK3() {
        return (int)69634L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_DK4 = 69635;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_DK4() {
        return (int)69635L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_WS = 69636;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_WS() {
        return (int)69636L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_SMJPEG = 69637;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_SMJPEG() {
        return (int)69637L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_MS = 69638;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_MS() {
        return (int)69638L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_4XM = 69639;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_4XM() {
        return (int)69639L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_XA = 69640;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_XA() {
        return (int)69640L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_ADX = 69641;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_ADX() {
        return (int)69641L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_EA = 69642;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_EA() {
        return (int)69642L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_G726 = 69643;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_G726() {
        return (int)69643L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_CT = 69644;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_CT() {
        return (int)69644L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_SWF = 69645;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_SWF() {
        return (int)69645L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_YAMAHA = 69646;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_YAMAHA() {
        return (int)69646L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_SBPRO_4 = 69647;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_SBPRO_4() {
        return (int)69647L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_SBPRO_3 = 69648;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_SBPRO_3() {
        return (int)69648L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_SBPRO_2 = 69649;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_SBPRO_2() {
        return (int)69649L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_THP = 69650;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_THP() {
        return (int)69650L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_AMV = 69651;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_AMV() {
        return (int)69651L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_EA_R1 = 69652;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_EA_R1() {
        return (int)69652L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_EA_R3 = 69653;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_EA_R3() {
        return (int)69653L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_EA_R2 = 69654;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_EA_R2() {
        return (int)69654L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_EA_SEAD = 69655;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_EA_SEAD() {
        return (int)69655L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_EA_EACS = 69656;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_EA_EACS() {
        return (int)69656L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_EA_XAS = 69657;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_EA_XAS() {
        return (int)69657L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_EA_MAXIS_XA = 69658;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_EA_MAXIS_XA() {
        return (int)69658L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_ISS = 69659;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_ISS() {
        return (int)69659L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_G722 = 69660;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_G722() {
        return (int)69660L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_APC = 69661;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_APC() {
        return (int)69661L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_VIMA = 69662;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_VIMA() {
        return (int)69662L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_AFC = 69663;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_AFC() {
        return (int)69663L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_OKI = 69664;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_OKI() {
        return (int)69664L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_DTK = 69665;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_DTK() {
        return (int)69665L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_RAD = 69666;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_RAD() {
        return (int)69666L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_G726LE = 69667;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_G726LE() {
        return (int)69667L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_THP_LE = 69668;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_THP_LE() {
        return (int)69668L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_PSX = 69669;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_PSX() {
        return (int)69669L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_AICA = 69670;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_AICA() {
        return (int)69670L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_DAT4 = 69671;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_DAT4() {
        return (int)69671L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_MTAF = 69672;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_MTAF() {
        return (int)69672L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_AGM = 69673;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_AGM() {
        return (int)69673L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_ARGO = 69674;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_ARGO() {
        return (int)69674L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_SSI = 69675;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_SSI() {
        return (int)69675L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_ZORK = 69676;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_ZORK() {
        return (int)69676L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_APM = 69677;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_APM() {
        return (int)69677L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_ALP = 69678;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_ALP() {
        return (int)69678L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_MTF = 69679;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_MTF() {
        return (int)69679L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_CUNNING = 69680;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_CUNNING() {
        return (int)69680L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_MOFLEX = 69681;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_MOFLEX() {
        return (int)69681L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ADPCM_IMA_ACORN = 69682;
     * }
     */
    public static int AV_CODEC_ID_ADPCM_IMA_ACORN() {
        return (int)69682L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AMR_NB = 73728;
     * }
     */
    public static int AV_CODEC_ID_AMR_NB() {
        return (int)73728L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AMR_WB = 73729;
     * }
     */
    public static int AV_CODEC_ID_AMR_WB() {
        return (int)73729L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_RA_144 = 77824;
     * }
     */
    public static int AV_CODEC_ID_RA_144() {
        return (int)77824L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_RA_288 = 77825;
     * }
     */
    public static int AV_CODEC_ID_RA_288() {
        return (int)77825L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ROQ_DPCM = 81920;
     * }
     */
    public static int AV_CODEC_ID_ROQ_DPCM() {
        return (int)81920L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_INTERPLAY_DPCM = 81921;
     * }
     */
    public static int AV_CODEC_ID_INTERPLAY_DPCM() {
        return (int)81921L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_XAN_DPCM = 81922;
     * }
     */
    public static int AV_CODEC_ID_XAN_DPCM() {
        return (int)81922L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SOL_DPCM = 81923;
     * }
     */
    public static int AV_CODEC_ID_SOL_DPCM() {
        return (int)81923L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SDX2_DPCM = 81924;
     * }
     */
    public static int AV_CODEC_ID_SDX2_DPCM() {
        return (int)81924L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_GREMLIN_DPCM = 81925;
     * }
     */
    public static int AV_CODEC_ID_GREMLIN_DPCM() {
        return (int)81925L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DERF_DPCM = 81926;
     * }
     */
    public static int AV_CODEC_ID_DERF_DPCM() {
        return (int)81926L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MP2 = 86016;
     * }
     */
    public static int AV_CODEC_ID_MP2() {
        return (int)86016L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MP3 = 86017;
     * }
     */
    public static int AV_CODEC_ID_MP3() {
        return (int)86017L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AAC = 86018;
     * }
     */
    public static int AV_CODEC_ID_AAC() {
        return (int)86018L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AC3 = 86019;
     * }
     */
    public static int AV_CODEC_ID_AC3() {
        return (int)86019L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DTS = 86020;
     * }
     */
    public static int AV_CODEC_ID_DTS() {
        return (int)86020L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VORBIS = 86021;
     * }
     */
    public static int AV_CODEC_ID_VORBIS() {
        return (int)86021L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DVAUDIO = 86022;
     * }
     */
    public static int AV_CODEC_ID_DVAUDIO() {
        return (int)86022L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WMAV1 = 86023;
     * }
     */
    public static int AV_CODEC_ID_WMAV1() {
        return (int)86023L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WMAV2 = 86024;
     * }
     */
    public static int AV_CODEC_ID_WMAV2() {
        return (int)86024L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MACE3 = 86025;
     * }
     */
    public static int AV_CODEC_ID_MACE3() {
        return (int)86025L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MACE6 = 86026;
     * }
     */
    public static int AV_CODEC_ID_MACE6() {
        return (int)86026L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VMDAUDIO = 86027;
     * }
     */
    public static int AV_CODEC_ID_VMDAUDIO() {
        return (int)86027L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FLAC = 86028;
     * }
     */
    public static int AV_CODEC_ID_FLAC() {
        return (int)86028L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MP3ADU = 86029;
     * }
     */
    public static int AV_CODEC_ID_MP3ADU() {
        return (int)86029L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MP3ON4 = 86030;
     * }
     */
    public static int AV_CODEC_ID_MP3ON4() {
        return (int)86030L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SHORTEN = 86031;
     * }
     */
    public static int AV_CODEC_ID_SHORTEN() {
        return (int)86031L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ALAC = 86032;
     * }
     */
    public static int AV_CODEC_ID_ALAC() {
        return (int)86032L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WESTWOOD_SND1 = 86033;
     * }
     */
    public static int AV_CODEC_ID_WESTWOOD_SND1() {
        return (int)86033L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_GSM = 86034;
     * }
     */
    public static int AV_CODEC_ID_GSM() {
        return (int)86034L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_QDM2 = 86035;
     * }
     */
    public static int AV_CODEC_ID_QDM2() {
        return (int)86035L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_COOK = 86036;
     * }
     */
    public static int AV_CODEC_ID_COOK() {
        return (int)86036L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TRUESPEECH = 86037;
     * }
     */
    public static int AV_CODEC_ID_TRUESPEECH() {
        return (int)86037L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TTA = 86038;
     * }
     */
    public static int AV_CODEC_ID_TTA() {
        return (int)86038L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SMACKAUDIO = 86039;
     * }
     */
    public static int AV_CODEC_ID_SMACKAUDIO() {
        return (int)86039L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_QCELP = 86040;
     * }
     */
    public static int AV_CODEC_ID_QCELP() {
        return (int)86040L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WAVPACK = 86041;
     * }
     */
    public static int AV_CODEC_ID_WAVPACK() {
        return (int)86041L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DSICINAUDIO = 86042;
     * }
     */
    public static int AV_CODEC_ID_DSICINAUDIO() {
        return (int)86042L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_IMC = 86043;
     * }
     */
    public static int AV_CODEC_ID_IMC() {
        return (int)86043L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MUSEPACK7 = 86044;
     * }
     */
    public static int AV_CODEC_ID_MUSEPACK7() {
        return (int)86044L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MLP = 86045;
     * }
     */
    public static int AV_CODEC_ID_MLP() {
        return (int)86045L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_GSM_MS = 86046;
     * }
     */
    public static int AV_CODEC_ID_GSM_MS() {
        return (int)86046L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ATRAC3 = 86047;
     * }
     */
    public static int AV_CODEC_ID_ATRAC3() {
        return (int)86047L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_APE = 86048;
     * }
     */
    public static int AV_CODEC_ID_APE() {
        return (int)86048L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_NELLYMOSER = 86049;
     * }
     */
    public static int AV_CODEC_ID_NELLYMOSER() {
        return (int)86049L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MUSEPACK8 = 86050;
     * }
     */
    public static int AV_CODEC_ID_MUSEPACK8() {
        return (int)86050L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SPEEX = 86051;
     * }
     */
    public static int AV_CODEC_ID_SPEEX() {
        return (int)86051L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WMAVOICE = 86052;
     * }
     */
    public static int AV_CODEC_ID_WMAVOICE() {
        return (int)86052L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WMAPRO = 86053;
     * }
     */
    public static int AV_CODEC_ID_WMAPRO() {
        return (int)86053L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WMALOSSLESS = 86054;
     * }
     */
    public static int AV_CODEC_ID_WMALOSSLESS() {
        return (int)86054L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ATRAC3P = 86055;
     * }
     */
    public static int AV_CODEC_ID_ATRAC3P() {
        return (int)86055L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_EAC3 = 86056;
     * }
     */
    public static int AV_CODEC_ID_EAC3() {
        return (int)86056L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SIPR = 86057;
     * }
     */
    public static int AV_CODEC_ID_SIPR() {
        return (int)86057L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MP1 = 86058;
     * }
     */
    public static int AV_CODEC_ID_MP1() {
        return (int)86058L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TWINVQ = 86059;
     * }
     */
    public static int AV_CODEC_ID_TWINVQ() {
        return (int)86059L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TRUEHD = 86060;
     * }
     */
    public static int AV_CODEC_ID_TRUEHD() {
        return (int)86060L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MP4ALS = 86061;
     * }
     */
    public static int AV_CODEC_ID_MP4ALS() {
        return (int)86061L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ATRAC1 = 86062;
     * }
     */
    public static int AV_CODEC_ID_ATRAC1() {
        return (int)86062L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_BINKAUDIO_RDFT = 86063;
     * }
     */
    public static int AV_CODEC_ID_BINKAUDIO_RDFT() {
        return (int)86063L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_BINKAUDIO_DCT = 86064;
     * }
     */
    public static int AV_CODEC_ID_BINKAUDIO_DCT() {
        return (int)86064L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_AAC_LATM = 86065;
     * }
     */
    public static int AV_CODEC_ID_AAC_LATM() {
        return (int)86065L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_QDMC = 86066;
     * }
     */
    public static int AV_CODEC_ID_QDMC() {
        return (int)86066L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CELT = 86067;
     * }
     */
    public static int AV_CODEC_ID_CELT() {
        return (int)86067L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_G723_1 = 86068;
     * }
     */
    public static int AV_CODEC_ID_G723_1() {
        return (int)86068L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_G729 = 86069;
     * }
     */
    public static int AV_CODEC_ID_G729() {
        return (int)86069L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_8SVX_EXP = 86070;
     * }
     */
    public static int AV_CODEC_ID_8SVX_EXP() {
        return (int)86070L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_8SVX_FIB = 86071;
     * }
     */
    public static int AV_CODEC_ID_8SVX_FIB() {
        return (int)86071L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_BMV_AUDIO = 86072;
     * }
     */
    public static int AV_CODEC_ID_BMV_AUDIO() {
        return (int)86072L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_RALF = 86073;
     * }
     */
    public static int AV_CODEC_ID_RALF() {
        return (int)86073L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_IAC = 86074;
     * }
     */
    public static int AV_CODEC_ID_IAC() {
        return (int)86074L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ILBC = 86075;
     * }
     */
    public static int AV_CODEC_ID_ILBC() {
        return (int)86075L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_OPUS = 86076;
     * }
     */
    public static int AV_CODEC_ID_OPUS() {
        return (int)86076L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_COMFORT_NOISE = 86077;
     * }
     */
    public static int AV_CODEC_ID_COMFORT_NOISE() {
        return (int)86077L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TAK = 86078;
     * }
     */
    public static int AV_CODEC_ID_TAK() {
        return (int)86078L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_METASOUND = 86079;
     * }
     */
    public static int AV_CODEC_ID_METASOUND() {
        return (int)86079L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PAF_AUDIO = 86080;
     * }
     */
    public static int AV_CODEC_ID_PAF_AUDIO() {
        return (int)86080L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ON2AVC = 86081;
     * }
     */
    public static int AV_CODEC_ID_ON2AVC() {
        return (int)86081L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DSS_SP = 86082;
     * }
     */
    public static int AV_CODEC_ID_DSS_SP() {
        return (int)86082L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_CODEC2 = 86083;
     * }
     */
    public static int AV_CODEC_ID_CODEC2() {
        return (int)86083L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FFWAVESYNTH = 86084;
     * }
     */
    public static int AV_CODEC_ID_FFWAVESYNTH() {
        return (int)86084L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SONIC = 86085;
     * }
     */
    public static int AV_CODEC_ID_SONIC() {
        return (int)86085L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SONIC_LS = 86086;
     * }
     */
    public static int AV_CODEC_ID_SONIC_LS() {
        return (int)86086L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_EVRC = 86087;
     * }
     */
    public static int AV_CODEC_ID_EVRC() {
        return (int)86087L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SMV = 86088;
     * }
     */
    public static int AV_CODEC_ID_SMV() {
        return (int)86088L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DSD_LSBF = 86089;
     * }
     */
    public static int AV_CODEC_ID_DSD_LSBF() {
        return (int)86089L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DSD_MSBF = 86090;
     * }
     */
    public static int AV_CODEC_ID_DSD_MSBF() {
        return (int)86090L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DSD_LSBF_PLANAR = 86091;
     * }
     */
    public static int AV_CODEC_ID_DSD_LSBF_PLANAR() {
        return (int)86091L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DSD_MSBF_PLANAR = 86092;
     * }
     */
    public static int AV_CODEC_ID_DSD_MSBF_PLANAR() {
        return (int)86092L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_4GV = 86093;
     * }
     */
    public static int AV_CODEC_ID_4GV() {
        return (int)86093L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_INTERPLAY_ACM = 86094;
     * }
     */
    public static int AV_CODEC_ID_INTERPLAY_ACM() {
        return (int)86094L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_XMA1 = 86095;
     * }
     */
    public static int AV_CODEC_ID_XMA1() {
        return (int)86095L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_XMA2 = 86096;
     * }
     */
    public static int AV_CODEC_ID_XMA2() {
        return (int)86096L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DST = 86097;
     * }
     */
    public static int AV_CODEC_ID_DST() {
        return (int)86097L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ATRAC3AL = 86098;
     * }
     */
    public static int AV_CODEC_ID_ATRAC3AL() {
        return (int)86098L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ATRAC3PAL = 86099;
     * }
     */
    public static int AV_CODEC_ID_ATRAC3PAL() {
        return (int)86099L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DOLBY_E = 86100;
     * }
     */
    public static int AV_CODEC_ID_DOLBY_E() {
        return (int)86100L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_APTX = 86101;
     * }
     */
    public static int AV_CODEC_ID_APTX() {
        return (int)86101L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_APTX_HD = 86102;
     * }
     */
    public static int AV_CODEC_ID_APTX_HD() {
        return (int)86102L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SBC = 86103;
     * }
     */
    public static int AV_CODEC_ID_SBC() {
        return (int)86103L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ATRAC9 = 86104;
     * }
     */
    public static int AV_CODEC_ID_ATRAC9() {
        return (int)86104L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_HCOM = 86105;
     * }
     */
    public static int AV_CODEC_ID_HCOM() {
        return (int)86105L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ACELP_KELVIN = 86106;
     * }
     */
    public static int AV_CODEC_ID_ACELP_KELVIN() {
        return (int)86106L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MPEGH_3D_AUDIO = 86107;
     * }
     */
    public static int AV_CODEC_ID_MPEGH_3D_AUDIO() {
        return (int)86107L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SIREN = 86108;
     * }
     */
    public static int AV_CODEC_ID_SIREN() {
        return (int)86108L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_HCA = 86109;
     * }
     */
    public static int AV_CODEC_ID_HCA() {
        return (int)86109L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FASTAUDIO = 86110;
     * }
     */
    public static int AV_CODEC_ID_FASTAUDIO() {
        return (int)86110L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MSNSIREN = 86111;
     * }
     */
    public static int AV_CODEC_ID_MSNSIREN() {
        return (int)86111L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DFPWM = 86112;
     * }
     */
    public static int AV_CODEC_ID_DFPWM() {
        return (int)86112L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FIRST_SUBTITLE = 94208;
     * }
     */
    public static int AV_CODEC_ID_FIRST_SUBTITLE() {
        return (int)94208L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DVD_SUBTITLE = 94208;
     * }
     */
    public static int AV_CODEC_ID_DVD_SUBTITLE() {
        return (int)94208L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DVB_SUBTITLE = 94209;
     * }
     */
    public static int AV_CODEC_ID_DVB_SUBTITLE() {
        return (int)94209L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TEXT = 94210;
     * }
     */
    public static int AV_CODEC_ID_TEXT() {
        return (int)94210L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_XSUB = 94211;
     * }
     */
    public static int AV_CODEC_ID_XSUB() {
        return (int)94211L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SSA = 94212;
     * }
     */
    public static int AV_CODEC_ID_SSA() {
        return (int)94212L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MOV_TEXT = 94213;
     * }
     */
    public static int AV_CODEC_ID_MOV_TEXT() {
        return (int)94213L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_HDMV_PGS_SUBTITLE = 94214;
     * }
     */
    public static int AV_CODEC_ID_HDMV_PGS_SUBTITLE() {
        return (int)94214L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DVB_TELETEXT = 94215;
     * }
     */
    public static int AV_CODEC_ID_DVB_TELETEXT() {
        return (int)94215L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SRT = 94216;
     * }
     */
    public static int AV_CODEC_ID_SRT() {
        return (int)94216L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MICRODVD = 94217;
     * }
     */
    public static int AV_CODEC_ID_MICRODVD() {
        return (int)94217L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_EIA_608 = 94218;
     * }
     */
    public static int AV_CODEC_ID_EIA_608() {
        return (int)94218L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_JACOSUB = 94219;
     * }
     */
    public static int AV_CODEC_ID_JACOSUB() {
        return (int)94219L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SAMI = 94220;
     * }
     */
    public static int AV_CODEC_ID_SAMI() {
        return (int)94220L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_REALTEXT = 94221;
     * }
     */
    public static int AV_CODEC_ID_REALTEXT() {
        return (int)94221L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_STL = 94222;
     * }
     */
    public static int AV_CODEC_ID_STL() {
        return (int)94222L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SUBVIEWER1 = 94223;
     * }
     */
    public static int AV_CODEC_ID_SUBVIEWER1() {
        return (int)94223L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SUBVIEWER = 94224;
     * }
     */
    public static int AV_CODEC_ID_SUBVIEWER() {
        return (int)94224L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SUBRIP = 94225;
     * }
     */
    public static int AV_CODEC_ID_SUBRIP() {
        return (int)94225L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WEBVTT = 94226;
     * }
     */
    public static int AV_CODEC_ID_WEBVTT() {
        return (int)94226L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MPL2 = 94227;
     * }
     */
    public static int AV_CODEC_ID_MPL2() {
        return (int)94227L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_VPLAYER = 94228;
     * }
     */
    public static int AV_CODEC_ID_VPLAYER() {
        return (int)94228L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PJS = 94229;
     * }
     */
    public static int AV_CODEC_ID_PJS() {
        return (int)94229L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ASS = 94230;
     * }
     */
    public static int AV_CODEC_ID_ASS() {
        return (int)94230L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_HDMV_TEXT_SUBTITLE = 94231;
     * }
     */
    public static int AV_CODEC_ID_HDMV_TEXT_SUBTITLE() {
        return (int)94231L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TTML = 94232;
     * }
     */
    public static int AV_CODEC_ID_TTML() {
        return (int)94232L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_ARIB_CAPTION = 94233;
     * }
     */
    public static int AV_CODEC_ID_ARIB_CAPTION() {
        return (int)94233L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FIRST_UNKNOWN = 98304;
     * }
     */
    public static int AV_CODEC_ID_FIRST_UNKNOWN() {
        return (int)98304L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TTF = 98304;
     * }
     */
    public static int AV_CODEC_ID_TTF() {
        return (int)98304L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SCTE_35 = 98305;
     * }
     */
    public static int AV_CODEC_ID_SCTE_35() {
        return (int)98305L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_EPG = 98306;
     * }
     */
    public static int AV_CODEC_ID_EPG() {
        return (int)98306L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_BINTEXT = 98307;
     * }
     */
    public static int AV_CODEC_ID_BINTEXT() {
        return (int)98307L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_XBIN = 98308;
     * }
     */
    public static int AV_CODEC_ID_XBIN() {
        return (int)98308L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_IDF = 98309;
     * }
     */
    public static int AV_CODEC_ID_IDF() {
        return (int)98309L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_OTF = 98310;
     * }
     */
    public static int AV_CODEC_ID_OTF() {
        return (int)98310L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_SMPTE_KLV = 98311;
     * }
     */
    public static int AV_CODEC_ID_SMPTE_KLV() {
        return (int)98311L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_DVD_NAV = 98312;
     * }
     */
    public static int AV_CODEC_ID_DVD_NAV() {
        return (int)98312L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_TIMED_ID3 = 98313;
     * }
     */
    public static int AV_CODEC_ID_TIMED_ID3() {
        return (int)98313L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_BIN_DATA = 98314;
     * }
     */
    public static int AV_CODEC_ID_BIN_DATA() {
        return (int)98314L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_PROBE = 102400;
     * }
     */
    public static int AV_CODEC_ID_PROBE() {
        return (int)102400L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MPEG2TS = 131072;
     * }
     */
    public static int AV_CODEC_ID_MPEG2TS() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_MPEG4SYSTEMS = 131073;
     * }
     */
    public static int AV_CODEC_ID_MPEG4SYSTEMS() {
        return (int)131073L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_FFMETADATA = 135168;
     * }
     */
    public static int AV_CODEC_ID_FFMETADATA() {
        return (int)135168L;
    }
    /**
     * {@snippet :
     * enum AVCodecID.AV_CODEC_ID_WRAPPED_AVFRAME = 135169;
     * }
     */
    public static int AV_CODEC_ID_WRAPPED_AVFRAME() {
        return (int)135169L;
    }
    public static MethodHandle avcodec_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$4,"avcodec_get_type");
    }
    /**
     * {@snippet :
     * enum AVMediaType avcodec_get_type(enum AVCodecID codec_id);
     * }
     */
    public static int avcodec_get_type(int codec_id) {
        var mh$ = avcodec_get_type$MH();
        try {
            return (int)mh$.invokeExact(codec_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$5,"avcodec_get_name");
    }
    /**
     * {@snippet :
     * char* avcodec_get_name(enum AVCodecID id);
     * }
     */
    public static MemorySegment avcodec_get_name(int id) {
        var mh$ = avcodec_get_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_bits_per_sample$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$0,"av_get_bits_per_sample");
    }
    /**
     * {@snippet :
     * int av_get_bits_per_sample(enum AVCodecID codec_id);
     * }
     */
    public static int av_get_bits_per_sample(int codec_id) {
        var mh$ = av_get_bits_per_sample$MH();
        try {
            return (int)mh$.invokeExact(codec_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_exact_bits_per_sample$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$1,"av_get_exact_bits_per_sample");
    }
    /**
     * {@snippet :
     * int av_get_exact_bits_per_sample(enum AVCodecID codec_id);
     * }
     */
    public static int av_get_exact_bits_per_sample(int codec_id) {
        var mh$ = av_get_exact_bits_per_sample$MH();
        try {
            return (int)mh$.invokeExact(codec_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_profile_name$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$3,"avcodec_profile_name");
    }
    /**
     * {@snippet :
     * char* avcodec_profile_name(enum AVCodecID codec_id, int profile);
     * }
     */
    public static MemorySegment avcodec_profile_name(int codec_id, int profile) {
        var mh$ = avcodec_profile_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(codec_id, profile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_pcm_codec$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$4,"av_get_pcm_codec");
    }
    /**
     * {@snippet :
     * enum AVCodecID av_get_pcm_codec(enum AVSampleFormat fmt, int be);
     * }
     */
    public static int av_get_pcm_codec(int fmt, int be) {
        var mh$ = av_get_pcm_codec$MH();
        try {
            return (int)mh$.invokeExact(fmt, be);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_codec_iterate$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$0,"av_codec_iterate");
    }
    /**
     * {@snippet :
     * const AVCodec* av_codec_iterate(void** opaque);
     * }
     */
    public static MemorySegment av_codec_iterate(MemorySegment opaque) {
        var mh$ = av_codec_iterate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_find_decoder$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$1,"avcodec_find_decoder");
    }
    /**
     * {@snippet :
     * const AVCodec* avcodec_find_decoder(enum AVCodecID id);
     * }
     */
    public static MemorySegment avcodec_find_decoder(int id) {
        var mh$ = avcodec_find_decoder$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_find_decoder_by_name$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$2,"avcodec_find_decoder_by_name");
    }
    /**
     * {@snippet :
     * const AVCodec* avcodec_find_decoder_by_name(char* name);
     * }
     */
    public static MemorySegment avcodec_find_decoder_by_name(MemorySegment name) {
        var mh$ = avcodec_find_decoder_by_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_find_encoder$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$3,"avcodec_find_encoder");
    }
    /**
     * {@snippet :
     * const AVCodec* avcodec_find_encoder(enum AVCodecID id);
     * }
     */
    public static MemorySegment avcodec_find_encoder(int id) {
        var mh$ = avcodec_find_encoder$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_find_encoder_by_name$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$4,"avcodec_find_encoder_by_name");
    }
    /**
     * {@snippet :
     * const AVCodec* avcodec_find_encoder_by_name(char* name);
     * }
     */
    public static MemorySegment avcodec_find_encoder_by_name(MemorySegment name) {
        var mh$ = avcodec_find_encoder_by_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_codec_is_encoder$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$5,"av_codec_is_encoder");
    }
    /**
     * {@snippet :
     * int av_codec_is_encoder(const AVCodec* codec);
     * }
     */
    public static int av_codec_is_encoder(MemorySegment codec) {
        var mh$ = av_codec_is_encoder$MH();
        try {
            return (int)mh$.invokeExact(codec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_codec_is_decoder$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$0,"av_codec_is_decoder");
    }
    /**
     * {@snippet :
     * int av_codec_is_decoder(const AVCodec* codec);
     * }
     */
    public static int av_codec_is_decoder(MemorySegment codec) {
        var mh$ = av_codec_is_decoder$MH();
        try {
            return (int)mh$.invokeExact(codec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_profile_name$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$1,"av_get_profile_name");
    }
    /**
     * {@snippet :
     * char* av_get_profile_name(const AVCodec* codec, int profile);
     * }
     */
    public static MemorySegment av_get_profile_name(MemorySegment codec, int profile) {
        var mh$ = av_get_profile_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(codec, profile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX = 1;
     * }
     */
    public static int AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .AV_CODEC_HW_CONFIG_METHOD_HW_FRAMES_CTX = 2;
     * }
     */
    public static int AV_CODEC_HW_CONFIG_METHOD_HW_FRAMES_CTX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .AV_CODEC_HW_CONFIG_METHOD_INTERNAL = 4;
     * }
     */
    public static int AV_CODEC_HW_CONFIG_METHOD_INTERNAL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum .AV_CODEC_HW_CONFIG_METHOD_AD_HOC = 8;
     * }
     */
    public static int AV_CODEC_HW_CONFIG_METHOD_AD_HOC() {
        return (int)8L;
    }
    public static MethodHandle avcodec_get_hw_config$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$0,"avcodec_get_hw_config");
    }
    /**
     * {@snippet :
     * const AVCodecHWConfig* avcodec_get_hw_config(const AVCodec* codec, int index);
     * }
     */
    public static MemorySegment avcodec_get_hw_config(MemorySegment codec, int index) {
        var mh$ = avcodec_get_hw_config$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(codec, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_descriptor_get$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$3,"avcodec_descriptor_get");
    }
    /**
     * {@snippet :
     * const AVCodecDescriptor* avcodec_descriptor_get(enum AVCodecID id);
     * }
     */
    public static MemorySegment avcodec_descriptor_get(int id) {
        var mh$ = avcodec_descriptor_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_descriptor_next$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$4,"avcodec_descriptor_next");
    }
    /**
     * {@snippet :
     * const AVCodecDescriptor* avcodec_descriptor_next(const AVCodecDescriptor* prev);
     * }
     */
    public static MemorySegment avcodec_descriptor_next(MemorySegment prev) {
        var mh$ = avcodec_descriptor_next$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(prev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_descriptor_get_by_name$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$5,"avcodec_descriptor_get_by_name");
    }
    /**
     * {@snippet :
     * const AVCodecDescriptor* avcodec_descriptor_get_by_name(char* name);
     * }
     */
    public static MemorySegment avcodec_descriptor_get_by_name(MemorySegment name) {
        var mh$ = avcodec_descriptor_get_by_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVFieldOrder.AV_FIELD_UNKNOWN = 0;
     * }
     */
    public static int AV_FIELD_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVFieldOrder.AV_FIELD_PROGRESSIVE = 1;
     * }
     */
    public static int AV_FIELD_PROGRESSIVE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVFieldOrder.AV_FIELD_TT = 2;
     * }
     */
    public static int AV_FIELD_TT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVFieldOrder.AV_FIELD_BB = 3;
     * }
     */
    public static int AV_FIELD_BB() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVFieldOrder.AV_FIELD_TB = 4;
     * }
     */
    public static int AV_FIELD_TB() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVFieldOrder.AV_FIELD_BT = 5;
     * }
     */
    public static int AV_FIELD_BT() {
        return (int)5L;
    }
    public static MethodHandle avcodec_parameters_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$196.const$5,"avcodec_parameters_alloc");
    }
    /**
     * {@snippet :
     * AVCodecParameters* avcodec_parameters_alloc();
     * }
     */
    public static MemorySegment avcodec_parameters_alloc() {
        var mh$ = avcodec_parameters_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_parameters_free$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$0,"avcodec_parameters_free");
    }
    /**
     * {@snippet :
     * void avcodec_parameters_free(AVCodecParameters** par);
     * }
     */
    public static void avcodec_parameters_free(MemorySegment par) {
        var mh$ = avcodec_parameters_free$MH();
        try {
            mh$.invokeExact(par);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_parameters_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$1,"avcodec_parameters_copy");
    }
    /**
     * {@snippet :
     * int avcodec_parameters_copy(AVCodecParameters* dst, const AVCodecParameters* src);
     * }
     */
    public static int avcodec_parameters_copy(MemorySegment dst, MemorySegment src) {
        var mh$ = avcodec_parameters_copy$MH();
        try {
            return (int)mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_audio_frame_duration2$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$2,"av_get_audio_frame_duration2");
    }
    /**
     * {@snippet :
     * int av_get_audio_frame_duration2(AVCodecParameters* par, int frame_bytes);
     * }
     */
    public static int av_get_audio_frame_duration2(MemorySegment par, int frame_bytes) {
        var mh$ = av_get_audio_frame_duration2$MH();
        try {
            return (int)mh$.invokeExact(par, frame_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVDiscard.AVDISCARD_NONE = -16;
     * }
     */
    public static int AVDISCARD_NONE() {
        return (int)-16L;
    }
    /**
     * {@snippet :
     * enum AVDiscard.AVDISCARD_DEFAULT = 0;
     * }
     */
    public static int AVDISCARD_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVDiscard.AVDISCARD_NONREF = 8;
     * }
     */
    public static int AVDISCARD_NONREF() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVDiscard.AVDISCARD_BIDIR = 16;
     * }
     */
    public static int AVDISCARD_BIDIR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum AVDiscard.AVDISCARD_NONINTRA = 24;
     * }
     */
    public static int AVDISCARD_NONINTRA() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum AVDiscard.AVDISCARD_NONKEY = 32;
     * }
     */
    public static int AVDISCARD_NONKEY() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum AVDiscard.AVDISCARD_ALL = 48;
     * }
     */
    public static int AVDISCARD_ALL() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * enum AVAudioServiceType.AV_AUDIO_SERVICE_TYPE_MAIN = 0;
     * }
     */
    public static int AV_AUDIO_SERVICE_TYPE_MAIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVAudioServiceType.AV_AUDIO_SERVICE_TYPE_EFFECTS = 1;
     * }
     */
    public static int AV_AUDIO_SERVICE_TYPE_EFFECTS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVAudioServiceType.AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED = 2;
     * }
     */
    public static int AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVAudioServiceType.AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED = 3;
     * }
     */
    public static int AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVAudioServiceType.AV_AUDIO_SERVICE_TYPE_DIALOGUE = 4;
     * }
     */
    public static int AV_AUDIO_SERVICE_TYPE_DIALOGUE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVAudioServiceType.AV_AUDIO_SERVICE_TYPE_COMMENTARY = 5;
     * }
     */
    public static int AV_AUDIO_SERVICE_TYPE_COMMENTARY() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVAudioServiceType.AV_AUDIO_SERVICE_TYPE_EMERGENCY = 6;
     * }
     */
    public static int AV_AUDIO_SERVICE_TYPE_EMERGENCY() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVAudioServiceType.AV_AUDIO_SERVICE_TYPE_VOICE_OVER = 7;
     * }
     */
    public static int AV_AUDIO_SERVICE_TYPE_VOICE_OVER() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum AVAudioServiceType.AV_AUDIO_SERVICE_TYPE_KARAOKE = 8;
     * }
     */
    public static int AV_AUDIO_SERVICE_TYPE_KARAOKE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVAudioServiceType.AV_AUDIO_SERVICE_TYPE_NB = 9;
     * }
     */
    public static int AV_AUDIO_SERVICE_TYPE_NB() {
        return (int)9L;
    }
    public static MethodHandle av_cpb_properties_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$1,"av_cpb_properties_alloc");
    }
    /**
     * {@snippet :
     * AVCPBProperties* av_cpb_properties_alloc(size_t* size);
     * }
     */
    public static MemorySegment av_cpb_properties_alloc(MemorySegment size) {
        var mh$ = av_cpb_properties_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_xiphlacing$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$5,"av_xiphlacing");
    }
    /**
     * {@snippet :
     * unsigned int av_xiphlacing(unsigned char* s, unsigned int v);
     * }
     */
    public static int av_xiphlacing(MemorySegment s, int v) {
        var mh$ = av_xiphlacing$MH();
        try {
            return (int)mh$.invokeExact(s, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_PALETTE = 0;
     * }
     */
    public static int AV_PKT_DATA_PALETTE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA = 1;
     * }
     */
    public static int AV_PKT_DATA_NEW_EXTRADATA() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_PARAM_CHANGE = 2;
     * }
     */
    public static int AV_PKT_DATA_PARAM_CHANGE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_H263_MB_INFO = 3;
     * }
     */
    public static int AV_PKT_DATA_H263_MB_INFO() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_REPLAYGAIN = 4;
     * }
     */
    public static int AV_PKT_DATA_REPLAYGAIN() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_DISPLAYMATRIX = 5;
     * }
     */
    public static int AV_PKT_DATA_DISPLAYMATRIX() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_STEREO3D = 6;
     * }
     */
    public static int AV_PKT_DATA_STEREO3D() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_AUDIO_SERVICE_TYPE = 7;
     * }
     */
    public static int AV_PKT_DATA_AUDIO_SERVICE_TYPE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_QUALITY_STATS = 8;
     * }
     */
    public static int AV_PKT_DATA_QUALITY_STATS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_FALLBACK_TRACK = 9;
     * }
     */
    public static int AV_PKT_DATA_FALLBACK_TRACK() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_CPB_PROPERTIES = 10;
     * }
     */
    public static int AV_PKT_DATA_CPB_PROPERTIES() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_SKIP_SAMPLES = 11;
     * }
     */
    public static int AV_PKT_DATA_SKIP_SAMPLES() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_JP_DUALMONO = 12;
     * }
     */
    public static int AV_PKT_DATA_JP_DUALMONO() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_STRINGS_METADATA = 13;
     * }
     */
    public static int AV_PKT_DATA_STRINGS_METADATA() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_SUBTITLE_POSITION = 14;
     * }
     */
    public static int AV_PKT_DATA_SUBTITLE_POSITION() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL = 15;
     * }
     */
    public static int AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_WEBVTT_IDENTIFIER = 16;
     * }
     */
    public static int AV_PKT_DATA_WEBVTT_IDENTIFIER() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_WEBVTT_SETTINGS = 17;
     * }
     */
    public static int AV_PKT_DATA_WEBVTT_SETTINGS() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_METADATA_UPDATE = 18;
     * }
     */
    public static int AV_PKT_DATA_METADATA_UPDATE() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_MPEGTS_STREAM_ID = 19;
     * }
     */
    public static int AV_PKT_DATA_MPEGTS_STREAM_ID() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_MASTERING_DISPLAY_METADATA = 20;
     * }
     */
    public static int AV_PKT_DATA_MASTERING_DISPLAY_METADATA() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_SPHERICAL = 21;
     * }
     */
    public static int AV_PKT_DATA_SPHERICAL() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_CONTENT_LIGHT_LEVEL = 22;
     * }
     */
    public static int AV_PKT_DATA_CONTENT_LIGHT_LEVEL() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_A53_CC = 23;
     * }
     */
    public static int AV_PKT_DATA_A53_CC() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_ENCRYPTION_INIT_INFO = 24;
     * }
     */
    public static int AV_PKT_DATA_ENCRYPTION_INIT_INFO() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_ENCRYPTION_INFO = 25;
     * }
     */
    public static int AV_PKT_DATA_ENCRYPTION_INFO() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_AFD = 26;
     * }
     */
    public static int AV_PKT_DATA_AFD() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_PRFT = 27;
     * }
     */
    public static int AV_PKT_DATA_PRFT() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_ICC_PROFILE = 28;
     * }
     */
    public static int AV_PKT_DATA_ICC_PROFILE() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_DOVI_CONF = 29;
     * }
     */
    public static int AV_PKT_DATA_DOVI_CONF() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_S12M_TIMECODE = 30;
     * }
     */
    public static int AV_PKT_DATA_S12M_TIMECODE() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_DYNAMIC_HDR10_PLUS = 31;
     * }
     */
    public static int AV_PKT_DATA_DYNAMIC_HDR10_PLUS() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum AVPacketSideDataType.AV_PKT_DATA_NB = 32;
     * }
     */
    public static int AV_PKT_DATA_NB() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum AVSideDataParamChangeFlags.AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT = 1;
     * }
     */
    public static int AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVSideDataParamChangeFlags.AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT = 2;
     * }
     */
    public static int AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVSideDataParamChangeFlags.AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE = 4;
     * }
     */
    public static int AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVSideDataParamChangeFlags.AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS = 8;
     * }
     */
    public static int AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS() {
        return (int)8L;
    }
    public static MethodHandle av_packet_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$2,"av_packet_alloc");
    }
    /**
     * {@snippet :
     * AVPacket* av_packet_alloc();
     * }
     */
    public static MemorySegment av_packet_alloc() {
        var mh$ = av_packet_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_clone$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$3,"av_packet_clone");
    }
    /**
     * {@snippet :
     * AVPacket* av_packet_clone(const AVPacket* src);
     * }
     */
    public static MemorySegment av_packet_clone(MemorySegment src) {
        var mh$ = av_packet_clone$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_free$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$4,"av_packet_free");
    }
    /**
     * {@snippet :
     * void av_packet_free(AVPacket** pkt);
     * }
     */
    public static void av_packet_free(MemorySegment pkt) {
        var mh$ = av_packet_free$MH();
        try {
            mh$.invokeExact(pkt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_init_packet$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$5,"av_init_packet");
    }
    /**
     * {@snippet :
     * void av_init_packet(AVPacket* pkt);
     * }
     */
    public static void av_init_packet(MemorySegment pkt) {
        var mh$ = av_init_packet$MH();
        try {
            mh$.invokeExact(pkt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_new_packet$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$0,"av_new_packet");
    }
    /**
     * {@snippet :
     * int av_new_packet(AVPacket* pkt, int size);
     * }
     */
    public static int av_new_packet(MemorySegment pkt, int size) {
        var mh$ = av_new_packet$MH();
        try {
            return (int)mh$.invokeExact(pkt, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_shrink_packet$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$1,"av_shrink_packet");
    }
    /**
     * {@snippet :
     * void av_shrink_packet(AVPacket* pkt, int size);
     * }
     */
    public static void av_shrink_packet(MemorySegment pkt, int size) {
        var mh$ = av_shrink_packet$MH();
        try {
            mh$.invokeExact(pkt, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_grow_packet$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$2,"av_grow_packet");
    }
    /**
     * {@snippet :
     * int av_grow_packet(AVPacket* pkt, int grow_by);
     * }
     */
    public static int av_grow_packet(MemorySegment pkt, int grow_by) {
        var mh$ = av_grow_packet$MH();
        try {
            return (int)mh$.invokeExact(pkt, grow_by);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_from_data$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$3,"av_packet_from_data");
    }
    /**
     * {@snippet :
     * int av_packet_from_data(AVPacket* pkt, uint8_t* data, int size);
     * }
     */
    public static int av_packet_from_data(MemorySegment pkt, MemorySegment data, int size) {
        var mh$ = av_packet_from_data$MH();
        try {
            return (int)mh$.invokeExact(pkt, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_new_side_data$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$4,"av_packet_new_side_data");
    }
    /**
     * {@snippet :
     * uint8_t* av_packet_new_side_data(AVPacket* pkt, enum AVPacketSideDataType type, size_t size);
     * }
     */
    public static MemorySegment av_packet_new_side_data(MemorySegment pkt, int type, long size) {
        var mh$ = av_packet_new_side_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pkt, type, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_add_side_data$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$6,"av_packet_add_side_data");
    }
    /**
     * {@snippet :
     * int av_packet_add_side_data(AVPacket* pkt, enum AVPacketSideDataType type, uint8_t* data, size_t size);
     * }
     */
    public static int av_packet_add_side_data(MemorySegment pkt, int type, MemorySegment data, long size) {
        var mh$ = av_packet_add_side_data$MH();
        try {
            return (int)mh$.invokeExact(pkt, type, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_shrink_side_data$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$1,"av_packet_shrink_side_data");
    }
    /**
     * {@snippet :
     * int av_packet_shrink_side_data(AVPacket* pkt, enum AVPacketSideDataType type, size_t size);
     * }
     */
    public static int av_packet_shrink_side_data(MemorySegment pkt, int type, long size) {
        var mh$ = av_packet_shrink_side_data$MH();
        try {
            return (int)mh$.invokeExact(pkt, type, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_get_side_data$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$2,"av_packet_get_side_data");
    }
    /**
     * {@snippet :
     * uint8_t* av_packet_get_side_data(const AVPacket* pkt, enum AVPacketSideDataType type, size_t* size);
     * }
     */
    public static MemorySegment av_packet_get_side_data(MemorySegment pkt, int type, MemorySegment size) {
        var mh$ = av_packet_get_side_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pkt, type, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_side_data_name$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$3,"av_packet_side_data_name");
    }
    /**
     * {@snippet :
     * char* av_packet_side_data_name(enum AVPacketSideDataType type);
     * }
     */
    public static MemorySegment av_packet_side_data_name(int type) {
        var mh$ = av_packet_side_data_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_pack_dictionary$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$4,"av_packet_pack_dictionary");
    }
    /**
     * {@snippet :
     * uint8_t* av_packet_pack_dictionary(AVDictionary* dict, size_t* size);
     * }
     */
    public static MemorySegment av_packet_pack_dictionary(MemorySegment dict, MemorySegment size) {
        var mh$ = av_packet_pack_dictionary$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dict, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_unpack_dictionary$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$5,"av_packet_unpack_dictionary");
    }
    /**
     * {@snippet :
     * int av_packet_unpack_dictionary(const uint8_t* data, size_t size, AVDictionary** dict);
     * }
     */
    public static int av_packet_unpack_dictionary(MemorySegment data, long size, MemorySegment dict) {
        var mh$ = av_packet_unpack_dictionary$MH();
        try {
            return (int)mh$.invokeExact(data, size, dict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_free_side_data$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$0,"av_packet_free_side_data");
    }
    /**
     * {@snippet :
     * void av_packet_free_side_data(AVPacket* pkt);
     * }
     */
    public static void av_packet_free_side_data(MemorySegment pkt) {
        var mh$ = av_packet_free_side_data$MH();
        try {
            mh$.invokeExact(pkt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$1,"av_packet_ref");
    }
    /**
     * {@snippet :
     * int av_packet_ref(AVPacket* dst, const AVPacket* src);
     * }
     */
    public static int av_packet_ref(MemorySegment dst, MemorySegment src) {
        var mh$ = av_packet_ref$MH();
        try {
            return (int)mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$2,"av_packet_unref");
    }
    /**
     * {@snippet :
     * void av_packet_unref(AVPacket* pkt);
     * }
     */
    public static void av_packet_unref(MemorySegment pkt) {
        var mh$ = av_packet_unref$MH();
        try {
            mh$.invokeExact(pkt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_move_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$3,"av_packet_move_ref");
    }
    /**
     * {@snippet :
     * void av_packet_move_ref(AVPacket* dst, AVPacket* src);
     * }
     */
    public static void av_packet_move_ref(MemorySegment dst, MemorySegment src) {
        var mh$ = av_packet_move_ref$MH();
        try {
            mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_copy_props$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$4,"av_packet_copy_props");
    }
    /**
     * {@snippet :
     * int av_packet_copy_props(AVPacket* dst, const AVPacket* src);
     * }
     */
    public static int av_packet_copy_props(MemorySegment dst, MemorySegment src) {
        var mh$ = av_packet_copy_props$MH();
        try {
            return (int)mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_make_refcounted$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$5,"av_packet_make_refcounted");
    }
    /**
     * {@snippet :
     * int av_packet_make_refcounted(AVPacket* pkt);
     * }
     */
    public static int av_packet_make_refcounted(MemorySegment pkt) {
        var mh$ = av_packet_make_refcounted$MH();
        try {
            return (int)mh$.invokeExact(pkt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_make_writable$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$0,"av_packet_make_writable");
    }
    /**
     * {@snippet :
     * int av_packet_make_writable(AVPacket* pkt);
     * }
     */
    public static int av_packet_make_writable(MemorySegment pkt) {
        var mh$ = av_packet_make_writable$MH();
        try {
            return (int)mh$.invokeExact(pkt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_packet_rescale_ts$MH() {
        return RuntimeHelper.requireNonNull(constants$207.const$2,"av_packet_rescale_ts");
    }
    /**
     * {@snippet :
     * void av_packet_rescale_ts(AVPacket* pkt, AVRational tb_src, AVRational tb_dst);
     * }
     */
    public static void av_packet_rescale_ts(MemorySegment pkt, MemorySegment tb_src, MemorySegment tb_dst) {
        var mh$ = av_packet_rescale_ts$MH();
        try {
            mh$.invokeExact(pkt, tb_src, tb_dst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVSubtitleType.SUBTITLE_NONE = 0;
     * }
     */
    public static int SUBTITLE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVSubtitleType.SUBTITLE_BITMAP = 1;
     * }
     */
    public static int SUBTITLE_BITMAP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVSubtitleType.SUBTITLE_TEXT = 2;
     * }
     */
    public static int SUBTITLE_TEXT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVSubtitleType.SUBTITLE_ASS = 3;
     * }
     */
    public static int SUBTITLE_ASS() {
        return (int)3L;
    }
    public static MethodHandle avcodec_version$MH() {
        return RuntimeHelper.requireNonNull(constants$243.const$3,"avcodec_version");
    }
    /**
     * {@snippet :
     * unsigned int avcodec_version();
     * }
     */
    public static int avcodec_version() {
        var mh$ = avcodec_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_configuration$MH() {
        return RuntimeHelper.requireNonNull(constants$243.const$4,"avcodec_configuration");
    }
    /**
     * {@snippet :
     * char* avcodec_configuration();
     * }
     */
    public static MemorySegment avcodec_configuration() {
        var mh$ = avcodec_configuration$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_license$MH() {
        return RuntimeHelper.requireNonNull(constants$243.const$5,"avcodec_license");
    }
    /**
     * {@snippet :
     * char* avcodec_license();
     * }
     */
    public static MemorySegment avcodec_license() {
        var mh$ = avcodec_license$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_alloc_context3$MH() {
        return RuntimeHelper.requireNonNull(constants$244.const$0,"avcodec_alloc_context3");
    }
    /**
     * {@snippet :
     * AVCodecContext* avcodec_alloc_context3(const AVCodec* codec);
     * }
     */
    public static MemorySegment avcodec_alloc_context3(MemorySegment codec) {
        var mh$ = avcodec_alloc_context3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(codec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_free_context$MH() {
        return RuntimeHelper.requireNonNull(constants$244.const$1,"avcodec_free_context");
    }
    /**
     * {@snippet :
     * void avcodec_free_context(AVCodecContext** avctx);
     * }
     */
    public static void avcodec_free_context(MemorySegment avctx) {
        var mh$ = avcodec_free_context$MH();
        try {
            mh$.invokeExact(avctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_get_class$MH() {
        return RuntimeHelper.requireNonNull(constants$244.const$2,"avcodec_get_class");
    }
    /**
     * {@snippet :
     * const AVClass* avcodec_get_class();
     * }
     */
    public static MemorySegment avcodec_get_class() {
        var mh$ = avcodec_get_class$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_get_frame_class$MH() {
        return RuntimeHelper.requireNonNull(constants$244.const$3,"avcodec_get_frame_class");
    }
    /**
     * {@snippet :
     * const AVClass* avcodec_get_frame_class();
     * }
     */
    public static MemorySegment avcodec_get_frame_class() {
        var mh$ = avcodec_get_frame_class$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_get_subtitle_rect_class$MH() {
        return RuntimeHelper.requireNonNull(constants$244.const$4,"avcodec_get_subtitle_rect_class");
    }
    /**
     * {@snippet :
     * const AVClass* avcodec_get_subtitle_rect_class();
     * }
     */
    public static MemorySegment avcodec_get_subtitle_rect_class() {
        var mh$ = avcodec_get_subtitle_rect_class$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_parameters_from_context$MH() {
        return RuntimeHelper.requireNonNull(constants$244.const$5,"avcodec_parameters_from_context");
    }
    /**
     * {@snippet :
     * int avcodec_parameters_from_context(AVCodecParameters* par, const AVCodecContext* codec);
     * }
     */
    public static int avcodec_parameters_from_context(MemorySegment par, MemorySegment codec) {
        var mh$ = avcodec_parameters_from_context$MH();
        try {
            return (int)mh$.invokeExact(par, codec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_parameters_to_context$MH() {
        return RuntimeHelper.requireNonNull(constants$245.const$0,"avcodec_parameters_to_context");
    }
    /**
     * {@snippet :
     * int avcodec_parameters_to_context(AVCodecContext* codec, const AVCodecParameters* par);
     * }
     */
    public static int avcodec_parameters_to_context(MemorySegment codec, MemorySegment par) {
        var mh$ = avcodec_parameters_to_context$MH();
        try {
            return (int)mh$.invokeExact(codec, par);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_open2$MH() {
        return RuntimeHelper.requireNonNull(constants$245.const$1,"avcodec_open2");
    }
    /**
     * {@snippet :
     * int avcodec_open2(AVCodecContext* avctx, const AVCodec* codec, AVDictionary** options);
     * }
     */
    public static int avcodec_open2(MemorySegment avctx, MemorySegment codec, MemorySegment options) {
        var mh$ = avcodec_open2$MH();
        try {
            return (int)mh$.invokeExact(avctx, codec, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_close$MH() {
        return RuntimeHelper.requireNonNull(constants$245.const$2,"avcodec_close");
    }
    /**
     * {@snippet :
     * int avcodec_close(AVCodecContext* avctx);
     * }
     */
    public static int avcodec_close(MemorySegment avctx) {
        var mh$ = avcodec_close$MH();
        try {
            return (int)mh$.invokeExact(avctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avsubtitle_free$MH() {
        return RuntimeHelper.requireNonNull(constants$245.const$3,"avsubtitle_free");
    }
    /**
     * {@snippet :
     * void avsubtitle_free(AVSubtitle* sub);
     * }
     */
    public static void avsubtitle_free(MemorySegment sub) {
        var mh$ = avsubtitle_free$MH();
        try {
            mh$.invokeExact(sub);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_default_get_buffer2$MH() {
        return RuntimeHelper.requireNonNull(constants$245.const$4,"avcodec_default_get_buffer2");
    }
    /**
     * {@snippet :
     * int avcodec_default_get_buffer2(AVCodecContext* s, AVFrame* frame, int flags);
     * }
     */
    public static int avcodec_default_get_buffer2(MemorySegment s, MemorySegment frame, int flags) {
        var mh$ = avcodec_default_get_buffer2$MH();
        try {
            return (int)mh$.invokeExact(s, frame, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_default_get_encode_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$245.const$5,"avcodec_default_get_encode_buffer");
    }
    /**
     * {@snippet :
     * int avcodec_default_get_encode_buffer(AVCodecContext* s, AVPacket* pkt, int flags);
     * }
     */
    public static int avcodec_default_get_encode_buffer(MemorySegment s, MemorySegment pkt, int flags) {
        var mh$ = avcodec_default_get_encode_buffer$MH();
        try {
            return (int)mh$.invokeExact(s, pkt, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_align_dimensions$MH() {
        return RuntimeHelper.requireNonNull(constants$246.const$0,"avcodec_align_dimensions");
    }
    /**
     * {@snippet :
     * void avcodec_align_dimensions(AVCodecContext* s, int* width, int* height);
     * }
     */
    public static void avcodec_align_dimensions(MemorySegment s, MemorySegment width, MemorySegment height) {
        var mh$ = avcodec_align_dimensions$MH();
        try {
            mh$.invokeExact(s, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_align_dimensions2$MH() {
        return RuntimeHelper.requireNonNull(constants$246.const$2,"avcodec_align_dimensions2");
    }
    /**
     * {@snippet :
     * void avcodec_align_dimensions2(AVCodecContext* s, int* width, int* height, int linesize_align[8]);
     * }
     */
    public static void avcodec_align_dimensions2(MemorySegment s, MemorySegment width, MemorySegment height, MemorySegment linesize_align) {
        var mh$ = avcodec_align_dimensions2$MH();
        try {
            mh$.invokeExact(s, width, height, linesize_align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_enum_to_chroma_pos$MH() {
        return RuntimeHelper.requireNonNull(constants$246.const$3,"avcodec_enum_to_chroma_pos");
    }
    /**
     * {@snippet :
     * int avcodec_enum_to_chroma_pos(int* xpos, int* ypos, enum AVChromaLocation pos);
     * }
     */
    public static int avcodec_enum_to_chroma_pos(MemorySegment xpos, MemorySegment ypos, int pos) {
        var mh$ = avcodec_enum_to_chroma_pos$MH();
        try {
            return (int)mh$.invokeExact(xpos, ypos, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_chroma_pos_to_enum$MH() {
        return RuntimeHelper.requireNonNull(constants$246.const$4,"avcodec_chroma_pos_to_enum");
    }
    /**
     * {@snippet :
     * enum AVChromaLocation avcodec_chroma_pos_to_enum(int xpos, int ypos);
     * }
     */
    public static int avcodec_chroma_pos_to_enum(int xpos, int ypos) {
        var mh$ = avcodec_chroma_pos_to_enum$MH();
        try {
            return (int)mh$.invokeExact(xpos, ypos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_decode_subtitle2$MH() {
        return RuntimeHelper.requireNonNull(constants$246.const$6,"avcodec_decode_subtitle2");
    }
    /**
     * {@snippet :
     * int avcodec_decode_subtitle2(AVCodecContext* avctx, AVSubtitle* sub, int* got_sub_ptr, AVPacket* avpkt);
     * }
     */
    public static int avcodec_decode_subtitle2(MemorySegment avctx, MemorySegment sub, MemorySegment got_sub_ptr, MemorySegment avpkt) {
        var mh$ = avcodec_decode_subtitle2$MH();
        try {
            return (int)mh$.invokeExact(avctx, sub, got_sub_ptr, avpkt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_send_packet$MH() {
        return RuntimeHelper.requireNonNull(constants$247.const$0,"avcodec_send_packet");
    }
    /**
     * {@snippet :
     * int avcodec_send_packet(AVCodecContext* avctx, const AVPacket* avpkt);
     * }
     */
    public static int avcodec_send_packet(MemorySegment avctx, MemorySegment avpkt) {
        var mh$ = avcodec_send_packet$MH();
        try {
            return (int)mh$.invokeExact(avctx, avpkt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_receive_frame$MH() {
        return RuntimeHelper.requireNonNull(constants$247.const$1,"avcodec_receive_frame");
    }
    /**
     * {@snippet :
     * int avcodec_receive_frame(AVCodecContext* avctx, AVFrame* frame);
     * }
     */
    public static int avcodec_receive_frame(MemorySegment avctx, MemorySegment frame) {
        var mh$ = avcodec_receive_frame$MH();
        try {
            return (int)mh$.invokeExact(avctx, frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_send_frame$MH() {
        return RuntimeHelper.requireNonNull(constants$247.const$2,"avcodec_send_frame");
    }
    /**
     * {@snippet :
     * int avcodec_send_frame(AVCodecContext* avctx, const AVFrame* frame);
     * }
     */
    public static int avcodec_send_frame(MemorySegment avctx, MemorySegment frame) {
        var mh$ = avcodec_send_frame$MH();
        try {
            return (int)mh$.invokeExact(avctx, frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_receive_packet$MH() {
        return RuntimeHelper.requireNonNull(constants$247.const$3,"avcodec_receive_packet");
    }
    /**
     * {@snippet :
     * int avcodec_receive_packet(AVCodecContext* avctx, AVPacket* avpkt);
     * }
     */
    public static int avcodec_receive_packet(MemorySegment avctx, MemorySegment avpkt) {
        var mh$ = avcodec_receive_packet$MH();
        try {
            return (int)mh$.invokeExact(avctx, avpkt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_get_hw_frames_parameters$MH() {
        return RuntimeHelper.requireNonNull(constants$247.const$5,"avcodec_get_hw_frames_parameters");
    }
    /**
     * {@snippet :
     * int avcodec_get_hw_frames_parameters(AVCodecContext* avctx, AVBufferRef* device_ref, enum AVPixelFormat hw_pix_fmt, AVBufferRef** out_frames_ref);
     * }
     */
    public static int avcodec_get_hw_frames_parameters(MemorySegment avctx, MemorySegment device_ref, int hw_pix_fmt, MemorySegment out_frames_ref) {
        var mh$ = avcodec_get_hw_frames_parameters$MH();
        try {
            return (int)mh$.invokeExact(avctx, device_ref, hw_pix_fmt, out_frames_ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVPictureStructure.AV_PICTURE_STRUCTURE_UNKNOWN = 0;
     * }
     */
    public static int AV_PICTURE_STRUCTURE_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVPictureStructure.AV_PICTURE_STRUCTURE_TOP_FIELD = 1;
     * }
     */
    public static int AV_PICTURE_STRUCTURE_TOP_FIELD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVPictureStructure.AV_PICTURE_STRUCTURE_BOTTOM_FIELD = 2;
     * }
     */
    public static int AV_PICTURE_STRUCTURE_BOTTOM_FIELD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVPictureStructure.AV_PICTURE_STRUCTURE_FRAME = 3;
     * }
     */
    public static int AV_PICTURE_STRUCTURE_FRAME() {
        return (int)3L;
    }
    public static MethodHandle av_parser_iterate$MH() {
        return RuntimeHelper.requireNonNull(constants$255.const$1,"av_parser_iterate");
    }
    /**
     * {@snippet :
     * const AVCodecParser* av_parser_iterate(void** opaque);
     * }
     */
    public static MemorySegment av_parser_iterate(MemorySegment opaque) {
        var mh$ = av_parser_iterate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_parser_init$MH() {
        return RuntimeHelper.requireNonNull(constants$255.const$2,"av_parser_init");
    }
    /**
     * {@snippet :
     * AVCodecParserContext* av_parser_init(int codec_id);
     * }
     */
    public static MemorySegment av_parser_init(int codec_id) {
        var mh$ = av_parser_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(codec_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_parser_parse2$MH() {
        return RuntimeHelper.requireNonNull(constants$255.const$4,"av_parser_parse2");
    }
    /**
     * {@snippet :
     * int av_parser_parse2(AVCodecParserContext* s, AVCodecContext* avctx, uint8_t** poutbuf, int* poutbuf_size, const uint8_t* buf, int buf_size, int64_t pts, int64_t dts, int64_t pos);
     * }
     */
    public static int av_parser_parse2(MemorySegment s, MemorySegment avctx, MemorySegment poutbuf, MemorySegment poutbuf_size, MemorySegment buf, int buf_size, long pts, long dts, long pos) {
        var mh$ = av_parser_parse2$MH();
        try {
            return (int)mh$.invokeExact(s, avctx, poutbuf, poutbuf_size, buf, buf_size, pts, dts, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_parser_close$MH() {
        return RuntimeHelper.requireNonNull(constants$255.const$5,"av_parser_close");
    }
    /**
     * {@snippet :
     * void av_parser_close(AVCodecParserContext* s);
     * }
     */
    public static void av_parser_close(MemorySegment s) {
        var mh$ = av_parser_close$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_encode_subtitle$MH() {
        return RuntimeHelper.requireNonNull(constants$256.const$0,"avcodec_encode_subtitle");
    }
    /**
     * {@snippet :
     * int avcodec_encode_subtitle(AVCodecContext* avctx, uint8_t* buf, int buf_size, const AVSubtitle* sub);
     * }
     */
    public static int avcodec_encode_subtitle(MemorySegment avctx, MemorySegment buf, int buf_size, MemorySegment sub) {
        var mh$ = avcodec_encode_subtitle$MH();
        try {
            return (int)mh$.invokeExact(avctx, buf, buf_size, sub);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_pix_fmt_to_codec_tag$MH() {
        return RuntimeHelper.requireNonNull(constants$256.const$1,"avcodec_pix_fmt_to_codec_tag");
    }
    /**
     * {@snippet :
     * unsigned int avcodec_pix_fmt_to_codec_tag(enum AVPixelFormat pix_fmt);
     * }
     */
    public static int avcodec_pix_fmt_to_codec_tag(int pix_fmt) {
        var mh$ = avcodec_pix_fmt_to_codec_tag$MH();
        try {
            return (int)mh$.invokeExact(pix_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_find_best_pix_fmt_of_list$MH() {
        return RuntimeHelper.requireNonNull(constants$256.const$3,"avcodec_find_best_pix_fmt_of_list");
    }
    /**
     * {@snippet :
     * enum AVPixelFormat avcodec_find_best_pix_fmt_of_list(enum AVPixelFormat* pix_fmt_list, enum AVPixelFormat src_pix_fmt, int has_alpha, int* loss_ptr);
     * }
     */
    public static int avcodec_find_best_pix_fmt_of_list(MemorySegment pix_fmt_list, int src_pix_fmt, int has_alpha, MemorySegment loss_ptr) {
        var mh$ = avcodec_find_best_pix_fmt_of_list$MH();
        try {
            return (int)mh$.invokeExact(pix_fmt_list, src_pix_fmt, has_alpha, loss_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_default_get_format$MH() {
        return RuntimeHelper.requireNonNull(constants$256.const$4,"avcodec_default_get_format");
    }
    /**
     * {@snippet :
     * enum AVPixelFormat avcodec_default_get_format(struct AVCodecContext* s, enum AVPixelFormat* fmt);
     * }
     */
    public static int avcodec_default_get_format(MemorySegment s, MemorySegment fmt) {
        var mh$ = avcodec_default_get_format$MH();
        try {
            return (int)mh$.invokeExact(s, fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_string$MH() {
        return RuntimeHelper.requireNonNull(constants$256.const$6,"avcodec_string");
    }
    /**
     * {@snippet :
     * void avcodec_string(char* buf, int buf_size, AVCodecContext* enc, int encode);
     * }
     */
    public static void avcodec_string(MemorySegment buf, int buf_size, MemorySegment enc, int encode) {
        var mh$ = avcodec_string$MH();
        try {
            mh$.invokeExact(buf, buf_size, enc, encode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_default_execute$MH() {
        return RuntimeHelper.requireNonNull(constants$257.const$1,"avcodec_default_execute");
    }
    /**
     * {@snippet :
     * int avcodec_default_execute(AVCodecContext* c, int (*func)(AVCodecContext*,void*), void* arg, int* ret, int count, int size);
     * }
     */
    public static int avcodec_default_execute(MemorySegment c, MemorySegment func, MemorySegment arg, MemorySegment ret, int count, int size) {
        var mh$ = avcodec_default_execute$MH();
        try {
            return (int)mh$.invokeExact(c, func, arg, ret, count, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_default_execute2$MH() {
        return RuntimeHelper.requireNonNull(constants$257.const$5,"avcodec_default_execute2");
    }
    /**
     * {@snippet :
     * int avcodec_default_execute2(AVCodecContext* c, int (*func)(AVCodecContext*,void*,int,int), void* arg, int* ret, int count);
     * }
     */
    public static int avcodec_default_execute2(MemorySegment c, MemorySegment func, MemorySegment arg, MemorySegment ret, int count) {
        var mh$ = avcodec_default_execute2$MH();
        try {
            return (int)mh$.invokeExact(c, func, arg, ret, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_fill_audio_frame$MH() {
        return RuntimeHelper.requireNonNull(constants$258.const$1,"avcodec_fill_audio_frame");
    }
    /**
     * {@snippet :
     * int avcodec_fill_audio_frame(AVFrame* frame, int nb_channels, enum AVSampleFormat sample_fmt, const uint8_t* buf, int buf_size, int align);
     * }
     */
    public static int avcodec_fill_audio_frame(MemorySegment frame, int nb_channels, int sample_fmt, MemorySegment buf, int buf_size, int align) {
        var mh$ = avcodec_fill_audio_frame$MH();
        try {
            return (int)mh$.invokeExact(frame, nb_channels, sample_fmt, buf, buf_size, align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_flush_buffers$MH() {
        return RuntimeHelper.requireNonNull(constants$258.const$2,"avcodec_flush_buffers");
    }
    /**
     * {@snippet :
     * void avcodec_flush_buffers(AVCodecContext* avctx);
     * }
     */
    public static void avcodec_flush_buffers(MemorySegment avctx) {
        var mh$ = avcodec_flush_buffers$MH();
        try {
            mh$.invokeExact(avctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_audio_frame_duration$MH() {
        return RuntimeHelper.requireNonNull(constants$258.const$3,"av_get_audio_frame_duration");
    }
    /**
     * {@snippet :
     * int av_get_audio_frame_duration(AVCodecContext* avctx, int frame_bytes);
     * }
     */
    public static int av_get_audio_frame_duration(MemorySegment avctx, int frame_bytes) {
        var mh$ = av_get_audio_frame_duration$MH();
        try {
            return (int)mh$.invokeExact(avctx, frame_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_fast_padded_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$258.const$4,"av_fast_padded_malloc");
    }
    /**
     * {@snippet :
     * void av_fast_padded_malloc(void* ptr, unsigned int* size, size_t min_size);
     * }
     */
    public static void av_fast_padded_malloc(MemorySegment ptr, MemorySegment size, long min_size) {
        var mh$ = av_fast_padded_malloc$MH();
        try {
            mh$.invokeExact(ptr, size, min_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_fast_padded_mallocz$MH() {
        return RuntimeHelper.requireNonNull(constants$258.const$5,"av_fast_padded_mallocz");
    }
    /**
     * {@snippet :
     * void av_fast_padded_mallocz(void* ptr, unsigned int* size, size_t min_size);
     * }
     */
    public static void av_fast_padded_mallocz(MemorySegment ptr, MemorySegment size, long min_size) {
        var mh$ = av_fast_padded_mallocz$MH();
        try {
            mh$.invokeExact(ptr, size, min_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avcodec_is_open$MH() {
        return RuntimeHelper.requireNonNull(constants$259.const$0,"avcodec_is_open");
    }
    /**
     * {@snippet :
     * int avcodec_is_open(AVCodecContext* s);
     * }
     */
    public static int avcodec_is_open(MemorySegment s) {
        var mh$ = avcodec_is_open$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$261.const$2,"clock");
    }
    /**
     * {@snippet :
     * clock_t clock();
     * }
     */
    public static long clock() {
        var mh$ = clock$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$261.const$3,"time");
    }
    /**
     * {@snippet :
     * time_t time(time_t* __timer);
     * }
     */
    public static long time(MemorySegment __timer) {
        var mh$ = time$MH();
        try {
            return (long)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$261.const$5,"difftime");
    }
    /**
     * {@snippet :
     * double difftime(time_t __time1, time_t __time0);
     * }
     */
    public static double difftime(long __time1, long __time0) {
        var mh$ = difftime$MH();
        try {
            return (double)mh$.invokeExact(__time1, __time0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$262.const$0,"mktime");
    }
    /**
     * {@snippet :
     * time_t mktime(struct tm* __tp);
     * }
     */
    public static long mktime(MemorySegment __tp) {
        var mh$ = mktime$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$262.const$2,"strftime");
    }
    /**
     * {@snippet :
     * size_t strftime(char* __s, size_t __maxsize, char* __format, struct tm* __tp);
     * }
     */
    public static long strftime(MemorySegment __s, long __maxsize, MemorySegment __format, MemorySegment __tp) {
        var mh$ = strftime$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime_l$MH() {
        return RuntimeHelper.requireNonNull(constants$262.const$4,"strftime_l");
    }
    /**
     * {@snippet :
     * size_t strftime_l(char* __s, size_t __maxsize, char* __format, struct tm* __tp, locale_t __loc);
     * }
     */
    public static long strftime_l(MemorySegment __s, long __maxsize, MemorySegment __format, MemorySegment __tp, MemorySegment __loc) {
        var mh$ = strftime_l$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$262.const$5,"gmtime");
    }
    /**
     * {@snippet :
     * struct tm* gmtime(const time_t* __timer);
     * }
     */
    public static MemorySegment gmtime(MemorySegment __timer) {
        var mh$ = gmtime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$263.const$0,"localtime");
    }
    /**
     * {@snippet :
     * struct tm* localtime(const time_t* __timer);
     * }
     */
    public static MemorySegment localtime(MemorySegment __timer) {
        var mh$ = localtime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$263.const$1,"gmtime_r");
    }
    /**
     * {@snippet :
     * struct tm* gmtime_r(const time_t* __timer, struct tm* __tp);
     * }
     */
    public static MemorySegment gmtime_r(MemorySegment __timer, MemorySegment __tp) {
        var mh$ = gmtime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$263.const$2,"localtime_r");
    }
    /**
     * {@snippet :
     * struct tm* localtime_r(const time_t* __timer, struct tm* __tp);
     * }
     */
    public static MemorySegment localtime_r(MemorySegment __timer, MemorySegment __tp) {
        var mh$ = localtime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$263.const$3,"asctime");
    }
    /**
     * {@snippet :
     * char* asctime(struct tm* __tp);
     * }
     */
    public static MemorySegment asctime(MemorySegment __tp) {
        var mh$ = asctime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$263.const$4,"ctime");
    }
    /**
     * {@snippet :
     * char* ctime(const time_t* __timer);
     * }
     */
    public static MemorySegment ctime(MemorySegment __timer) {
        var mh$ = ctime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$263.const$5,"asctime_r");
    }
    /**
     * {@snippet :
     * char* asctime_r(struct tm* __tp, char* __buf);
     * }
     */
    public static MemorySegment asctime_r(MemorySegment __tp, MemorySegment __buf) {
        var mh$ = asctime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__tp, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$264.const$0,"ctime_r");
    }
    /**
     * {@snippet :
     * char* ctime_r(const time_t* __timer, char* __buf);
     * }
     */
    public static MemorySegment ctime_r(MemorySegment __timer, MemorySegment __buf) {
        var mh$ = ctime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * char* __tzname[2];
     * }
     */
    public static MemorySegment __tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$264.const$2,"__tzname");
    }
    public static MemoryLayout __daylight$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle __daylight$VH() {
        return constants$59.const$0;
    }
    public static MemorySegment __daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$264.const$3,"__daylight");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int __daylight;
     * }
     */
    public static int __daylight$get() {
        return (int) constants$59.const$0.get(RuntimeHelper.requireNonNull(constants$264.const$3, "__daylight"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int __daylight;
     * }
     */
    public static void __daylight$set(int x) {
        constants$59.const$0.set(RuntimeHelper.requireNonNull(constants$264.const$3, "__daylight"), x);
    }
    public static MemoryLayout __timezone$LAYOUT() {
        return JAVA_LONG;
    }
    public static VarHandle __timezone$VH() {
        return constants$264.const$4;
    }
    public static MemorySegment __timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$264.const$5,"__timezone");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * long __timezone;
     * }
     */
    public static long __timezone$get() {
        return (long) constants$264.const$4.get(RuntimeHelper.requireNonNull(constants$264.const$5, "__timezone"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * long __timezone;
     * }
     */
    public static void __timezone$set(long x) {
        constants$264.const$4.set(RuntimeHelper.requireNonNull(constants$264.const$5, "__timezone"), x);
    }
    /**
     * {@snippet :
     * char* tzname[2];
     * }
     */
    public static MemorySegment tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$265.const$0,"tzname");
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$265.const$1,"tzset");
    }
    /**
     * {@snippet :
     * void tzset();
     * }
     */
    public static void tzset() {
        var mh$ = tzset$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout daylight$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle daylight$VH() {
        return constants$59.const$0;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$265.const$2,"daylight");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int daylight;
     * }
     */
    public static int daylight$get() {
        return (int) constants$59.const$0.get(RuntimeHelper.requireNonNull(constants$265.const$2, "daylight"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int daylight;
     * }
     */
    public static void daylight$set(int x) {
        constants$59.const$0.set(RuntimeHelper.requireNonNull(constants$265.const$2, "daylight"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return JAVA_LONG;
    }
    public static VarHandle timezone$VH() {
        return constants$264.const$4;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$265.const$3,"timezone");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * long timezone;
     * }
     */
    public static long timezone$get() {
        return (long) constants$264.const$4.get(RuntimeHelper.requireNonNull(constants$265.const$3, "timezone"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * long timezone;
     * }
     */
    public static void timezone$set(long x) {
        constants$264.const$4.set(RuntimeHelper.requireNonNull(constants$265.const$3, "timezone"), x);
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$265.const$4,"timegm");
    }
    /**
     * {@snippet :
     * time_t timegm(struct tm* __tp);
     * }
     */
    public static long timegm(MemorySegment __tp) {
        var mh$ = timegm$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$265.const$5,"timelocal");
    }
    /**
     * {@snippet :
     * time_t timelocal(struct tm* __tp);
     * }
     */
    public static long timelocal(MemorySegment __tp) {
        var mh$ = timelocal$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dysize$MH() {
        return RuntimeHelper.requireNonNull(constants$266.const$0,"dysize");
    }
    /**
     * {@snippet :
     * int dysize(int __year);
     * }
     */
    public static int dysize(int __year) {
        var mh$ = dysize$MH();
        try {
            return (int)mh$.invokeExact(__year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$266.const$1,"nanosleep");
    }
    /**
     * {@snippet :
     * int nanosleep(struct timespec* __requested_time, struct timespec* __remaining);
     * }
     */
    public static int nanosleep(MemorySegment __requested_time, MemorySegment __remaining) {
        var mh$ = nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__requested_time, __remaining);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$266.const$2,"clock_getres");
    }
    /**
     * {@snippet :
     * int clock_getres(clockid_t __clock_id, struct timespec* __res);
     * }
     */
    public static int clock_getres(int __clock_id, MemorySegment __res) {
        var mh$ = clock_getres$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$266.const$3,"clock_gettime");
    }
    /**
     * {@snippet :
     * int clock_gettime(clockid_t __clock_id, struct timespec* __tp);
     * }
     */
    public static int clock_gettime(int __clock_id, MemorySegment __tp) {
        var mh$ = clock_gettime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$266.const$4,"clock_settime");
    }
    /**
     * {@snippet :
     * int clock_settime(clockid_t __clock_id, struct timespec* __tp);
     * }
     */
    public static int clock_settime(int __clock_id, MemorySegment __tp) {
        var mh$ = clock_settime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$266.const$6,"clock_nanosleep");
    }
    /**
     * {@snippet :
     * int clock_nanosleep(clockid_t __clock_id, int __flags, struct timespec* __req, struct timespec* __rem);
     * }
     */
    public static int clock_nanosleep(int __clock_id, int __flags, MemorySegment __req, MemorySegment __rem) {
        var mh$ = clock_nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __flags, __req, __rem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$267.const$0,"clock_getcpuclockid");
    }
    /**
     * {@snippet :
     * int clock_getcpuclockid(pid_t __pid, clockid_t* __clock_id);
     * }
     */
    public static int clock_getcpuclockid(int __pid, MemorySegment __clock_id) {
        var mh$ = clock_getcpuclockid$MH();
        try {
            return (int)mh$.invokeExact(__pid, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_create$MH() {
        return RuntimeHelper.requireNonNull(constants$267.const$1,"timer_create");
    }
    /**
     * {@snippet :
     * int timer_create(clockid_t __clock_id, struct sigevent* __evp, timer_t* __timerid);
     * }
     */
    public static int timer_create(int __clock_id, MemorySegment __evp, MemorySegment __timerid) {
        var mh$ = timer_create$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __evp, __timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$267.const$2,"timer_delete");
    }
    /**
     * {@snippet :
     * int timer_delete(timer_t __timerid);
     * }
     */
    public static int timer_delete(MemorySegment __timerid) {
        var mh$ = timer_delete$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$267.const$4,"timer_settime");
    }
    /**
     * {@snippet :
     * int timer_settime(timer_t __timerid, int __flags, struct itimerspec* __value, struct itimerspec* __ovalue);
     * }
     */
    public static int timer_settime(MemorySegment __timerid, int __flags, MemorySegment __value, MemorySegment __ovalue) {
        var mh$ = timer_settime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __flags, __value, __ovalue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$267.const$5,"timer_gettime");
    }
    /**
     * {@snippet :
     * int timer_gettime(timer_t __timerid, struct itimerspec* __value);
     * }
     */
    public static int timer_gettime(MemorySegment __timerid, MemorySegment __value) {
        var mh$ = timer_gettime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_getoverrun$MH() {
        return RuntimeHelper.requireNonNull(constants$268.const$0,"timer_getoverrun");
    }
    /**
     * {@snippet :
     * int timer_getoverrun(timer_t __timerid);
     * }
     */
    public static int timer_getoverrun(MemorySegment __timerid) {
        var mh$ = timer_getoverrun$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$268.const$1,"timespec_get");
    }
    /**
     * {@snippet :
     * int timespec_get(struct timespec* __ts, int __base);
     * }
     */
    public static int timespec_get(MemorySegment __ts, int __base) {
        var mh$ = timespec_get$MH();
        try {
            return (int)mh$.invokeExact(__ts, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVIODirEntryType.AVIO_ENTRY_UNKNOWN = 0;
     * }
     */
    public static int AVIO_ENTRY_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVIODirEntryType.AVIO_ENTRY_BLOCK_DEVICE = 1;
     * }
     */
    public static int AVIO_ENTRY_BLOCK_DEVICE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVIODirEntryType.AVIO_ENTRY_CHARACTER_DEVICE = 2;
     * }
     */
    public static int AVIO_ENTRY_CHARACTER_DEVICE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVIODirEntryType.AVIO_ENTRY_DIRECTORY = 3;
     * }
     */
    public static int AVIO_ENTRY_DIRECTORY() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVIODirEntryType.AVIO_ENTRY_NAMED_PIPE = 4;
     * }
     */
    public static int AVIO_ENTRY_NAMED_PIPE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVIODirEntryType.AVIO_ENTRY_SYMBOLIC_LINK = 5;
     * }
     */
    public static int AVIO_ENTRY_SYMBOLIC_LINK() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVIODirEntryType.AVIO_ENTRY_SOCKET = 6;
     * }
     */
    public static int AVIO_ENTRY_SOCKET() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVIODirEntryType.AVIO_ENTRY_FILE = 7;
     * }
     */
    public static int AVIO_ENTRY_FILE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum AVIODirEntryType.AVIO_ENTRY_SERVER = 8;
     * }
     */
    public static int AVIO_ENTRY_SERVER() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVIODirEntryType.AVIO_ENTRY_SHARE = 9;
     * }
     */
    public static int AVIO_ENTRY_SHARE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum AVIODirEntryType.AVIO_ENTRY_WORKGROUP = 10;
     * }
     */
    public static int AVIO_ENTRY_WORKGROUP() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum AVIODataMarkerType.AVIO_DATA_MARKER_HEADER = 0;
     * }
     */
    public static int AVIO_DATA_MARKER_HEADER() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVIODataMarkerType.AVIO_DATA_MARKER_SYNC_POINT = 1;
     * }
     */
    public static int AVIO_DATA_MARKER_SYNC_POINT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVIODataMarkerType.AVIO_DATA_MARKER_BOUNDARY_POINT = 2;
     * }
     */
    public static int AVIO_DATA_MARKER_BOUNDARY_POINT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVIODataMarkerType.AVIO_DATA_MARKER_UNKNOWN = 3;
     * }
     */
    public static int AVIO_DATA_MARKER_UNKNOWN() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVIODataMarkerType.AVIO_DATA_MARKER_TRAILER = 4;
     * }
     */
    public static int AVIO_DATA_MARKER_TRAILER() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVIODataMarkerType.AVIO_DATA_MARKER_FLUSH_POINT = 5;
     * }
     */
    public static int AVIO_DATA_MARKER_FLUSH_POINT() {
        return (int)5L;
    }
    public static MethodHandle avio_find_protocol_name$MH() {
        return RuntimeHelper.requireNonNull(constants$279.const$0,"avio_find_protocol_name");
    }
    /**
     * {@snippet :
     * char* avio_find_protocol_name(char* url);
     * }
     */
    public static MemorySegment avio_find_protocol_name(MemorySegment url) {
        var mh$ = avio_find_protocol_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(url);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_check$MH() {
        return RuntimeHelper.requireNonNull(constants$279.const$1,"avio_check");
    }
    /**
     * {@snippet :
     * int avio_check(char* url, int flags);
     * }
     */
    public static int avio_check(MemorySegment url, int flags) {
        var mh$ = avio_check$MH();
        try {
            return (int)mh$.invokeExact(url, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_open_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$279.const$2,"avio_open_dir");
    }
    /**
     * {@snippet :
     * int avio_open_dir(AVIODirContext** s, char* url, AVDictionary** options);
     * }
     */
    public static int avio_open_dir(MemorySegment s, MemorySegment url, MemorySegment options) {
        var mh$ = avio_open_dir$MH();
        try {
            return (int)mh$.invokeExact(s, url, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_read_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$279.const$3,"avio_read_dir");
    }
    /**
     * {@snippet :
     * int avio_read_dir(AVIODirContext* s, AVIODirEntry** next);
     * }
     */
    public static int avio_read_dir(MemorySegment s, MemorySegment next) {
        var mh$ = avio_read_dir$MH();
        try {
            return (int)mh$.invokeExact(s, next);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_close_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$279.const$4,"avio_close_dir");
    }
    /**
     * {@snippet :
     * int avio_close_dir(AVIODirContext** s);
     * }
     */
    public static int avio_close_dir(MemorySegment s) {
        var mh$ = avio_close_dir$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_free_directory_entry$MH() {
        return RuntimeHelper.requireNonNull(constants$279.const$5,"avio_free_directory_entry");
    }
    /**
     * {@snippet :
     * void avio_free_directory_entry(AVIODirEntry** entry);
     * }
     */
    public static void avio_free_directory_entry(MemorySegment entry) {
        var mh$ = avio_free_directory_entry$MH();
        try {
            mh$.invokeExact(entry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_alloc_context$MH() {
        return RuntimeHelper.requireNonNull(constants$280.const$4,"avio_alloc_context");
    }
    /**
     * {@snippet :
     * AVIOContext* avio_alloc_context(unsigned char* buffer, int buffer_size, int write_flag, void* opaque, int (*read_packet)(void*,uint8_t*,int), int (*write_packet)(void*,uint8_t*,int), int64_t (*seek)(void*,int64_t,int));
     * }
     */
    public static MemorySegment avio_alloc_context(MemorySegment buffer, int buffer_size, int write_flag, MemorySegment opaque, MemorySegment read_packet, MemorySegment write_packet, MemorySegment seek) {
        var mh$ = avio_alloc_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buffer, buffer_size, write_flag, opaque, read_packet, write_packet, seek);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_context_free$MH() {
        return RuntimeHelper.requireNonNull(constants$280.const$5,"avio_context_free");
    }
    /**
     * {@snippet :
     * void avio_context_free(AVIOContext** s);
     * }
     */
    public static void avio_context_free(MemorySegment s) {
        var mh$ = avio_context_free$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_w8$MH() {
        return RuntimeHelper.requireNonNull(constants$281.const$0,"avio_w8");
    }
    /**
     * {@snippet :
     * void avio_w8(AVIOContext* s, int b);
     * }
     */
    public static void avio_w8(MemorySegment s, int b) {
        var mh$ = avio_w8$MH();
        try {
            mh$.invokeExact(s, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_write$MH() {
        return RuntimeHelper.requireNonNull(constants$281.const$2,"avio_write");
    }
    /**
     * {@snippet :
     * void avio_write(AVIOContext* s, unsigned char* buf, int size);
     * }
     */
    public static void avio_write(MemorySegment s, MemorySegment buf, int size) {
        var mh$ = avio_write$MH();
        try {
            mh$.invokeExact(s, buf, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_wl64$MH() {
        return RuntimeHelper.requireNonNull(constants$281.const$3,"avio_wl64");
    }
    /**
     * {@snippet :
     * void avio_wl64(AVIOContext* s, uint64_t val);
     * }
     */
    public static void avio_wl64(MemorySegment s, long val) {
        var mh$ = avio_wl64$MH();
        try {
            mh$.invokeExact(s, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_wb64$MH() {
        return RuntimeHelper.requireNonNull(constants$281.const$4,"avio_wb64");
    }
    /**
     * {@snippet :
     * void avio_wb64(AVIOContext* s, uint64_t val);
     * }
     */
    public static void avio_wb64(MemorySegment s, long val) {
        var mh$ = avio_wb64$MH();
        try {
            mh$.invokeExact(s, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_wl32$MH() {
        return RuntimeHelper.requireNonNull(constants$281.const$5,"avio_wl32");
    }
    /**
     * {@snippet :
     * void avio_wl32(AVIOContext* s, unsigned int val);
     * }
     */
    public static void avio_wl32(MemorySegment s, int val) {
        var mh$ = avio_wl32$MH();
        try {
            mh$.invokeExact(s, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_wb32$MH() {
        return RuntimeHelper.requireNonNull(constants$282.const$0,"avio_wb32");
    }
    /**
     * {@snippet :
     * void avio_wb32(AVIOContext* s, unsigned int val);
     * }
     */
    public static void avio_wb32(MemorySegment s, int val) {
        var mh$ = avio_wb32$MH();
        try {
            mh$.invokeExact(s, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_wl24$MH() {
        return RuntimeHelper.requireNonNull(constants$282.const$1,"avio_wl24");
    }
    /**
     * {@snippet :
     * void avio_wl24(AVIOContext* s, unsigned int val);
     * }
     */
    public static void avio_wl24(MemorySegment s, int val) {
        var mh$ = avio_wl24$MH();
        try {
            mh$.invokeExact(s, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_wb24$MH() {
        return RuntimeHelper.requireNonNull(constants$282.const$2,"avio_wb24");
    }
    /**
     * {@snippet :
     * void avio_wb24(AVIOContext* s, unsigned int val);
     * }
     */
    public static void avio_wb24(MemorySegment s, int val) {
        var mh$ = avio_wb24$MH();
        try {
            mh$.invokeExact(s, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_wl16$MH() {
        return RuntimeHelper.requireNonNull(constants$282.const$3,"avio_wl16");
    }
    /**
     * {@snippet :
     * void avio_wl16(AVIOContext* s, unsigned int val);
     * }
     */
    public static void avio_wl16(MemorySegment s, int val) {
        var mh$ = avio_wl16$MH();
        try {
            mh$.invokeExact(s, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_wb16$MH() {
        return RuntimeHelper.requireNonNull(constants$282.const$4,"avio_wb16");
    }
    /**
     * {@snippet :
     * void avio_wb16(AVIOContext* s, unsigned int val);
     * }
     */
    public static void avio_wb16(MemorySegment s, int val) {
        var mh$ = avio_wb16$MH();
        try {
            mh$.invokeExact(s, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_put_str$MH() {
        return RuntimeHelper.requireNonNull(constants$282.const$5,"avio_put_str");
    }
    /**
     * {@snippet :
     * int avio_put_str(AVIOContext* s, char* str);
     * }
     */
    public static int avio_put_str(MemorySegment s, MemorySegment str) {
        var mh$ = avio_put_str$MH();
        try {
            return (int)mh$.invokeExact(s, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_put_str16le$MH() {
        return RuntimeHelper.requireNonNull(constants$283.const$0,"avio_put_str16le");
    }
    /**
     * {@snippet :
     * int avio_put_str16le(AVIOContext* s, char* str);
     * }
     */
    public static int avio_put_str16le(MemorySegment s, MemorySegment str) {
        var mh$ = avio_put_str16le$MH();
        try {
            return (int)mh$.invokeExact(s, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_put_str16be$MH() {
        return RuntimeHelper.requireNonNull(constants$283.const$1,"avio_put_str16be");
    }
    /**
     * {@snippet :
     * int avio_put_str16be(AVIOContext* s, char* str);
     * }
     */
    public static int avio_put_str16be(MemorySegment s, MemorySegment str) {
        var mh$ = avio_put_str16be$MH();
        try {
            return (int)mh$.invokeExact(s, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_write_marker$MH() {
        return RuntimeHelper.requireNonNull(constants$283.const$3,"avio_write_marker");
    }
    /**
     * {@snippet :
     * void avio_write_marker(AVIOContext* s, int64_t time, enum AVIODataMarkerType type);
     * }
     */
    public static void avio_write_marker(MemorySegment s, long time, int type) {
        var mh$ = avio_write_marker$MH();
        try {
            mh$.invokeExact(s, time, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_seek$MH() {
        return RuntimeHelper.requireNonNull(constants$283.const$4,"avio_seek");
    }
    /**
     * {@snippet :
     * int64_t avio_seek(AVIOContext* s, int64_t offset, int whence);
     * }
     */
    public static long avio_seek(MemorySegment s, long offset, int whence) {
        var mh$ = avio_seek$MH();
        try {
            return (long)mh$.invokeExact(s, offset, whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_skip$MH() {
        return RuntimeHelper.requireNonNull(constants$283.const$5,"avio_skip");
    }
    /**
     * {@snippet :
     * int64_t avio_skip(AVIOContext* s, int64_t offset);
     * }
     */
    public static long avio_skip(MemorySegment s, long offset) {
        var mh$ = avio_skip$MH();
        try {
            return (long)mh$.invokeExact(s, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_size$MH() {
        return RuntimeHelper.requireNonNull(constants$284.const$0,"avio_size");
    }
    /**
     * {@snippet :
     * int64_t avio_size(AVIOContext* s);
     * }
     */
    public static long avio_size(MemorySegment s) {
        var mh$ = avio_size$MH();
        try {
            return (long)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_feof$MH() {
        return RuntimeHelper.requireNonNull(constants$284.const$1,"avio_feof");
    }
    /**
     * {@snippet :
     * int avio_feof(AVIOContext* s);
     * }
     */
    public static int avio_feof(MemorySegment s) {
        var mh$ = avio_feof$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$284.const$2,"avio_vprintf");
    }
    /**
     * {@snippet :
     * int avio_vprintf(AVIOContext* s, char* fmt, va_list ap);
     * }
     */
    public static int avio_vprintf(MemorySegment s, MemorySegment fmt, MemorySegment ap) {
        var mh$ = avio_vprintf$MH();
        try {
            return (int)mh$.invokeExact(s, fmt, ap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$284.const$3,"avio_printf");
    }
    /**
     * {@snippet :
     * int avio_printf(AVIOContext* s, char* fmt,...);
     * }
     */
    public static int avio_printf(MemorySegment s, MemorySegment fmt, Object... x2) {
        var mh$ = avio_printf$MH();
        try {
            return (int)mh$.invokeExact(s, fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_print_string_array$MH() {
        return RuntimeHelper.requireNonNull(constants$284.const$4,"avio_print_string_array");
    }
    /**
     * {@snippet :
     * void avio_print_string_array(AVIOContext* s, char* strings[]);
     * }
     */
    public static void avio_print_string_array(MemorySegment s, MemorySegment strings) {
        var mh$ = avio_print_string_array$MH();
        try {
            mh$.invokeExact(s, strings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_flush$MH() {
        return RuntimeHelper.requireNonNull(constants$284.const$5,"avio_flush");
    }
    /**
     * {@snippet :
     * void avio_flush(AVIOContext* s);
     * }
     */
    public static void avio_flush(MemorySegment s) {
        var mh$ = avio_flush$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_read$MH() {
        return RuntimeHelper.requireNonNull(constants$285.const$0,"avio_read");
    }
    /**
     * {@snippet :
     * int avio_read(AVIOContext* s, unsigned char* buf, int size);
     * }
     */
    public static int avio_read(MemorySegment s, MemorySegment buf, int size) {
        var mh$ = avio_read$MH();
        try {
            return (int)mh$.invokeExact(s, buf, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_read_partial$MH() {
        return RuntimeHelper.requireNonNull(constants$285.const$1,"avio_read_partial");
    }
    /**
     * {@snippet :
     * int avio_read_partial(AVIOContext* s, unsigned char* buf, int size);
     * }
     */
    public static int avio_read_partial(MemorySegment s, MemorySegment buf, int size) {
        var mh$ = avio_read_partial$MH();
        try {
            return (int)mh$.invokeExact(s, buf, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_r8$MH() {
        return RuntimeHelper.requireNonNull(constants$285.const$2,"avio_r8");
    }
    /**
     * {@snippet :
     * int avio_r8(AVIOContext* s);
     * }
     */
    public static int avio_r8(MemorySegment s) {
        var mh$ = avio_r8$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_rl16$MH() {
        return RuntimeHelper.requireNonNull(constants$285.const$3,"avio_rl16");
    }
    /**
     * {@snippet :
     * unsigned int avio_rl16(AVIOContext* s);
     * }
     */
    public static int avio_rl16(MemorySegment s) {
        var mh$ = avio_rl16$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_rl24$MH() {
        return RuntimeHelper.requireNonNull(constants$285.const$4,"avio_rl24");
    }
    /**
     * {@snippet :
     * unsigned int avio_rl24(AVIOContext* s);
     * }
     */
    public static int avio_rl24(MemorySegment s) {
        var mh$ = avio_rl24$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_rl32$MH() {
        return RuntimeHelper.requireNonNull(constants$285.const$5,"avio_rl32");
    }
    /**
     * {@snippet :
     * unsigned int avio_rl32(AVIOContext* s);
     * }
     */
    public static int avio_rl32(MemorySegment s) {
        var mh$ = avio_rl32$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_rl64$MH() {
        return RuntimeHelper.requireNonNull(constants$286.const$0,"avio_rl64");
    }
    /**
     * {@snippet :
     * uint64_t avio_rl64(AVIOContext* s);
     * }
     */
    public static long avio_rl64(MemorySegment s) {
        var mh$ = avio_rl64$MH();
        try {
            return (long)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_rb16$MH() {
        return RuntimeHelper.requireNonNull(constants$286.const$1,"avio_rb16");
    }
    /**
     * {@snippet :
     * unsigned int avio_rb16(AVIOContext* s);
     * }
     */
    public static int avio_rb16(MemorySegment s) {
        var mh$ = avio_rb16$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_rb24$MH() {
        return RuntimeHelper.requireNonNull(constants$286.const$2,"avio_rb24");
    }
    /**
     * {@snippet :
     * unsigned int avio_rb24(AVIOContext* s);
     * }
     */
    public static int avio_rb24(MemorySegment s) {
        var mh$ = avio_rb24$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_rb32$MH() {
        return RuntimeHelper.requireNonNull(constants$286.const$3,"avio_rb32");
    }
    /**
     * {@snippet :
     * unsigned int avio_rb32(AVIOContext* s);
     * }
     */
    public static int avio_rb32(MemorySegment s) {
        var mh$ = avio_rb32$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_rb64$MH() {
        return RuntimeHelper.requireNonNull(constants$286.const$4,"avio_rb64");
    }
    /**
     * {@snippet :
     * uint64_t avio_rb64(AVIOContext* s);
     * }
     */
    public static long avio_rb64(MemorySegment s) {
        var mh$ = avio_rb64$MH();
        try {
            return (long)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_get_str$MH() {
        return RuntimeHelper.requireNonNull(constants$286.const$5,"avio_get_str");
    }
    /**
     * {@snippet :
     * int avio_get_str(AVIOContext* pb, int maxlen, char* buf, int buflen);
     * }
     */
    public static int avio_get_str(MemorySegment pb, int maxlen, MemorySegment buf, int buflen) {
        var mh$ = avio_get_str$MH();
        try {
            return (int)mh$.invokeExact(pb, maxlen, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_get_str16le$MH() {
        return RuntimeHelper.requireNonNull(constants$287.const$0,"avio_get_str16le");
    }
    /**
     * {@snippet :
     * int avio_get_str16le(AVIOContext* pb, int maxlen, char* buf, int buflen);
     * }
     */
    public static int avio_get_str16le(MemorySegment pb, int maxlen, MemorySegment buf, int buflen) {
        var mh$ = avio_get_str16le$MH();
        try {
            return (int)mh$.invokeExact(pb, maxlen, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_get_str16be$MH() {
        return RuntimeHelper.requireNonNull(constants$287.const$1,"avio_get_str16be");
    }
    /**
     * {@snippet :
     * int avio_get_str16be(AVIOContext* pb, int maxlen, char* buf, int buflen);
     * }
     */
    public static int avio_get_str16be(MemorySegment pb, int maxlen, MemorySegment buf, int buflen) {
        var mh$ = avio_get_str16be$MH();
        try {
            return (int)mh$.invokeExact(pb, maxlen, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_open$MH() {
        return RuntimeHelper.requireNonNull(constants$287.const$2,"avio_open");
    }
    /**
     * {@snippet :
     * int avio_open(AVIOContext** s, char* url, int flags);
     * }
     */
    public static int avio_open(MemorySegment s, MemorySegment url, int flags) {
        var mh$ = avio_open$MH();
        try {
            return (int)mh$.invokeExact(s, url, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_open2$MH() {
        return RuntimeHelper.requireNonNull(constants$287.const$4,"avio_open2");
    }
    /**
     * {@snippet :
     * int avio_open2(AVIOContext** s, char* url, int flags, const AVIOInterruptCB* int_cb, AVDictionary** options);
     * }
     */
    public static int avio_open2(MemorySegment s, MemorySegment url, int flags, MemorySegment int_cb, MemorySegment options) {
        var mh$ = avio_open2$MH();
        try {
            return (int)mh$.invokeExact(s, url, flags, int_cb, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_close$MH() {
        return RuntimeHelper.requireNonNull(constants$287.const$5,"avio_close");
    }
    /**
     * {@snippet :
     * int avio_close(AVIOContext* s);
     * }
     */
    public static int avio_close(MemorySegment s) {
        var mh$ = avio_close$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_closep$MH() {
        return RuntimeHelper.requireNonNull(constants$288.const$0,"avio_closep");
    }
    /**
     * {@snippet :
     * int avio_closep(AVIOContext** s);
     * }
     */
    public static int avio_closep(MemorySegment s) {
        var mh$ = avio_closep$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_open_dyn_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$288.const$1,"avio_open_dyn_buf");
    }
    /**
     * {@snippet :
     * int avio_open_dyn_buf(AVIOContext** s);
     * }
     */
    public static int avio_open_dyn_buf(MemorySegment s) {
        var mh$ = avio_open_dyn_buf$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_get_dyn_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$288.const$2,"avio_get_dyn_buf");
    }
    /**
     * {@snippet :
     * int avio_get_dyn_buf(AVIOContext* s, uint8_t** pbuffer);
     * }
     */
    public static int avio_get_dyn_buf(MemorySegment s, MemorySegment pbuffer) {
        var mh$ = avio_get_dyn_buf$MH();
        try {
            return (int)mh$.invokeExact(s, pbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_close_dyn_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$288.const$3,"avio_close_dyn_buf");
    }
    /**
     * {@snippet :
     * int avio_close_dyn_buf(AVIOContext* s, uint8_t** pbuffer);
     * }
     */
    public static int avio_close_dyn_buf(MemorySegment s, MemorySegment pbuffer) {
        var mh$ = avio_close_dyn_buf$MH();
        try {
            return (int)mh$.invokeExact(s, pbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_enum_protocols$MH() {
        return RuntimeHelper.requireNonNull(constants$288.const$4,"avio_enum_protocols");
    }
    /**
     * {@snippet :
     * char* avio_enum_protocols(void** opaque, int output);
     * }
     */
    public static MemorySegment avio_enum_protocols(MemorySegment opaque, int output) {
        var mh$ = avio_enum_protocols$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(opaque, output);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_protocol_get_class$MH() {
        return RuntimeHelper.requireNonNull(constants$288.const$5,"avio_protocol_get_class");
    }
    /**
     * {@snippet :
     * const AVClass* avio_protocol_get_class(char* name);
     * }
     */
    public static MemorySegment avio_protocol_get_class(MemorySegment name) {
        var mh$ = avio_protocol_get_class$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$289.const$0,"avio_pause");
    }
    /**
     * {@snippet :
     * int avio_pause(AVIOContext* h, int pause);
     * }
     */
    public static int avio_pause(MemorySegment h, int pause) {
        var mh$ = avio_pause$MH();
        try {
            return (int)mh$.invokeExact(h, pause);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_seek_time$MH() {
        return RuntimeHelper.requireNonNull(constants$289.const$1,"avio_seek_time");
    }
    /**
     * {@snippet :
     * int64_t avio_seek_time(AVIOContext* h, int stream_index, int64_t timestamp, int flags);
     * }
     */
    public static long avio_seek_time(MemorySegment h, int stream_index, long timestamp, int flags) {
        var mh$ = avio_seek_time$MH();
        try {
            return (long)mh$.invokeExact(h, stream_index, timestamp, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_read_to_bprint$MH() {
        return RuntimeHelper.requireNonNull(constants$289.const$2,"avio_read_to_bprint");
    }
    /**
     * {@snippet :
     * int avio_read_to_bprint(AVIOContext* h, struct AVBPrint* pb, size_t max_size);
     * }
     */
    public static int avio_read_to_bprint(MemorySegment h, MemorySegment pb, long max_size) {
        var mh$ = avio_read_to_bprint$MH();
        try {
            return (int)mh$.invokeExact(h, pb, max_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_accept$MH() {
        return RuntimeHelper.requireNonNull(constants$289.const$3,"avio_accept");
    }
    /**
     * {@snippet :
     * int avio_accept(AVIOContext* s, AVIOContext** c);
     * }
     */
    public static int avio_accept(MemorySegment s, MemorySegment c) {
        var mh$ = avio_accept$MH();
        try {
            return (int)mh$.invokeExact(s, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avio_handshake$MH() {
        return RuntimeHelper.requireNonNull(constants$289.const$4,"avio_handshake");
    }
    /**
     * {@snippet :
     * int avio_handshake(AVIOContext* c);
     * }
     */
    public static int avio_handshake(MemorySegment c) {
        var mh$ = avio_handshake$MH();
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_packet$MH() {
        return RuntimeHelper.requireNonNull(constants$289.const$5,"av_get_packet");
    }
    /**
     * {@snippet :
     * int av_get_packet(AVIOContext* s, AVPacket* pkt, int size);
     * }
     */
    public static int av_get_packet(MemorySegment s, MemorySegment pkt, int size) {
        var mh$ = av_get_packet$MH();
        try {
            return (int)mh$.invokeExact(s, pkt, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_append_packet$MH() {
        return RuntimeHelper.requireNonNull(constants$290.const$0,"av_append_packet");
    }
    /**
     * {@snippet :
     * int av_append_packet(AVIOContext* s, AVPacket* pkt, int size);
     * }
     */
    public static int av_append_packet(MemorySegment s, MemorySegment pkt, int size) {
        var mh$ = av_append_packet$MH();
        try {
            return (int)mh$.invokeExact(s, pkt, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVStreamParseType.AVSTREAM_PARSE_NONE = 0;
     * }
     */
    public static int AVSTREAM_PARSE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVStreamParseType.AVSTREAM_PARSE_FULL = 1;
     * }
     */
    public static int AVSTREAM_PARSE_FULL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVStreamParseType.AVSTREAM_PARSE_HEADERS = 2;
     * }
     */
    public static int AVSTREAM_PARSE_HEADERS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVStreamParseType.AVSTREAM_PARSE_TIMESTAMPS = 3;
     * }
     */
    public static int AVSTREAM_PARSE_TIMESTAMPS() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVStreamParseType.AVSTREAM_PARSE_FULL_ONCE = 4;
     * }
     */
    public static int AVSTREAM_PARSE_FULL_ONCE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVStreamParseType.AVSTREAM_PARSE_FULL_RAW = 5;
     * }
     */
    public static int AVSTREAM_PARSE_FULL_RAW() {
        return (int)5L;
    }
    public static MethodHandle av_disposition_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$304.const$4,"av_disposition_from_string");
    }
    /**
     * {@snippet :
     * int av_disposition_from_string(char* disp);
     * }
     */
    public static int av_disposition_from_string(MemorySegment disp) {
        var mh$ = av_disposition_from_string$MH();
        try {
            return (int)mh$.invokeExact(disp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_disposition_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$304.const$5,"av_disposition_to_string");
    }
    /**
     * {@snippet :
     * char* av_disposition_to_string(int disposition);
     * }
     */
    public static MemorySegment av_disposition_to_string(int disposition) {
        var mh$ = av_disposition_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(disposition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_stream_get_parser$MH() {
        return RuntimeHelper.requireNonNull(constants$307.const$3,"av_stream_get_parser");
    }
    /**
     * {@snippet :
     * struct AVCodecParserContext* av_stream_get_parser(const AVStream* s);
     * }
     */
    public static MemorySegment av_stream_get_parser(MemorySegment s) {
        var mh$ = av_stream_get_parser$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_stream_get_end_pts$MH() {
        return RuntimeHelper.requireNonNull(constants$307.const$4,"av_stream_get_end_pts");
    }
    /**
     * {@snippet :
     * int64_t av_stream_get_end_pts(const AVStream* st);
     * }
     */
    public static long av_stream_get_end_pts(MemorySegment st) {
        var mh$ = av_stream_get_end_pts$MH();
        try {
            return (long)mh$.invokeExact(st);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVDurationEstimationMethod.AVFMT_DURATION_FROM_PTS = 0;
     * }
     */
    public static int AVFMT_DURATION_FROM_PTS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVDurationEstimationMethod.AVFMT_DURATION_FROM_STREAM = 1;
     * }
     */
    public static int AVFMT_DURATION_FROM_STREAM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVDurationEstimationMethod.AVFMT_DURATION_FROM_BITRATE = 2;
     * }
     */
    public static int AVFMT_DURATION_FROM_BITRATE() {
        return (int)2L;
    }
    public static MethodHandle av_format_inject_global_side_data$MH() {
        return RuntimeHelper.requireNonNull(constants$324.const$5,"av_format_inject_global_side_data");
    }
    /**
     * {@snippet :
     * void av_format_inject_global_side_data(AVFormatContext* s);
     * }
     */
    public static void av_format_inject_global_side_data(MemorySegment s) {
        var mh$ = av_format_inject_global_side_data$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_fmt_ctx_get_duration_estimation_method$MH() {
        return RuntimeHelper.requireNonNull(constants$325.const$0,"av_fmt_ctx_get_duration_estimation_method");
    }
    /**
     * {@snippet :
     * enum AVDurationEstimationMethod av_fmt_ctx_get_duration_estimation_method(const AVFormatContext* ctx);
     * }
     */
    public static int av_fmt_ctx_get_duration_estimation_method(MemorySegment ctx) {
        var mh$ = av_fmt_ctx_get_duration_estimation_method$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_version$MH() {
        return RuntimeHelper.requireNonNull(constants$325.const$1,"avformat_version");
    }
    /**
     * {@snippet :
     * unsigned int avformat_version();
     * }
     */
    public static int avformat_version() {
        var mh$ = avformat_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_configuration$MH() {
        return RuntimeHelper.requireNonNull(constants$325.const$2,"avformat_configuration");
    }
    /**
     * {@snippet :
     * char* avformat_configuration();
     * }
     */
    public static MemorySegment avformat_configuration() {
        var mh$ = avformat_configuration$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_license$MH() {
        return RuntimeHelper.requireNonNull(constants$325.const$3,"avformat_license");
    }
    /**
     * {@snippet :
     * char* avformat_license();
     * }
     */
    public static MemorySegment avformat_license() {
        var mh$ = avformat_license$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_network_init$MH() {
        return RuntimeHelper.requireNonNull(constants$325.const$4,"avformat_network_init");
    }
    /**
     * {@snippet :
     * int avformat_network_init();
     * }
     */
    public static int avformat_network_init() {
        var mh$ = avformat_network_init$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_network_deinit$MH() {
        return RuntimeHelper.requireNonNull(constants$325.const$5,"avformat_network_deinit");
    }
    /**
     * {@snippet :
     * int avformat_network_deinit();
     * }
     */
    public static int avformat_network_deinit() {
        var mh$ = avformat_network_deinit$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_muxer_iterate$MH() {
        return RuntimeHelper.requireNonNull(constants$326.const$0,"av_muxer_iterate");
    }
    /**
     * {@snippet :
     * const AVOutputFormat* av_muxer_iterate(void** opaque);
     * }
     */
    public static MemorySegment av_muxer_iterate(MemorySegment opaque) {
        var mh$ = av_muxer_iterate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_demuxer_iterate$MH() {
        return RuntimeHelper.requireNonNull(constants$326.const$1,"av_demuxer_iterate");
    }
    /**
     * {@snippet :
     * const AVInputFormat* av_demuxer_iterate(void** opaque);
     * }
     */
    public static MemorySegment av_demuxer_iterate(MemorySegment opaque) {
        var mh$ = av_demuxer_iterate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_alloc_context$MH() {
        return RuntimeHelper.requireNonNull(constants$326.const$2,"avformat_alloc_context");
    }
    /**
     * {@snippet :
     * AVFormatContext* avformat_alloc_context();
     * }
     */
    public static MemorySegment avformat_alloc_context() {
        var mh$ = avformat_alloc_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_free_context$MH() {
        return RuntimeHelper.requireNonNull(constants$326.const$3,"avformat_free_context");
    }
    /**
     * {@snippet :
     * void avformat_free_context(AVFormatContext* s);
     * }
     */
    public static void avformat_free_context(MemorySegment s) {
        var mh$ = avformat_free_context$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_get_class$MH() {
        return RuntimeHelper.requireNonNull(constants$326.const$4,"avformat_get_class");
    }
    /**
     * {@snippet :
     * const AVClass* avformat_get_class();
     * }
     */
    public static MemorySegment avformat_get_class() {
        var mh$ = avformat_get_class$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_stream_get_class$MH() {
        return RuntimeHelper.requireNonNull(constants$326.const$5,"av_stream_get_class");
    }
    /**
     * {@snippet :
     * const AVClass* av_stream_get_class();
     * }
     */
    public static MemorySegment av_stream_get_class() {
        var mh$ = av_stream_get_class$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_new_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$327.const$0,"avformat_new_stream");
    }
    /**
     * {@snippet :
     * AVStream* avformat_new_stream(AVFormatContext* s, const AVCodec* c);
     * }
     */
    public static MemorySegment avformat_new_stream(MemorySegment s, MemorySegment c) {
        var mh$ = avformat_new_stream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_stream_add_side_data$MH() {
        return RuntimeHelper.requireNonNull(constants$327.const$1,"av_stream_add_side_data");
    }
    /**
     * {@snippet :
     * int av_stream_add_side_data(AVStream* st, enum AVPacketSideDataType type, uint8_t* data, size_t size);
     * }
     */
    public static int av_stream_add_side_data(MemorySegment st, int type, MemorySegment data, long size) {
        var mh$ = av_stream_add_side_data$MH();
        try {
            return (int)mh$.invokeExact(st, type, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_stream_new_side_data$MH() {
        return RuntimeHelper.requireNonNull(constants$327.const$2,"av_stream_new_side_data");
    }
    /**
     * {@snippet :
     * uint8_t* av_stream_new_side_data(AVStream* stream, enum AVPacketSideDataType type, size_t size);
     * }
     */
    public static MemorySegment av_stream_new_side_data(MemorySegment stream, int type, long size) {
        var mh$ = av_stream_new_side_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(stream, type, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_stream_get_side_data$MH() {
        return RuntimeHelper.requireNonNull(constants$327.const$3,"av_stream_get_side_data");
    }
    /**
     * {@snippet :
     * uint8_t* av_stream_get_side_data(const AVStream* stream, enum AVPacketSideDataType type, size_t* size);
     * }
     */
    public static MemorySegment av_stream_get_side_data(MemorySegment stream, int type, MemorySegment size) {
        var mh$ = av_stream_get_side_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(stream, type, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_new_program$MH() {
        return RuntimeHelper.requireNonNull(constants$327.const$4,"av_new_program");
    }
    /**
     * {@snippet :
     * AVProgram* av_new_program(AVFormatContext* s, int id);
     * }
     */
    public static MemorySegment av_new_program(MemorySegment s, int id) {
        var mh$ = av_new_program$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_alloc_output_context2$MH() {
        return RuntimeHelper.requireNonNull(constants$327.const$5,"avformat_alloc_output_context2");
    }
    /**
     * {@snippet :
     * int avformat_alloc_output_context2(AVFormatContext** ctx, const AVOutputFormat* oformat, char* format_name, char* filename);
     * }
     */
    public static int avformat_alloc_output_context2(MemorySegment ctx, MemorySegment oformat, MemorySegment format_name, MemorySegment filename) {
        var mh$ = avformat_alloc_output_context2$MH();
        try {
            return (int)mh$.invokeExact(ctx, oformat, format_name, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_find_input_format$MH() {
        return RuntimeHelper.requireNonNull(constants$328.const$0,"av_find_input_format");
    }
    /**
     * {@snippet :
     * const AVInputFormat* av_find_input_format(char* short_name);
     * }
     */
    public static MemorySegment av_find_input_format(MemorySegment short_name) {
        var mh$ = av_find_input_format$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(short_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_probe_input_format$MH() {
        return RuntimeHelper.requireNonNull(constants$328.const$1,"av_probe_input_format");
    }
    /**
     * {@snippet :
     * const AVInputFormat* av_probe_input_format(const AVProbeData* pd, int is_opened);
     * }
     */
    public static MemorySegment av_probe_input_format(MemorySegment pd, int is_opened) {
        var mh$ = av_probe_input_format$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pd, is_opened);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_probe_input_format2$MH() {
        return RuntimeHelper.requireNonNull(constants$328.const$2,"av_probe_input_format2");
    }
    /**
     * {@snippet :
     * const AVInputFormat* av_probe_input_format2(const AVProbeData* pd, int is_opened, int* score_max);
     * }
     */
    public static MemorySegment av_probe_input_format2(MemorySegment pd, int is_opened, MemorySegment score_max) {
        var mh$ = av_probe_input_format2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pd, is_opened, score_max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_probe_input_format3$MH() {
        return RuntimeHelper.requireNonNull(constants$328.const$3,"av_probe_input_format3");
    }
    /**
     * {@snippet :
     * const AVInputFormat* av_probe_input_format3(const AVProbeData* pd, int is_opened, int* score_ret);
     * }
     */
    public static MemorySegment av_probe_input_format3(MemorySegment pd, int is_opened, MemorySegment score_ret) {
        var mh$ = av_probe_input_format3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pd, is_opened, score_ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_probe_input_buffer2$MH() {
        return RuntimeHelper.requireNonNull(constants$328.const$4,"av_probe_input_buffer2");
    }
    /**
     * {@snippet :
     * int av_probe_input_buffer2(AVIOContext* pb, const AVInputFormat** fmt, char* url, void* logctx, unsigned int offset, unsigned int max_probe_size);
     * }
     */
    public static int av_probe_input_buffer2(MemorySegment pb, MemorySegment fmt, MemorySegment url, MemorySegment logctx, int offset, int max_probe_size) {
        var mh$ = av_probe_input_buffer2$MH();
        try {
            return (int)mh$.invokeExact(pb, fmt, url, logctx, offset, max_probe_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_probe_input_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$328.const$5,"av_probe_input_buffer");
    }
    /**
     * {@snippet :
     * int av_probe_input_buffer(AVIOContext* pb, const AVInputFormat** fmt, char* url, void* logctx, unsigned int offset, unsigned int max_probe_size);
     * }
     */
    public static int av_probe_input_buffer(MemorySegment pb, MemorySegment fmt, MemorySegment url, MemorySegment logctx, int offset, int max_probe_size) {
        var mh$ = av_probe_input_buffer$MH();
        try {
            return (int)mh$.invokeExact(pb, fmt, url, logctx, offset, max_probe_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_open_input$MH() {
        return RuntimeHelper.requireNonNull(constants$329.const$0,"avformat_open_input");
    }
    /**
     * {@snippet :
     * int avformat_open_input(AVFormatContext** ps, char* url, const AVInputFormat* fmt, AVDictionary** options);
     * }
     */
    public static int avformat_open_input(MemorySegment ps, MemorySegment url, MemorySegment fmt, MemorySegment options) {
        var mh$ = avformat_open_input$MH();
        try {
            return (int)mh$.invokeExact(ps, url, fmt, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_find_stream_info$MH() {
        return RuntimeHelper.requireNonNull(constants$329.const$1,"avformat_find_stream_info");
    }
    /**
     * {@snippet :
     * int avformat_find_stream_info(AVFormatContext* ic, AVDictionary** options);
     * }
     */
    public static int avformat_find_stream_info(MemorySegment ic, MemorySegment options) {
        var mh$ = avformat_find_stream_info$MH();
        try {
            return (int)mh$.invokeExact(ic, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_find_program_from_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$329.const$3,"av_find_program_from_stream");
    }
    /**
     * {@snippet :
     * AVProgram* av_find_program_from_stream(AVFormatContext* ic, AVProgram* last, int s);
     * }
     */
    public static MemorySegment av_find_program_from_stream(MemorySegment ic, MemorySegment last, int s) {
        var mh$ = av_find_program_from_stream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ic, last, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_program_add_stream_index$MH() {
        return RuntimeHelper.requireNonNull(constants$329.const$4,"av_program_add_stream_index");
    }
    /**
     * {@snippet :
     * void av_program_add_stream_index(AVFormatContext* ac, int progid, unsigned int idx);
     * }
     */
    public static void av_program_add_stream_index(MemorySegment ac, int progid, int idx) {
        var mh$ = av_program_add_stream_index$MH();
        try {
            mh$.invokeExact(ac, progid, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_find_best_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$329.const$6,"av_find_best_stream");
    }
    /**
     * {@snippet :
     * int av_find_best_stream(AVFormatContext* ic, enum AVMediaType type, int wanted_stream_nb, int related_stream, const AVCodec** decoder_ret, int flags);
     * }
     */
    public static int av_find_best_stream(MemorySegment ic, int type, int wanted_stream_nb, int related_stream, MemorySegment decoder_ret, int flags) {
        var mh$ = av_find_best_stream$MH();
        try {
            return (int)mh$.invokeExact(ic, type, wanted_stream_nb, related_stream, decoder_ret, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_read_frame$MH() {
        return RuntimeHelper.requireNonNull(constants$330.const$0,"av_read_frame");
    }
    /**
     * {@snippet :
     * int av_read_frame(AVFormatContext* s, AVPacket* pkt);
     * }
     */
    public static int av_read_frame(MemorySegment s, MemorySegment pkt) {
        var mh$ = av_read_frame$MH();
        try {
            return (int)mh$.invokeExact(s, pkt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_seek_frame$MH() {
        return RuntimeHelper.requireNonNull(constants$330.const$1,"av_seek_frame");
    }
    /**
     * {@snippet :
     * int av_seek_frame(AVFormatContext* s, int stream_index, int64_t timestamp, int flags);
     * }
     */
    public static int av_seek_frame(MemorySegment s, int stream_index, long timestamp, int flags) {
        var mh$ = av_seek_frame$MH();
        try {
            return (int)mh$.invokeExact(s, stream_index, timestamp, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_seek_file$MH() {
        return RuntimeHelper.requireNonNull(constants$330.const$2,"avformat_seek_file");
    }
    /**
     * {@snippet :
     * int avformat_seek_file(AVFormatContext* s, int stream_index, int64_t min_ts, int64_t ts, int64_t max_ts, int flags);
     * }
     */
    public static int avformat_seek_file(MemorySegment s, int stream_index, long min_ts, long ts, long max_ts, int flags) {
        var mh$ = avformat_seek_file$MH();
        try {
            return (int)mh$.invokeExact(s, stream_index, min_ts, ts, max_ts, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_flush$MH() {
        return RuntimeHelper.requireNonNull(constants$330.const$3,"avformat_flush");
    }
    /**
     * {@snippet :
     * int avformat_flush(AVFormatContext* s);
     * }
     */
    public static int avformat_flush(MemorySegment s) {
        var mh$ = avformat_flush$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_read_play$MH() {
        return RuntimeHelper.requireNonNull(constants$330.const$4,"av_read_play");
    }
    /**
     * {@snippet :
     * int av_read_play(AVFormatContext* s);
     * }
     */
    public static int av_read_play(MemorySegment s) {
        var mh$ = av_read_play$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_read_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$330.const$5,"av_read_pause");
    }
    /**
     * {@snippet :
     * int av_read_pause(AVFormatContext* s);
     * }
     */
    public static int av_read_pause(MemorySegment s) {
        var mh$ = av_read_pause$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_close_input$MH() {
        return RuntimeHelper.requireNonNull(constants$331.const$0,"avformat_close_input");
    }
    /**
     * {@snippet :
     * void avformat_close_input(AVFormatContext** s);
     * }
     */
    public static void avformat_close_input(MemorySegment s) {
        var mh$ = avformat_close_input$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_write_header$MH() {
        return RuntimeHelper.requireNonNull(constants$331.const$1,"avformat_write_header");
    }
    /**
     * {@snippet :
     * int avformat_write_header(AVFormatContext* s, AVDictionary** options);
     * }
     */
    public static int avformat_write_header(MemorySegment s, MemorySegment options) {
        var mh$ = avformat_write_header$MH();
        try {
            return (int)mh$.invokeExact(s, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_init_output$MH() {
        return RuntimeHelper.requireNonNull(constants$331.const$2,"avformat_init_output");
    }
    /**
     * {@snippet :
     * int avformat_init_output(AVFormatContext* s, AVDictionary** options);
     * }
     */
    public static int avformat_init_output(MemorySegment s, MemorySegment options) {
        var mh$ = avformat_init_output$MH();
        try {
            return (int)mh$.invokeExact(s, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_write_frame$MH() {
        return RuntimeHelper.requireNonNull(constants$331.const$3,"av_write_frame");
    }
    /**
     * {@snippet :
     * int av_write_frame(AVFormatContext* s, AVPacket* pkt);
     * }
     */
    public static int av_write_frame(MemorySegment s, MemorySegment pkt) {
        var mh$ = av_write_frame$MH();
        try {
            return (int)mh$.invokeExact(s, pkt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_interleaved_write_frame$MH() {
        return RuntimeHelper.requireNonNull(constants$331.const$4,"av_interleaved_write_frame");
    }
    /**
     * {@snippet :
     * int av_interleaved_write_frame(AVFormatContext* s, AVPacket* pkt);
     * }
     */
    public static int av_interleaved_write_frame(MemorySegment s, MemorySegment pkt) {
        var mh$ = av_interleaved_write_frame$MH();
        try {
            return (int)mh$.invokeExact(s, pkt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_write_uncoded_frame$MH() {
        return RuntimeHelper.requireNonNull(constants$331.const$6,"av_write_uncoded_frame");
    }
    /**
     * {@snippet :
     * int av_write_uncoded_frame(AVFormatContext* s, int stream_index, AVFrame* frame);
     * }
     */
    public static int av_write_uncoded_frame(MemorySegment s, int stream_index, MemorySegment frame) {
        var mh$ = av_write_uncoded_frame$MH();
        try {
            return (int)mh$.invokeExact(s, stream_index, frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_interleaved_write_uncoded_frame$MH() {
        return RuntimeHelper.requireNonNull(constants$332.const$0,"av_interleaved_write_uncoded_frame");
    }
    /**
     * {@snippet :
     * int av_interleaved_write_uncoded_frame(AVFormatContext* s, int stream_index, AVFrame* frame);
     * }
     */
    public static int av_interleaved_write_uncoded_frame(MemorySegment s, int stream_index, MemorySegment frame) {
        var mh$ = av_interleaved_write_uncoded_frame$MH();
        try {
            return (int)mh$.invokeExact(s, stream_index, frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_write_uncoded_frame_query$MH() {
        return RuntimeHelper.requireNonNull(constants$332.const$1,"av_write_uncoded_frame_query");
    }
    /**
     * {@snippet :
     * int av_write_uncoded_frame_query(AVFormatContext* s, int stream_index);
     * }
     */
    public static int av_write_uncoded_frame_query(MemorySegment s, int stream_index) {
        var mh$ = av_write_uncoded_frame_query$MH();
        try {
            return (int)mh$.invokeExact(s, stream_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_write_trailer$MH() {
        return RuntimeHelper.requireNonNull(constants$332.const$2,"av_write_trailer");
    }
    /**
     * {@snippet :
     * int av_write_trailer(AVFormatContext* s);
     * }
     */
    public static int av_write_trailer(MemorySegment s) {
        var mh$ = av_write_trailer$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_guess_format$MH() {
        return RuntimeHelper.requireNonNull(constants$332.const$3,"av_guess_format");
    }
    /**
     * {@snippet :
     * const AVOutputFormat* av_guess_format(char* short_name, char* filename, char* mime_type);
     * }
     */
    public static MemorySegment av_guess_format(MemorySegment short_name, MemorySegment filename, MemorySegment mime_type) {
        var mh$ = av_guess_format$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(short_name, filename, mime_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_guess_codec$MH() {
        return RuntimeHelper.requireNonNull(constants$332.const$4,"av_guess_codec");
    }
    /**
     * {@snippet :
     * enum AVCodecID av_guess_codec(const AVOutputFormat* fmt, char* short_name, char* filename, char* mime_type, enum AVMediaType type);
     * }
     */
    public static int av_guess_codec(MemorySegment fmt, MemorySegment short_name, MemorySegment filename, MemorySegment mime_type, int type) {
        var mh$ = av_guess_codec$MH();
        try {
            return (int)mh$.invokeExact(fmt, short_name, filename, mime_type, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_output_timestamp$MH() {
        return RuntimeHelper.requireNonNull(constants$332.const$5,"av_get_output_timestamp");
    }
    /**
     * {@snippet :
     * int av_get_output_timestamp(struct AVFormatContext* s, int stream, int64_t* dts, int64_t* wall);
     * }
     */
    public static int av_get_output_timestamp(MemorySegment s, int stream, MemorySegment dts, MemorySegment wall) {
        var mh$ = av_get_output_timestamp$MH();
        try {
            return (int)mh$.invokeExact(s, stream, dts, wall);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hex_dump$MH() {
        return RuntimeHelper.requireNonNull(constants$333.const$0,"av_hex_dump");
    }
    /**
     * {@snippet :
     * void av_hex_dump(FILE* f, const uint8_t* buf, int size);
     * }
     */
    public static void av_hex_dump(MemorySegment f, MemorySegment buf, int size) {
        var mh$ = av_hex_dump$MH();
        try {
            mh$.invokeExact(f, buf, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hex_dump_log$MH() {
        return RuntimeHelper.requireNonNull(constants$333.const$1,"av_hex_dump_log");
    }
    /**
     * {@snippet :
     * void av_hex_dump_log(void* avcl, int level, const uint8_t* buf, int size);
     * }
     */
    public static void av_hex_dump_log(MemorySegment avcl, int level, MemorySegment buf, int size) {
        var mh$ = av_hex_dump_log$MH();
        try {
            mh$.invokeExact(avcl, level, buf, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_pkt_dump2$MH() {
        return RuntimeHelper.requireNonNull(constants$333.const$3,"av_pkt_dump2");
    }
    /**
     * {@snippet :
     * void av_pkt_dump2(FILE* f, const AVPacket* pkt, int dump_payload, const AVStream* st);
     * }
     */
    public static void av_pkt_dump2(MemorySegment f, MemorySegment pkt, int dump_payload, MemorySegment st) {
        var mh$ = av_pkt_dump2$MH();
        try {
            mh$.invokeExact(f, pkt, dump_payload, st);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_pkt_dump_log2$MH() {
        return RuntimeHelper.requireNonNull(constants$333.const$5,"av_pkt_dump_log2");
    }
    /**
     * {@snippet :
     * void av_pkt_dump_log2(void* avcl, int level, const AVPacket* pkt, int dump_payload, const AVStream* st);
     * }
     */
    public static void av_pkt_dump_log2(MemorySegment avcl, int level, MemorySegment pkt, int dump_payload, MemorySegment st) {
        var mh$ = av_pkt_dump_log2$MH();
        try {
            mh$.invokeExact(avcl, level, pkt, dump_payload, st);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_codec_get_id$MH() {
        return RuntimeHelper.requireNonNull(constants$334.const$0,"av_codec_get_id");
    }
    /**
     * {@snippet :
     * enum AVCodecID av_codec_get_id(struct AVCodecTag** tags, unsigned int tag);
     * }
     */
    public static int av_codec_get_id(MemorySegment tags, int tag) {
        var mh$ = av_codec_get_id$MH();
        try {
            return (int)mh$.invokeExact(tags, tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_codec_get_tag$MH() {
        return RuntimeHelper.requireNonNull(constants$334.const$1,"av_codec_get_tag");
    }
    /**
     * {@snippet :
     * unsigned int av_codec_get_tag(struct AVCodecTag** tags, enum AVCodecID id);
     * }
     */
    public static int av_codec_get_tag(MemorySegment tags, int id) {
        var mh$ = av_codec_get_tag$MH();
        try {
            return (int)mh$.invokeExact(tags, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_codec_get_tag2$MH() {
        return RuntimeHelper.requireNonNull(constants$334.const$2,"av_codec_get_tag2");
    }
    /**
     * {@snippet :
     * int av_codec_get_tag2(struct AVCodecTag** tags, enum AVCodecID id, unsigned int* tag);
     * }
     */
    public static int av_codec_get_tag2(MemorySegment tags, int id, MemorySegment tag) {
        var mh$ = av_codec_get_tag2$MH();
        try {
            return (int)mh$.invokeExact(tags, id, tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_find_default_stream_index$MH() {
        return RuntimeHelper.requireNonNull(constants$334.const$3,"av_find_default_stream_index");
    }
    /**
     * {@snippet :
     * int av_find_default_stream_index(AVFormatContext* s);
     * }
     */
    public static int av_find_default_stream_index(MemorySegment s) {
        var mh$ = av_find_default_stream_index$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_index_search_timestamp$MH() {
        return RuntimeHelper.requireNonNull(constants$334.const$4,"av_index_search_timestamp");
    }
    /**
     * {@snippet :
     * int av_index_search_timestamp(AVStream* st, int64_t timestamp, int flags);
     * }
     */
    public static int av_index_search_timestamp(MemorySegment st, long timestamp, int flags) {
        var mh$ = av_index_search_timestamp$MH();
        try {
            return (int)mh$.invokeExact(st, timestamp, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_index_get_entries_count$MH() {
        return RuntimeHelper.requireNonNull(constants$334.const$5,"avformat_index_get_entries_count");
    }
    /**
     * {@snippet :
     * int avformat_index_get_entries_count(const AVStream* st);
     * }
     */
    public static int avformat_index_get_entries_count(MemorySegment st) {
        var mh$ = avformat_index_get_entries_count$MH();
        try {
            return (int)mh$.invokeExact(st);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_index_get_entry$MH() {
        return RuntimeHelper.requireNonNull(constants$335.const$0,"avformat_index_get_entry");
    }
    /**
     * {@snippet :
     * const AVIndexEntry* avformat_index_get_entry(AVStream* st, int idx);
     * }
     */
    public static MemorySegment avformat_index_get_entry(MemorySegment st, int idx) {
        var mh$ = avformat_index_get_entry$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(st, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_index_get_entry_from_timestamp$MH() {
        return RuntimeHelper.requireNonNull(constants$335.const$2,"avformat_index_get_entry_from_timestamp");
    }
    /**
     * {@snippet :
     * const AVIndexEntry* avformat_index_get_entry_from_timestamp(AVStream* st, int64_t wanted_timestamp, int flags);
     * }
     */
    public static MemorySegment avformat_index_get_entry_from_timestamp(MemorySegment st, long wanted_timestamp, int flags) {
        var mh$ = avformat_index_get_entry_from_timestamp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(st, wanted_timestamp, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_add_index_entry$MH() {
        return RuntimeHelper.requireNonNull(constants$335.const$4,"av_add_index_entry");
    }
    /**
     * {@snippet :
     * int av_add_index_entry(AVStream* st, int64_t pos, int64_t timestamp, int size, int distance, int flags);
     * }
     */
    public static int av_add_index_entry(MemorySegment st, long pos, long timestamp, int size, int distance, int flags) {
        var mh$ = av_add_index_entry$MH();
        try {
            return (int)mh$.invokeExact(st, pos, timestamp, size, distance, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_url_split$MH() {
        return RuntimeHelper.requireNonNull(constants$335.const$6,"av_url_split");
    }
    /**
     * {@snippet :
     * void av_url_split(char* proto, int proto_size, char* authorization, int authorization_size, char* hostname, int hostname_size, int* port_ptr, char* path, int path_size, char* url);
     * }
     */
    public static void av_url_split(MemorySegment proto, int proto_size, MemorySegment authorization, int authorization_size, MemorySegment hostname, int hostname_size, MemorySegment port_ptr, MemorySegment path, int path_size, MemorySegment url) {
        var mh$ = av_url_split$MH();
        try {
            mh$.invokeExact(proto, proto_size, authorization, authorization_size, hostname, hostname_size, port_ptr, path, path_size, url);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_dump_format$MH() {
        return RuntimeHelper.requireNonNull(constants$336.const$0,"av_dump_format");
    }
    /**
     * {@snippet :
     * void av_dump_format(AVFormatContext* ic, int index, char* url, int is_output);
     * }
     */
    public static void av_dump_format(MemorySegment ic, int index, MemorySegment url, int is_output) {
        var mh$ = av_dump_format$MH();
        try {
            mh$.invokeExact(ic, index, url, is_output);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_frame_filename2$MH() {
        return RuntimeHelper.requireNonNull(constants$336.const$2,"av_get_frame_filename2");
    }
    /**
     * {@snippet :
     * int av_get_frame_filename2(char* buf, int buf_size, char* path, int number, int flags);
     * }
     */
    public static int av_get_frame_filename2(MemorySegment buf, int buf_size, MemorySegment path, int number, int flags) {
        var mh$ = av_get_frame_filename2$MH();
        try {
            return (int)mh$.invokeExact(buf, buf_size, path, number, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_frame_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$336.const$3,"av_get_frame_filename");
    }
    /**
     * {@snippet :
     * int av_get_frame_filename(char* buf, int buf_size, char* path, int number);
     * }
     */
    public static int av_get_frame_filename(MemorySegment buf, int buf_size, MemorySegment path, int number) {
        var mh$ = av_get_frame_filename$MH();
        try {
            return (int)mh$.invokeExact(buf, buf_size, path, number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_filename_number_test$MH() {
        return RuntimeHelper.requireNonNull(constants$336.const$4,"av_filename_number_test");
    }
    /**
     * {@snippet :
     * int av_filename_number_test(char* filename);
     * }
     */
    public static int av_filename_number_test(MemorySegment filename) {
        var mh$ = av_filename_number_test$MH();
        try {
            return (int)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_sdp_create$MH() {
        return RuntimeHelper.requireNonNull(constants$336.const$5,"av_sdp_create");
    }
    /**
     * {@snippet :
     * int av_sdp_create(AVFormatContext* ac[], int n_files, char* buf, int size);
     * }
     */
    public static int av_sdp_create(MemorySegment ac, int n_files, MemorySegment buf, int size) {
        var mh$ = av_sdp_create$MH();
        try {
            return (int)mh$.invokeExact(ac, n_files, buf, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_match_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$337.const$0,"av_match_ext");
    }
    /**
     * {@snippet :
     * int av_match_ext(char* filename, char* extensions);
     * }
     */
    public static int av_match_ext(MemorySegment filename, MemorySegment extensions) {
        var mh$ = av_match_ext$MH();
        try {
            return (int)mh$.invokeExact(filename, extensions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_query_codec$MH() {
        return RuntimeHelper.requireNonNull(constants$337.const$2,"avformat_query_codec");
    }
    /**
     * {@snippet :
     * int avformat_query_codec(const AVOutputFormat* ofmt, enum AVCodecID codec_id, int std_compliance);
     * }
     */
    public static int avformat_query_codec(MemorySegment ofmt, int codec_id, int std_compliance) {
        var mh$ = avformat_query_codec$MH();
        try {
            return (int)mh$.invokeExact(ofmt, codec_id, std_compliance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_get_riff_video_tags$MH() {
        return RuntimeHelper.requireNonNull(constants$337.const$3,"avformat_get_riff_video_tags");
    }
    /**
     * {@snippet :
     * struct AVCodecTag* avformat_get_riff_video_tags();
     * }
     */
    public static MemorySegment avformat_get_riff_video_tags() {
        var mh$ = avformat_get_riff_video_tags$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_get_riff_audio_tags$MH() {
        return RuntimeHelper.requireNonNull(constants$337.const$4,"avformat_get_riff_audio_tags");
    }
    /**
     * {@snippet :
     * struct AVCodecTag* avformat_get_riff_audio_tags();
     * }
     */
    public static MemorySegment avformat_get_riff_audio_tags() {
        var mh$ = avformat_get_riff_audio_tags$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_get_mov_video_tags$MH() {
        return RuntimeHelper.requireNonNull(constants$337.const$5,"avformat_get_mov_video_tags");
    }
    /**
     * {@snippet :
     * struct AVCodecTag* avformat_get_mov_video_tags();
     * }
     */
    public static MemorySegment avformat_get_mov_video_tags() {
        var mh$ = avformat_get_mov_video_tags$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_get_mov_audio_tags$MH() {
        return RuntimeHelper.requireNonNull(constants$338.const$0,"avformat_get_mov_audio_tags");
    }
    /**
     * {@snippet :
     * struct AVCodecTag* avformat_get_mov_audio_tags();
     * }
     */
    public static MemorySegment avformat_get_mov_audio_tags() {
        var mh$ = avformat_get_mov_audio_tags$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_guess_sample_aspect_ratio$MH() {
        return RuntimeHelper.requireNonNull(constants$338.const$2,"av_guess_sample_aspect_ratio");
    }
    /**
     * {@snippet :
     * AVRational av_guess_sample_aspect_ratio(AVFormatContext* format, AVStream* stream, AVFrame* frame);
     * }
     */
    public static MemorySegment av_guess_sample_aspect_ratio(SegmentAllocator allocator, MemorySegment format, MemorySegment stream, MemorySegment frame) {
        var mh$ = av_guess_sample_aspect_ratio$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, format, stream, frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_guess_frame_rate$MH() {
        return RuntimeHelper.requireNonNull(constants$338.const$3,"av_guess_frame_rate");
    }
    /**
     * {@snippet :
     * AVRational av_guess_frame_rate(AVFormatContext* ctx, AVStream* stream, AVFrame* frame);
     * }
     */
    public static MemorySegment av_guess_frame_rate(SegmentAllocator allocator, MemorySegment ctx, MemorySegment stream, MemorySegment frame) {
        var mh$ = av_guess_frame_rate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, stream, frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_match_stream_specifier$MH() {
        return RuntimeHelper.requireNonNull(constants$338.const$4,"avformat_match_stream_specifier");
    }
    /**
     * {@snippet :
     * int avformat_match_stream_specifier(AVFormatContext* s, AVStream* st, char* spec);
     * }
     */
    public static int avformat_match_stream_specifier(MemorySegment s, MemorySegment st, MemorySegment spec) {
        var mh$ = avformat_match_stream_specifier$MH();
        try {
            return (int)mh$.invokeExact(s, st, spec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle avformat_queue_attached_pictures$MH() {
        return RuntimeHelper.requireNonNull(constants$338.const$5,"avformat_queue_attached_pictures");
    }
    /**
     * {@snippet :
     * int avformat_queue_attached_pictures(AVFormatContext* s);
     * }
     */
    public static int avformat_queue_attached_pictures(MemorySegment s) {
        var mh$ = avformat_queue_attached_pictures$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVTimebaseSource.AVFMT_TBCF_AUTO = -1;
     * }
     */
    public static int AVFMT_TBCF_AUTO() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum AVTimebaseSource.AVFMT_TBCF_DECODER = 0;
     * }
     */
    public static int AVFMT_TBCF_DECODER() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVTimebaseSource.AVFMT_TBCF_DEMUXER = 1;
     * }
     */
    public static int AVFMT_TBCF_DEMUXER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVTimebaseSource.AVFMT_TBCF_R_FRAMERATE = 2;
     * }
     */
    public static int AVFMT_TBCF_R_FRAMERATE() {
        return (int)2L;
    }
    public static MethodHandle avformat_transfer_internal_stream_timing_info$MH() {
        return RuntimeHelper.requireNonNull(constants$339.const$0,"avformat_transfer_internal_stream_timing_info");
    }
    /**
     * {@snippet :
     * int avformat_transfer_internal_stream_timing_info(const AVOutputFormat* ofmt, AVStream* ost, const AVStream* ist, enum AVTimebaseSource copy_tb);
     * }
     */
    public static int avformat_transfer_internal_stream_timing_info(MemorySegment ofmt, MemorySegment ost, MemorySegment ist, int copy_tb) {
        var mh$ = avformat_transfer_internal_stream_timing_info$MH();
        try {
            return (int)mh$.invokeExact(ofmt, ost, ist, copy_tb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_stream_get_codec_timebase$MH() {
        return RuntimeHelper.requireNonNull(constants$339.const$2,"av_stream_get_codec_timebase");
    }
    /**
     * {@snippet :
     * AVRational av_stream_get_codec_timebase(const AVStream* st);
     * }
     */
    public static MemorySegment av_stream_get_codec_timebase(SegmentAllocator allocator, MemorySegment st) {
        var mh$ = av_stream_get_codec_timebase$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, st);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_bits_per_pixel$MH() {
        return RuntimeHelper.requireNonNull(constants$341.const$4,"av_get_bits_per_pixel");
    }
    /**
     * {@snippet :
     * int av_get_bits_per_pixel(const AVPixFmtDescriptor* pixdesc);
     * }
     */
    public static int av_get_bits_per_pixel(MemorySegment pixdesc) {
        var mh$ = av_get_bits_per_pixel$MH();
        try {
            return (int)mh$.invokeExact(pixdesc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_padded_bits_per_pixel$MH() {
        return RuntimeHelper.requireNonNull(constants$341.const$5,"av_get_padded_bits_per_pixel");
    }
    /**
     * {@snippet :
     * int av_get_padded_bits_per_pixel(const AVPixFmtDescriptor* pixdesc);
     * }
     */
    public static int av_get_padded_bits_per_pixel(MemorySegment pixdesc) {
        var mh$ = av_get_padded_bits_per_pixel$MH();
        try {
            return (int)mh$.invokeExact(pixdesc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_pix_fmt_desc_get$MH() {
        return RuntimeHelper.requireNonNull(constants$342.const$0,"av_pix_fmt_desc_get");
    }
    /**
     * {@snippet :
     * const AVPixFmtDescriptor* av_pix_fmt_desc_get(enum AVPixelFormat pix_fmt);
     * }
     */
    public static MemorySegment av_pix_fmt_desc_get(int pix_fmt) {
        var mh$ = av_pix_fmt_desc_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pix_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_pix_fmt_desc_next$MH() {
        return RuntimeHelper.requireNonNull(constants$342.const$1,"av_pix_fmt_desc_next");
    }
    /**
     * {@snippet :
     * const AVPixFmtDescriptor* av_pix_fmt_desc_next(const AVPixFmtDescriptor* prev);
     * }
     */
    public static MemorySegment av_pix_fmt_desc_next(MemorySegment prev) {
        var mh$ = av_pix_fmt_desc_next$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(prev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_pix_fmt_desc_get_id$MH() {
        return RuntimeHelper.requireNonNull(constants$342.const$2,"av_pix_fmt_desc_get_id");
    }
    /**
     * {@snippet :
     * enum AVPixelFormat av_pix_fmt_desc_get_id(const AVPixFmtDescriptor* desc);
     * }
     */
    public static int av_pix_fmt_desc_get_id(MemorySegment desc) {
        var mh$ = av_pix_fmt_desc_get_id$MH();
        try {
            return (int)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_pix_fmt_get_chroma_sub_sample$MH() {
        return RuntimeHelper.requireNonNull(constants$342.const$3,"av_pix_fmt_get_chroma_sub_sample");
    }
    /**
     * {@snippet :
     * int av_pix_fmt_get_chroma_sub_sample(enum AVPixelFormat pix_fmt, int* h_shift, int* v_shift);
     * }
     */
    public static int av_pix_fmt_get_chroma_sub_sample(int pix_fmt, MemorySegment h_shift, MemorySegment v_shift) {
        var mh$ = av_pix_fmt_get_chroma_sub_sample$MH();
        try {
            return (int)mh$.invokeExact(pix_fmt, h_shift, v_shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_pix_fmt_count_planes$MH() {
        return RuntimeHelper.requireNonNull(constants$342.const$4,"av_pix_fmt_count_planes");
    }
    /**
     * {@snippet :
     * int av_pix_fmt_count_planes(enum AVPixelFormat pix_fmt);
     * }
     */
    public static int av_pix_fmt_count_planes(int pix_fmt) {
        var mh$ = av_pix_fmt_count_planes$MH();
        try {
            return (int)mh$.invokeExact(pix_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_color_range_name$MH() {
        return RuntimeHelper.requireNonNull(constants$342.const$5,"av_color_range_name");
    }
    /**
     * {@snippet :
     * char* av_color_range_name(enum AVColorRange range);
     * }
     */
    public static MemorySegment av_color_range_name(int range) {
        var mh$ = av_color_range_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_color_range_from_name$MH() {
        return RuntimeHelper.requireNonNull(constants$343.const$0,"av_color_range_from_name");
    }
    /**
     * {@snippet :
     * int av_color_range_from_name(char* name);
     * }
     */
    public static int av_color_range_from_name(MemorySegment name) {
        var mh$ = av_color_range_from_name$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_color_primaries_name$MH() {
        return RuntimeHelper.requireNonNull(constants$343.const$1,"av_color_primaries_name");
    }
    /**
     * {@snippet :
     * char* av_color_primaries_name(enum AVColorPrimaries primaries);
     * }
     */
    public static MemorySegment av_color_primaries_name(int primaries) {
        var mh$ = av_color_primaries_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(primaries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_color_primaries_from_name$MH() {
        return RuntimeHelper.requireNonNull(constants$343.const$2,"av_color_primaries_from_name");
    }
    /**
     * {@snippet :
     * int av_color_primaries_from_name(char* name);
     * }
     */
    public static int av_color_primaries_from_name(MemorySegment name) {
        var mh$ = av_color_primaries_from_name$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_color_transfer_name$MH() {
        return RuntimeHelper.requireNonNull(constants$343.const$3,"av_color_transfer_name");
    }
    /**
     * {@snippet :
     * char* av_color_transfer_name(enum AVColorTransferCharacteristic transfer);
     * }
     */
    public static MemorySegment av_color_transfer_name(int transfer) {
        var mh$ = av_color_transfer_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(transfer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_color_transfer_from_name$MH() {
        return RuntimeHelper.requireNonNull(constants$343.const$4,"av_color_transfer_from_name");
    }
    /**
     * {@snippet :
     * int av_color_transfer_from_name(char* name);
     * }
     */
    public static int av_color_transfer_from_name(MemorySegment name) {
        var mh$ = av_color_transfer_from_name$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_color_space_name$MH() {
        return RuntimeHelper.requireNonNull(constants$343.const$5,"av_color_space_name");
    }
    /**
     * {@snippet :
     * char* av_color_space_name(enum AVColorSpace space);
     * }
     */
    public static MemorySegment av_color_space_name(int space) {
        var mh$ = av_color_space_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(space);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_color_space_from_name$MH() {
        return RuntimeHelper.requireNonNull(constants$344.const$0,"av_color_space_from_name");
    }
    /**
     * {@snippet :
     * int av_color_space_from_name(char* name);
     * }
     */
    public static int av_color_space_from_name(MemorySegment name) {
        var mh$ = av_color_space_from_name$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_chroma_location_name$MH() {
        return RuntimeHelper.requireNonNull(constants$344.const$1,"av_chroma_location_name");
    }
    /**
     * {@snippet :
     * char* av_chroma_location_name(enum AVChromaLocation location);
     * }
     */
    public static MemorySegment av_chroma_location_name(int location) {
        var mh$ = av_chroma_location_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_chroma_location_from_name$MH() {
        return RuntimeHelper.requireNonNull(constants$344.const$2,"av_chroma_location_from_name");
    }
    /**
     * {@snippet :
     * int av_chroma_location_from_name(char* name);
     * }
     */
    public static int av_chroma_location_from_name(MemorySegment name) {
        var mh$ = av_chroma_location_from_name$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_pix_fmt$MH() {
        return RuntimeHelper.requireNonNull(constants$344.const$3,"av_get_pix_fmt");
    }
    /**
     * {@snippet :
     * enum AVPixelFormat av_get_pix_fmt(char* name);
     * }
     */
    public static int av_get_pix_fmt(MemorySegment name) {
        var mh$ = av_get_pix_fmt$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_pix_fmt_name$MH() {
        return RuntimeHelper.requireNonNull(constants$344.const$4,"av_get_pix_fmt_name");
    }
    /**
     * {@snippet :
     * char* av_get_pix_fmt_name(enum AVPixelFormat pix_fmt);
     * }
     */
    public static MemorySegment av_get_pix_fmt_name(int pix_fmt) {
        var mh$ = av_get_pix_fmt_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pix_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_pix_fmt_string$MH() {
        return RuntimeHelper.requireNonNull(constants$344.const$5,"av_get_pix_fmt_string");
    }
    /**
     * {@snippet :
     * char* av_get_pix_fmt_string(char* buf, int buf_size, enum AVPixelFormat pix_fmt);
     * }
     */
    public static MemorySegment av_get_pix_fmt_string(MemorySegment buf, int buf_size, int pix_fmt) {
        var mh$ = av_get_pix_fmt_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buf, buf_size, pix_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_read_image_line2$MH() {
        return RuntimeHelper.requireNonNull(constants$345.const$1,"av_read_image_line2");
    }
    /**
     * {@snippet :
     * void av_read_image_line2(void* dst, const uint8_t* data[4], int linesize[4], const AVPixFmtDescriptor* desc, int x, int y, int c, int w, int read_pal_component, int dst_element_size);
     * }
     */
    public static void av_read_image_line2(MemorySegment dst, MemorySegment data, MemorySegment linesize, MemorySegment desc, int x, int y, int c, int w, int read_pal_component, int dst_element_size) {
        var mh$ = av_read_image_line2$MH();
        try {
            mh$.invokeExact(dst, data, linesize, desc, x, y, c, w, read_pal_component, dst_element_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_read_image_line$MH() {
        return RuntimeHelper.requireNonNull(constants$345.const$3,"av_read_image_line");
    }
    /**
     * {@snippet :
     * void av_read_image_line(uint16_t* dst, const uint8_t* data[4], int linesize[4], const AVPixFmtDescriptor* desc, int x, int y, int c, int w, int read_pal_component);
     * }
     */
    public static void av_read_image_line(MemorySegment dst, MemorySegment data, MemorySegment linesize, MemorySegment desc, int x, int y, int c, int w, int read_pal_component) {
        var mh$ = av_read_image_line$MH();
        try {
            mh$.invokeExact(dst, data, linesize, desc, x, y, c, w, read_pal_component);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_write_image_line2$MH() {
        return RuntimeHelper.requireNonNull(constants$345.const$4,"av_write_image_line2");
    }
    /**
     * {@snippet :
     * void av_write_image_line2(void* src, uint8_t* data[4], int linesize[4], const AVPixFmtDescriptor* desc, int x, int y, int c, int w, int src_element_size);
     * }
     */
    public static void av_write_image_line2(MemorySegment src, MemorySegment data, MemorySegment linesize, MemorySegment desc, int x, int y, int c, int w, int src_element_size) {
        var mh$ = av_write_image_line2$MH();
        try {
            mh$.invokeExact(src, data, linesize, desc, x, y, c, w, src_element_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_write_image_line$MH() {
        return RuntimeHelper.requireNonNull(constants$345.const$6,"av_write_image_line");
    }
    /**
     * {@snippet :
     * void av_write_image_line(const uint16_t* src, uint8_t* data[4], int linesize[4], const AVPixFmtDescriptor* desc, int x, int y, int c, int w);
     * }
     */
    public static void av_write_image_line(MemorySegment src, MemorySegment data, MemorySegment linesize, MemorySegment desc, int x, int y, int c, int w) {
        var mh$ = av_write_image_line$MH();
        try {
            mh$.invokeExact(src, data, linesize, desc, x, y, c, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_pix_fmt_swap_endianness$MH() {
        return RuntimeHelper.requireNonNull(constants$346.const$0,"av_pix_fmt_swap_endianness");
    }
    /**
     * {@snippet :
     * enum AVPixelFormat av_pix_fmt_swap_endianness(enum AVPixelFormat pix_fmt);
     * }
     */
    public static int av_pix_fmt_swap_endianness(int pix_fmt) {
        var mh$ = av_pix_fmt_swap_endianness$MH();
        try {
            return (int)mh$.invokeExact(pix_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_pix_fmt_loss$MH() {
        return RuntimeHelper.requireNonNull(constants$346.const$2,"av_get_pix_fmt_loss");
    }
    /**
     * {@snippet :
     * int av_get_pix_fmt_loss(enum AVPixelFormat dst_pix_fmt, enum AVPixelFormat src_pix_fmt, int has_alpha);
     * }
     */
    public static int av_get_pix_fmt_loss(int dst_pix_fmt, int src_pix_fmt, int has_alpha) {
        var mh$ = av_get_pix_fmt_loss$MH();
        try {
            return (int)mh$.invokeExact(dst_pix_fmt, src_pix_fmt, has_alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_find_best_pix_fmt_of_2$MH() {
        return RuntimeHelper.requireNonNull(constants$346.const$4,"av_find_best_pix_fmt_of_2");
    }
    /**
     * {@snippet :
     * enum AVPixelFormat av_find_best_pix_fmt_of_2(enum AVPixelFormat dst_pix_fmt1, enum AVPixelFormat dst_pix_fmt2, enum AVPixelFormat src_pix_fmt, int has_alpha, int* loss_ptr);
     * }
     */
    public static int av_find_best_pix_fmt_of_2(int dst_pix_fmt1, int dst_pix_fmt2, int src_pix_fmt, int has_alpha, MemorySegment loss_ptr) {
        var mh$ = av_find_best_pix_fmt_of_2$MH();
        try {
            return (int)mh$.invokeExact(dst_pix_fmt1, dst_pix_fmt2, src_pix_fmt, has_alpha, loss_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_fill_max_pixsteps$MH() {
        return RuntimeHelper.requireNonNull(constants$346.const$5,"av_image_fill_max_pixsteps");
    }
    /**
     * {@snippet :
     * void av_image_fill_max_pixsteps(int max_pixsteps[4], int max_pixstep_comps[4], const AVPixFmtDescriptor* pixdesc);
     * }
     */
    public static void av_image_fill_max_pixsteps(MemorySegment max_pixsteps, MemorySegment max_pixstep_comps, MemorySegment pixdesc) {
        var mh$ = av_image_fill_max_pixsteps$MH();
        try {
            mh$.invokeExact(max_pixsteps, max_pixstep_comps, pixdesc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_get_linesize$MH() {
        return RuntimeHelper.requireNonNull(constants$347.const$0,"av_image_get_linesize");
    }
    /**
     * {@snippet :
     * int av_image_get_linesize(enum AVPixelFormat pix_fmt, int width, int plane);
     * }
     */
    public static int av_image_get_linesize(int pix_fmt, int width, int plane) {
        var mh$ = av_image_get_linesize$MH();
        try {
            return (int)mh$.invokeExact(pix_fmt, width, plane);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_fill_linesizes$MH() {
        return RuntimeHelper.requireNonNull(constants$347.const$1,"av_image_fill_linesizes");
    }
    /**
     * {@snippet :
     * int av_image_fill_linesizes(int linesizes[4], enum AVPixelFormat pix_fmt, int width);
     * }
     */
    public static int av_image_fill_linesizes(MemorySegment linesizes, int pix_fmt, int width) {
        var mh$ = av_image_fill_linesizes$MH();
        try {
            return (int)mh$.invokeExact(linesizes, pix_fmt, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_fill_plane_sizes$MH() {
        return RuntimeHelper.requireNonNull(constants$347.const$2,"av_image_fill_plane_sizes");
    }
    /**
     * {@snippet :
     * int av_image_fill_plane_sizes(size_t size[4], enum AVPixelFormat pix_fmt, int height, const ptrdiff_t linesizes[4]);
     * }
     */
    public static int av_image_fill_plane_sizes(MemorySegment size, int pix_fmt, int height, MemorySegment linesizes) {
        var mh$ = av_image_fill_plane_sizes$MH();
        try {
            return (int)mh$.invokeExact(size, pix_fmt, height, linesizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_fill_pointers$MH() {
        return RuntimeHelper.requireNonNull(constants$347.const$4,"av_image_fill_pointers");
    }
    /**
     * {@snippet :
     * int av_image_fill_pointers(uint8_t* data[4], enum AVPixelFormat pix_fmt, int height, uint8_t* ptr, int linesizes[4]);
     * }
     */
    public static int av_image_fill_pointers(MemorySegment data, int pix_fmt, int height, MemorySegment ptr, MemorySegment linesizes) {
        var mh$ = av_image_fill_pointers$MH();
        try {
            return (int)mh$.invokeExact(data, pix_fmt, height, ptr, linesizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$347.const$5,"av_image_alloc");
    }
    /**
     * {@snippet :
     * int av_image_alloc(uint8_t* pointers[4], int linesizes[4], int w, int h, enum AVPixelFormat pix_fmt, int align);
     * }
     */
    public static int av_image_alloc(MemorySegment pointers, MemorySegment linesizes, int w, int h, int pix_fmt, int align) {
        var mh$ = av_image_alloc$MH();
        try {
            return (int)mh$.invokeExact(pointers, linesizes, w, h, pix_fmt, align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_copy_plane$MH() {
        return RuntimeHelper.requireNonNull(constants$348.const$1,"av_image_copy_plane");
    }
    /**
     * {@snippet :
     * void av_image_copy_plane(uint8_t* dst, int dst_linesize, const uint8_t* src, int src_linesize, int bytewidth, int height);
     * }
     */
    public static void av_image_copy_plane(MemorySegment dst, int dst_linesize, MemorySegment src, int src_linesize, int bytewidth, int height) {
        var mh$ = av_image_copy_plane$MH();
        try {
            mh$.invokeExact(dst, dst_linesize, src, src_linesize, bytewidth, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_copy_plane_uc_from$MH() {
        return RuntimeHelper.requireNonNull(constants$348.const$3,"av_image_copy_plane_uc_from");
    }
    /**
     * {@snippet :
     * void av_image_copy_plane_uc_from(uint8_t* dst, ptrdiff_t dst_linesize, const uint8_t* src, ptrdiff_t src_linesize, ptrdiff_t bytewidth, int height);
     * }
     */
    public static void av_image_copy_plane_uc_from(MemorySegment dst, long dst_linesize, MemorySegment src, long src_linesize, long bytewidth, int height) {
        var mh$ = av_image_copy_plane_uc_from$MH();
        try {
            mh$.invokeExact(dst, dst_linesize, src, src_linesize, bytewidth, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$348.const$5,"av_image_copy");
    }
    /**
     * {@snippet :
     * void av_image_copy(uint8_t* dst_data[4], int dst_linesizes[4], const uint8_t* src_data[4], int src_linesizes[4], enum AVPixelFormat pix_fmt, int width, int height);
     * }
     */
    public static void av_image_copy(MemorySegment dst_data, MemorySegment dst_linesizes, MemorySegment src_data, MemorySegment src_linesizes, int pix_fmt, int width, int height) {
        var mh$ = av_image_copy$MH();
        try {
            mh$.invokeExact(dst_data, dst_linesizes, src_data, src_linesizes, pix_fmt, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_copy_uc_from$MH() {
        return RuntimeHelper.requireNonNull(constants$349.const$0,"av_image_copy_uc_from");
    }
    /**
     * {@snippet :
     * void av_image_copy_uc_from(uint8_t* dst_data[4], const ptrdiff_t dst_linesizes[4], const uint8_t* src_data[4], const ptrdiff_t src_linesizes[4], enum AVPixelFormat pix_fmt, int width, int height);
     * }
     */
    public static void av_image_copy_uc_from(MemorySegment dst_data, MemorySegment dst_linesizes, MemorySegment src_data, MemorySegment src_linesizes, int pix_fmt, int width, int height) {
        var mh$ = av_image_copy_uc_from$MH();
        try {
            mh$.invokeExact(dst_data, dst_linesizes, src_data, src_linesizes, pix_fmt, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_fill_arrays$MH() {
        return RuntimeHelper.requireNonNull(constants$349.const$1,"av_image_fill_arrays");
    }
    /**
     * {@snippet :
     * int av_image_fill_arrays(uint8_t* dst_data[4], int dst_linesize[4], const uint8_t* src, enum AVPixelFormat pix_fmt, int width, int height, int align);
     * }
     */
    public static int av_image_fill_arrays(MemorySegment dst_data, MemorySegment dst_linesize, MemorySegment src, int pix_fmt, int width, int height, int align) {
        var mh$ = av_image_fill_arrays$MH();
        try {
            return (int)mh$.invokeExact(dst_data, dst_linesize, src, pix_fmt, width, height, align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_get_buffer_size$MH() {
        return RuntimeHelper.requireNonNull(constants$349.const$3,"av_image_get_buffer_size");
    }
    /**
     * {@snippet :
     * int av_image_get_buffer_size(enum AVPixelFormat pix_fmt, int width, int height, int align);
     * }
     */
    public static int av_image_get_buffer_size(int pix_fmt, int width, int height, int align) {
        var mh$ = av_image_get_buffer_size$MH();
        try {
            return (int)mh$.invokeExact(pix_fmt, width, height, align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_copy_to_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$349.const$5,"av_image_copy_to_buffer");
    }
    /**
     * {@snippet :
     * int av_image_copy_to_buffer(uint8_t* dst, int dst_size, const uint8_t* src_data[4], int src_linesize[4], enum AVPixelFormat pix_fmt, int width, int height, int align);
     * }
     */
    public static int av_image_copy_to_buffer(MemorySegment dst, int dst_size, MemorySegment src_data, MemorySegment src_linesize, int pix_fmt, int width, int height, int align) {
        var mh$ = av_image_copy_to_buffer$MH();
        try {
            return (int)mh$.invokeExact(dst, dst_size, src_data, src_linesize, pix_fmt, width, height, align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_check_size$MH() {
        return RuntimeHelper.requireNonNull(constants$350.const$1,"av_image_check_size");
    }
    /**
     * {@snippet :
     * int av_image_check_size(unsigned int w, unsigned int h, int log_offset, void* log_ctx);
     * }
     */
    public static int av_image_check_size(int w, int h, int log_offset, MemorySegment log_ctx) {
        var mh$ = av_image_check_size$MH();
        try {
            return (int)mh$.invokeExact(w, h, log_offset, log_ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_check_size2$MH() {
        return RuntimeHelper.requireNonNull(constants$350.const$3,"av_image_check_size2");
    }
    /**
     * {@snippet :
     * int av_image_check_size2(unsigned int w, unsigned int h, int64_t max_pixels, enum AVPixelFormat pix_fmt, int log_offset, void* log_ctx);
     * }
     */
    public static int av_image_check_size2(int w, int h, long max_pixels, int pix_fmt, int log_offset, MemorySegment log_ctx) {
        var mh$ = av_image_check_size2$MH();
        try {
            return (int)mh$.invokeExact(w, h, max_pixels, pix_fmt, log_offset, log_ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_check_sar$MH() {
        return RuntimeHelper.requireNonNull(constants$350.const$5,"av_image_check_sar");
    }
    /**
     * {@snippet :
     * int av_image_check_sar(unsigned int w, unsigned int h, AVRational sar);
     * }
     */
    public static int av_image_check_sar(int w, int h, MemorySegment sar) {
        var mh$ = av_image_check_sar$MH();
        try {
            return (int)mh$.invokeExact(w, h, sar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_image_fill_black$MH() {
        return RuntimeHelper.requireNonNull(constants$351.const$0,"av_image_fill_black");
    }
    /**
     * {@snippet :
     * int av_image_fill_black(uint8_t* dst_data[4], const ptrdiff_t dst_linesize[4], enum AVPixelFormat pix_fmt, enum AVColorRange range, int width, int height);
     * }
     */
    public static int av_image_fill_black(MemorySegment dst_data, MemorySegment dst_linesize, int pix_fmt, int range, int width, int height) {
        var mh$ = av_image_fill_black$MH();
        try {
            return (int)mh$.invokeExact(dst_data, dst_linesize, pix_fmt, range, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swscale_version$MH() {
        return RuntimeHelper.requireNonNull(constants$351.const$1,"swscale_version");
    }
    /**
     * {@snippet :
     * unsigned int swscale_version();
     * }
     */
    public static int swscale_version() {
        var mh$ = swscale_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swscale_configuration$MH() {
        return RuntimeHelper.requireNonNull(constants$351.const$2,"swscale_configuration");
    }
    /**
     * {@snippet :
     * char* swscale_configuration();
     * }
     */
    public static MemorySegment swscale_configuration() {
        var mh$ = swscale_configuration$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swscale_license$MH() {
        return RuntimeHelper.requireNonNull(constants$351.const$3,"swscale_license");
    }
    /**
     * {@snippet :
     * char* swscale_license();
     * }
     */
    public static MemorySegment swscale_license() {
        var mh$ = swscale_license$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_getCoefficients$MH() {
        return RuntimeHelper.requireNonNull(constants$351.const$4,"sws_getCoefficients");
    }
    /**
     * {@snippet :
     * int* sws_getCoefficients(int colorspace);
     * }
     */
    public static MemorySegment sws_getCoefficients(int colorspace) {
        var mh$ = sws_getCoefficients$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(colorspace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_isSupportedInput$MH() {
        return RuntimeHelper.requireNonNull(constants$353.const$1,"sws_isSupportedInput");
    }
    /**
     * {@snippet :
     * int sws_isSupportedInput(enum AVPixelFormat pix_fmt);
     * }
     */
    public static int sws_isSupportedInput(int pix_fmt) {
        var mh$ = sws_isSupportedInput$MH();
        try {
            return (int)mh$.invokeExact(pix_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_isSupportedOutput$MH() {
        return RuntimeHelper.requireNonNull(constants$353.const$2,"sws_isSupportedOutput");
    }
    /**
     * {@snippet :
     * int sws_isSupportedOutput(enum AVPixelFormat pix_fmt);
     * }
     */
    public static int sws_isSupportedOutput(int pix_fmt) {
        var mh$ = sws_isSupportedOutput$MH();
        try {
            return (int)mh$.invokeExact(pix_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_isSupportedEndiannessConversion$MH() {
        return RuntimeHelper.requireNonNull(constants$353.const$3,"sws_isSupportedEndiannessConversion");
    }
    /**
     * {@snippet :
     * int sws_isSupportedEndiannessConversion(enum AVPixelFormat pix_fmt);
     * }
     */
    public static int sws_isSupportedEndiannessConversion(int pix_fmt) {
        var mh$ = sws_isSupportedEndiannessConversion$MH();
        try {
            return (int)mh$.invokeExact(pix_fmt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_alloc_context$MH() {
        return RuntimeHelper.requireNonNull(constants$353.const$4,"sws_alloc_context");
    }
    /**
     * {@snippet :
     * struct SwsContext* sws_alloc_context();
     * }
     */
    public static MemorySegment sws_alloc_context() {
        var mh$ = sws_alloc_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_init_context$MH() {
        return RuntimeHelper.requireNonNull(constants$353.const$5,"sws_init_context");
    }
    /**
     * {@snippet :
     * int sws_init_context(struct SwsContext* sws_context, SwsFilter* srcFilter, SwsFilter* dstFilter);
     * }
     */
    public static int sws_init_context(MemorySegment sws_context, MemorySegment srcFilter, MemorySegment dstFilter) {
        var mh$ = sws_init_context$MH();
        try {
            return (int)mh$.invokeExact(sws_context, srcFilter, dstFilter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_freeContext$MH() {
        return RuntimeHelper.requireNonNull(constants$354.const$0,"sws_freeContext");
    }
    /**
     * {@snippet :
     * void sws_freeContext(struct SwsContext* swsContext);
     * }
     */
    public static void sws_freeContext(MemorySegment swsContext) {
        var mh$ = sws_freeContext$MH();
        try {
            mh$.invokeExact(swsContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_getContext$MH() {
        return RuntimeHelper.requireNonNull(constants$354.const$2,"sws_getContext");
    }
    /**
     * {@snippet :
     * struct SwsContext* sws_getContext(int srcW, int srcH, enum AVPixelFormat srcFormat, int dstW, int dstH, enum AVPixelFormat dstFormat, int flags, SwsFilter* srcFilter, SwsFilter* dstFilter, double* param);
     * }
     */
    public static MemorySegment sws_getContext(int srcW, int srcH, int srcFormat, int dstW, int dstH, int dstFormat, int flags, MemorySegment srcFilter, MemorySegment dstFilter, MemorySegment param) {
        var mh$ = sws_getContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(srcW, srcH, srcFormat, dstW, dstH, dstFormat, flags, srcFilter, dstFilter, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$354.const$4,"sws_scale");
    }
    /**
     * {@snippet :
     * int sws_scale(struct SwsContext* c, const uint8_t* srcSlice[], int srcStride[], int srcSliceY, int srcSliceH, uint8_t* dst[], int dstStride[]);
     * }
     */
    public static int sws_scale(MemorySegment c, MemorySegment srcSlice, MemorySegment srcStride, int srcSliceY, int srcSliceH, MemorySegment dst, MemorySegment dstStride) {
        var mh$ = sws_scale$MH();
        try {
            return (int)mh$.invokeExact(c, srcSlice, srcStride, srcSliceY, srcSliceH, dst, dstStride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_scale_frame$MH() {
        return RuntimeHelper.requireNonNull(constants$354.const$5,"sws_scale_frame");
    }
    /**
     * {@snippet :
     * int sws_scale_frame(struct SwsContext* c, AVFrame* dst, const AVFrame* src);
     * }
     */
    public static int sws_scale_frame(MemorySegment c, MemorySegment dst, MemorySegment src) {
        var mh$ = sws_scale_frame$MH();
        try {
            return (int)mh$.invokeExact(c, dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_frame_start$MH() {
        return RuntimeHelper.requireNonNull(constants$355.const$0,"sws_frame_start");
    }
    /**
     * {@snippet :
     * int sws_frame_start(struct SwsContext* c, AVFrame* dst, const AVFrame* src);
     * }
     */
    public static int sws_frame_start(MemorySegment c, MemorySegment dst, MemorySegment src) {
        var mh$ = sws_frame_start$MH();
        try {
            return (int)mh$.invokeExact(c, dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_frame_end$MH() {
        return RuntimeHelper.requireNonNull(constants$355.const$1,"sws_frame_end");
    }
    /**
     * {@snippet :
     * void sws_frame_end(struct SwsContext* c);
     * }
     */
    public static void sws_frame_end(MemorySegment c) {
        var mh$ = sws_frame_end$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_send_slice$MH() {
        return RuntimeHelper.requireNonNull(constants$355.const$2,"sws_send_slice");
    }
    /**
     * {@snippet :
     * int sws_send_slice(struct SwsContext* c, unsigned int slice_start, unsigned int slice_height);
     * }
     */
    public static int sws_send_slice(MemorySegment c, int slice_start, int slice_height) {
        var mh$ = sws_send_slice$MH();
        try {
            return (int)mh$.invokeExact(c, slice_start, slice_height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_receive_slice$MH() {
        return RuntimeHelper.requireNonNull(constants$355.const$3,"sws_receive_slice");
    }
    /**
     * {@snippet :
     * int sws_receive_slice(struct SwsContext* c, unsigned int slice_start, unsigned int slice_height);
     * }
     */
    public static int sws_receive_slice(MemorySegment c, int slice_start, int slice_height) {
        var mh$ = sws_receive_slice$MH();
        try {
            return (int)mh$.invokeExact(c, slice_start, slice_height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_receive_slice_alignment$MH() {
        return RuntimeHelper.requireNonNull(constants$355.const$4,"sws_receive_slice_alignment");
    }
    /**
     * {@snippet :
     * unsigned int sws_receive_slice_alignment(struct SwsContext* c);
     * }
     */
    public static int sws_receive_slice_alignment(MemorySegment c) {
        var mh$ = sws_receive_slice_alignment$MH();
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_setColorspaceDetails$MH() {
        return RuntimeHelper.requireNonNull(constants$355.const$6,"sws_setColorspaceDetails");
    }
    /**
     * {@snippet :
     * int sws_setColorspaceDetails(struct SwsContext* c, int inv_table[4], int srcRange, int table[4], int dstRange, int brightness, int contrast, int saturation);
     * }
     */
    public static int sws_setColorspaceDetails(MemorySegment c, MemorySegment inv_table, int srcRange, MemorySegment table, int dstRange, int brightness, int contrast, int saturation) {
        var mh$ = sws_setColorspaceDetails$MH();
        try {
            return (int)mh$.invokeExact(c, inv_table, srcRange, table, dstRange, brightness, contrast, saturation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_getColorspaceDetails$MH() {
        return RuntimeHelper.requireNonNull(constants$356.const$1,"sws_getColorspaceDetails");
    }
    /**
     * {@snippet :
     * int sws_getColorspaceDetails(struct SwsContext* c, int** inv_table, int* srcRange, int** table, int* dstRange, int* brightness, int* contrast, int* saturation);
     * }
     */
    public static int sws_getColorspaceDetails(MemorySegment c, MemorySegment inv_table, MemorySegment srcRange, MemorySegment table, MemorySegment dstRange, MemorySegment brightness, MemorySegment contrast, MemorySegment saturation) {
        var mh$ = sws_getColorspaceDetails$MH();
        try {
            return (int)mh$.invokeExact(c, inv_table, srcRange, table, dstRange, brightness, contrast, saturation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_allocVec$MH() {
        return RuntimeHelper.requireNonNull(constants$356.const$2,"sws_allocVec");
    }
    /**
     * {@snippet :
     * SwsVector* sws_allocVec(int length);
     * }
     */
    public static MemorySegment sws_allocVec(int length) {
        var mh$ = sws_allocVec$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_getGaussianVec$MH() {
        return RuntimeHelper.requireNonNull(constants$356.const$4,"sws_getGaussianVec");
    }
    /**
     * {@snippet :
     * SwsVector* sws_getGaussianVec(double variance, double quality);
     * }
     */
    public static MemorySegment sws_getGaussianVec(double variance, double quality) {
        var mh$ = sws_getGaussianVec$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(variance, quality);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_scaleVec$MH() {
        return RuntimeHelper.requireNonNull(constants$356.const$6,"sws_scaleVec");
    }
    /**
     * {@snippet :
     * void sws_scaleVec(SwsVector* a, double scalar);
     * }
     */
    public static void sws_scaleVec(MemorySegment a, double scalar) {
        var mh$ = sws_scaleVec$MH();
        try {
            mh$.invokeExact(a, scalar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_normalizeVec$MH() {
        return RuntimeHelper.requireNonNull(constants$357.const$0,"sws_normalizeVec");
    }
    /**
     * {@snippet :
     * void sws_normalizeVec(SwsVector* a, double height);
     * }
     */
    public static void sws_normalizeVec(MemorySegment a, double height) {
        var mh$ = sws_normalizeVec$MH();
        try {
            mh$.invokeExact(a, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_freeVec$MH() {
        return RuntimeHelper.requireNonNull(constants$357.const$1,"sws_freeVec");
    }
    /**
     * {@snippet :
     * void sws_freeVec(SwsVector* a);
     * }
     */
    public static void sws_freeVec(MemorySegment a) {
        var mh$ = sws_freeVec$MH();
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_getDefaultFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$357.const$3,"sws_getDefaultFilter");
    }
    /**
     * {@snippet :
     * SwsFilter* sws_getDefaultFilter(float lumaGBlur, float chromaGBlur, float lumaSharpen, float chromaSharpen, float chromaHShift, float chromaVShift, int verbose);
     * }
     */
    public static MemorySegment sws_getDefaultFilter(float lumaGBlur, float chromaGBlur, float lumaSharpen, float chromaSharpen, float chromaHShift, float chromaVShift, int verbose) {
        var mh$ = sws_getDefaultFilter$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(lumaGBlur, chromaGBlur, lumaSharpen, chromaSharpen, chromaHShift, chromaVShift, verbose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_freeFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$357.const$4,"sws_freeFilter");
    }
    /**
     * {@snippet :
     * void sws_freeFilter(SwsFilter* filter);
     * }
     */
    public static void sws_freeFilter(MemorySegment filter) {
        var mh$ = sws_freeFilter$MH();
        try {
            mh$.invokeExact(filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_getCachedContext$MH() {
        return RuntimeHelper.requireNonNull(constants$357.const$6,"sws_getCachedContext");
    }
    /**
     * {@snippet :
     * struct SwsContext* sws_getCachedContext(struct SwsContext* context, int srcW, int srcH, enum AVPixelFormat srcFormat, int dstW, int dstH, enum AVPixelFormat dstFormat, int flags, SwsFilter* srcFilter, SwsFilter* dstFilter, double* param);
     * }
     */
    public static MemorySegment sws_getCachedContext(MemorySegment context, int srcW, int srcH, int srcFormat, int dstW, int dstH, int dstFormat, int flags, MemorySegment srcFilter, MemorySegment dstFilter, MemorySegment param) {
        var mh$ = sws_getCachedContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, srcW, srcH, srcFormat, dstW, dstH, dstFormat, flags, srcFilter, dstFilter, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_convertPalette8ToPacked32$MH() {
        return RuntimeHelper.requireNonNull(constants$358.const$0,"sws_convertPalette8ToPacked32");
    }
    /**
     * {@snippet :
     * void sws_convertPalette8ToPacked32(const uint8_t* src, uint8_t* dst, int num_pixels, const uint8_t* palette);
     * }
     */
    public static void sws_convertPalette8ToPacked32(MemorySegment src, MemorySegment dst, int num_pixels, MemorySegment palette) {
        var mh$ = sws_convertPalette8ToPacked32$MH();
        try {
            mh$.invokeExact(src, dst, num_pixels, palette);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_convertPalette8ToPacked24$MH() {
        return RuntimeHelper.requireNonNull(constants$358.const$1,"sws_convertPalette8ToPacked24");
    }
    /**
     * {@snippet :
     * void sws_convertPalette8ToPacked24(const uint8_t* src, uint8_t* dst, int num_pixels, const uint8_t* palette);
     * }
     */
    public static void sws_convertPalette8ToPacked24(MemorySegment src, MemorySegment dst, int num_pixels, MemorySegment palette) {
        var mh$ = sws_convertPalette8ToPacked24$MH();
        try {
            mh$.invokeExact(src, dst, num_pixels, palette);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sws_get_class$MH() {
        return RuntimeHelper.requireNonNull(constants$358.const$2,"sws_get_class");
    }
    /**
     * {@snippet :
     * const AVClass* sws_get_class();
     * }
     */
    public static MemorySegment sws_get_class() {
        var mh$ = sws_get_class$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
}


