// Generated by jextract

package com.chrisribble.ffmpeg5;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVIndexEntry {
 *     long pos;
 *     long timestamp;
 *      *     int flags;
 *     int size;
 *     int min_distance;
 * };
 * }
 */
public class AVIndexEntry {

    public static MemoryLayout $LAYOUT() {
        return constants$305.const$0;
    }
    public static VarHandle pos$VH() {
        return constants$305.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long pos;
     * }
     */
    public static long pos$get(MemorySegment seg) {
        return (long)constants$305.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long pos;
     * }
     */
    public static void pos$set(MemorySegment seg, long x) {
        constants$305.const$1.set(seg, x);
    }
    public static long pos$get(MemorySegment seg, long index) {
        return (long)constants$305.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pos$set(MemorySegment seg, long index, long x) {
        constants$305.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle timestamp$VH() {
        return constants$305.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long timestamp;
     * }
     */
    public static long timestamp$get(MemorySegment seg) {
        return (long)constants$305.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long timestamp;
     * }
     */
    public static void timestamp$set(MemorySegment seg, long x) {
        constants$305.const$2.set(seg, x);
    }
    public static long timestamp$get(MemorySegment seg, long index) {
        return (long)constants$305.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void timestamp$set(MemorySegment seg, long index, long x) {
        constants$305.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle min_distance$VH() {
        return constants$305.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int min_distance;
     * }
     */
    public static int min_distance$get(MemorySegment seg) {
        return (int)constants$305.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int min_distance;
     * }
     */
    public static void min_distance$set(MemorySegment seg, int x) {
        constants$305.const$3.set(seg, x);
    }
    public static int min_distance$get(MemorySegment seg, long index) {
        return (int)constants$305.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void min_distance$set(MemorySegment seg, long index, int x) {
        constants$305.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


