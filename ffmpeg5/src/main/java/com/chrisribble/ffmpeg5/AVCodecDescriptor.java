// Generated by jextract

package com.chrisribble.ffmpeg5;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVCodecDescriptor {
 *     enum AVCodecID id;
 *     enum AVMediaType type;
 *     char* name;
 *     char* long_name;
 *     int props;
 *     char** mime_types;
 *     struct AVProfile* profiles;
 * };
 * }
 */
public class AVCodecDescriptor {

    public static MemoryLayout $LAYOUT() {
        return constants$191.const$1;
    }
    public static VarHandle id$VH() {
        return constants$191.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVCodecID id;
     * }
     */
    public static int id$get(MemorySegment seg) {
        return (int)constants$191.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVCodecID id;
     * }
     */
    public static void id$set(MemorySegment seg, int x) {
        constants$191.const$2.set(seg, x);
    }
    public static int id$get(MemorySegment seg, long index) {
        return (int)constants$191.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void id$set(MemorySegment seg, long index, int x) {
        constants$191.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle type$VH() {
        return constants$191.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVMediaType type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)constants$191.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVMediaType type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        constants$191.const$3.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)constants$191.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        constants$191.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle name$VH() {
        return constants$191.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$191.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        constants$191.const$4.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$191.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$191.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle long_name$VH() {
        return constants$191.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* long_name;
     * }
     */
    public static MemorySegment long_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$191.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* long_name;
     * }
     */
    public static void long_name$set(MemorySegment seg, MemorySegment x) {
        constants$191.const$5.set(seg, x);
    }
    public static MemorySegment long_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$191.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void long_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$191.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle props$VH() {
        return constants$192.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int props;
     * }
     */
    public static int props$get(MemorySegment seg) {
        return (int)constants$192.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int props;
     * }
     */
    public static void props$set(MemorySegment seg, int x) {
        constants$192.const$0.set(seg, x);
    }
    public static int props$get(MemorySegment seg, long index) {
        return (int)constants$192.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void props$set(MemorySegment seg, long index, int x) {
        constants$192.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mime_types$VH() {
        return constants$192.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char** mime_types;
     * }
     */
    public static MemorySegment mime_types$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$192.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char** mime_types;
     * }
     */
    public static void mime_types$set(MemorySegment seg, MemorySegment x) {
        constants$192.const$1.set(seg, x);
    }
    public static MemorySegment mime_types$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$192.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void mime_types$set(MemorySegment seg, long index, MemorySegment x) {
        constants$192.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle profiles$VH() {
        return constants$192.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct AVProfile* profiles;
     * }
     */
    public static MemorySegment profiles$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$192.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct AVProfile* profiles;
     * }
     */
    public static void profiles$set(MemorySegment seg, MemorySegment x) {
        constants$192.const$2.set(seg, x);
    }
    public static MemorySegment profiles$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$192.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void profiles$set(MemorySegment seg, long index, MemorySegment x) {
        constants$192.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


