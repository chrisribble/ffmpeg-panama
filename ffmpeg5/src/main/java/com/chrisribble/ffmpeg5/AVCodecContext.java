// Generated by jextract

package com.chrisribble.ffmpeg5;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVCodecContext {
 *     const AVClass* av_class;
 *     int log_level_offset;
 *     enum AVMediaType codec_type;
 *     struct AVCodec* codec;
 *     enum AVCodecID codec_id;
 *     unsigned int codec_tag;
 *     void* priv_data;
 *     struct AVCodecInternal* internal;
 *     void* opaque;
 *     int64_t bit_rate;
 *     int bit_rate_tolerance;
 *     int global_quality;
 *     int compression_level;
 *     int flags;
 *     int flags2;
 *     uint8_t* extradata;
 *     int extradata_size;
 *     AVRational time_base;
 *     int ticks_per_frame;
 *     int delay;
 *     int width;
 *     int height;
 *     int coded_width;
 *     int coded_height;
 *     int gop_size;
 *     enum AVPixelFormat pix_fmt;
 *     void (*draw_horiz_band)(struct AVCodecContext*,const AVFrame*,int*,int,int,int);
 *     enum AVPixelFormat (*get_format)(struct AVCodecContext*,enum AVPixelFormat*);
 *     int max_b_frames;
 *     float b_quant_factor;
 *     float b_quant_offset;
 *     int has_b_frames;
 *     float i_quant_factor;
 *     float i_quant_offset;
 *     float lumi_masking;
 *     float temporal_cplx_masking;
 *     float spatial_cplx_masking;
 *     float p_masking;
 *     float dark_masking;
 *     int slice_count;
 *     int* slice_offset;
 *     AVRational sample_aspect_ratio;
 *     int me_cmp;
 *     int me_sub_cmp;
 *     int mb_cmp;
 *     int ildct_cmp;
 *     int dia_size;
 *     int last_predictor_count;
 *     int me_pre_cmp;
 *     int pre_dia_size;
 *     int me_subpel_quality;
 *     int me_range;
 *     int slice_flags;
 *     int mb_decision;
 *     uint16_t* intra_matrix;
 *     uint16_t* inter_matrix;
 *     int intra_dc_precision;
 *     int skip_top;
 *     int skip_bottom;
 *     int mb_lmin;
 *     int mb_lmax;
 *     int bidir_refine;
 *     int keyint_min;
 *     int refs;
 *     int mv0_threshold;
 *     enum AVColorPrimaries color_primaries;
 *     enum AVColorTransferCharacteristic color_trc;
 *     enum AVColorSpace colorspace;
 *     enum AVColorRange color_range;
 *     enum AVChromaLocation chroma_sample_location;
 *     int slices;
 *     enum AVFieldOrder field_order;
 *     int sample_rate;
 *     int channels;
 *     enum AVSampleFormat sample_fmt;
 *     int frame_size;
 *     int frame_number;
 *     int block_align;
 *     int cutoff;
 *     uint64_t channel_layout;
 *     uint64_t request_channel_layout;
 *     enum AVAudioServiceType audio_service_type;
 *     enum AVSampleFormat request_sample_fmt;
 *     int (*get_buffer2)(struct AVCodecContext*,AVFrame*,int);
 *     float qcompress;
 *     float qblur;
 *     int qmin;
 *     int qmax;
 *     int max_qdiff;
 *     int rc_buffer_size;
 *     int rc_override_count;
 *     RcOverride* rc_override;
 *     int64_t rc_max_rate;
 *     int64_t rc_min_rate;
 *     float rc_max_available_vbv_use;
 *     float rc_min_vbv_overflow_use;
 *     int rc_initial_buffer_occupancy;
 *     int trellis;
 *     char* stats_out;
 *     char* stats_in;
 *     int workaround_bugs;
 *     int strict_std_compliance;
 *     int error_concealment;
 *     int debug;
 *     int err_recognition;
 *     int64_t reordered_opaque;
 *     struct AVHWAccel* hwaccel;
 *     void* hwaccel_context;
 *     uint64_t error[8];
 *     int dct_algo;
 *     int idct_algo;
 *     int bits_per_coded_sample;
 *     int bits_per_raw_sample;
 *     int lowres;
 *     int thread_count;
 *     int thread_type;
 *     int active_thread_type;
 *     int thread_safe_callbacks;
 *     int (*execute)(struct AVCodecContext*,int (*)(struct AVCodecContext*,void*),void*,int*,int,int);
 *     int (*execute2)(struct AVCodecContext*,int (*)(struct AVCodecContext*,void*,int,int),void*,int*,int);
 *     int nsse_weight;
 *     int profile;
 *     int level;
 *     enum AVDiscard skip_loop_filter;
 *     enum AVDiscard skip_idct;
 *     enum AVDiscard skip_frame;
 *     uint8_t* subtitle_header;
 *     int subtitle_header_size;
 *     int initial_padding;
 *     AVRational framerate;
 *     enum AVPixelFormat sw_pix_fmt;
 *     AVRational pkt_timebase;
 *     const AVCodecDescriptor* codec_descriptor;
 *     int64_t pts_correction_num_faulty_pts;
 *     int64_t pts_correction_num_faulty_dts;
 *     int64_t pts_correction_last_pts;
 *     int64_t pts_correction_last_dts;
 *     char* sub_charenc;
 *     int sub_charenc_mode;
 *     int skip_alpha;
 *     int seek_preroll;
 *     int debug_mv;
 *     uint16_t* chroma_intra_matrix;
 *     uint8_t* dump_separator;
 *     char* codec_whitelist;
 *     unsigned int properties;
 *     AVPacketSideData* coded_side_data;
 *     int nb_coded_side_data;
 *     AVBufferRef* hw_frames_ctx;
 *     int sub_text_format;
 *     int trailing_padding;
 *     int64_t max_pixels;
 *     AVBufferRef* hw_device_ctx;
 *     int hwaccel_flags;
 *     int apply_cropping;
 *     int extra_hw_frames;
 *     int discard_damaged_percentage;
 *     int64_t max_samples;
 *     int export_side_data;
 *     int (*get_encode_buffer)(struct AVCodecContext*,AVPacket*,int);
 *     AVChannelLayout ch_layout;
 * };
 * }
 */
public class AVCodecContext {

    public static MemoryLayout $LAYOUT() {
        return constants$208.const$2;
    }
    public static VarHandle av_class$VH() {
        return constants$208.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const AVClass* av_class;
     * }
     */
    public static MemorySegment av_class$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$208.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const AVClass* av_class;
     * }
     */
    public static void av_class$set(MemorySegment seg, MemorySegment x) {
        constants$208.const$3.set(seg, x);
    }
    public static MemorySegment av_class$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$208.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void av_class$set(MemorySegment seg, long index, MemorySegment x) {
        constants$208.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle log_level_offset$VH() {
        return constants$208.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int log_level_offset;
     * }
     */
    public static int log_level_offset$get(MemorySegment seg) {
        return (int)constants$208.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int log_level_offset;
     * }
     */
    public static void log_level_offset$set(MemorySegment seg, int x) {
        constants$208.const$4.set(seg, x);
    }
    public static int log_level_offset$get(MemorySegment seg, long index) {
        return (int)constants$208.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void log_level_offset$set(MemorySegment seg, long index, int x) {
        constants$208.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle codec_type$VH() {
        return constants$208.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVMediaType codec_type;
     * }
     */
    public static int codec_type$get(MemorySegment seg) {
        return (int)constants$208.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVMediaType codec_type;
     * }
     */
    public static void codec_type$set(MemorySegment seg, int x) {
        constants$208.const$5.set(seg, x);
    }
    public static int codec_type$get(MemorySegment seg, long index) {
        return (int)constants$208.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void codec_type$set(MemorySegment seg, long index, int x) {
        constants$208.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle codec$VH() {
        return constants$209.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct AVCodec* codec;
     * }
     */
    public static MemorySegment codec$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$209.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct AVCodec* codec;
     * }
     */
    public static void codec$set(MemorySegment seg, MemorySegment x) {
        constants$209.const$0.set(seg, x);
    }
    public static MemorySegment codec$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$209.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void codec$set(MemorySegment seg, long index, MemorySegment x) {
        constants$209.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle codec_id$VH() {
        return constants$209.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVCodecID codec_id;
     * }
     */
    public static int codec_id$get(MemorySegment seg) {
        return (int)constants$209.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVCodecID codec_id;
     * }
     */
    public static void codec_id$set(MemorySegment seg, int x) {
        constants$209.const$1.set(seg, x);
    }
    public static int codec_id$get(MemorySegment seg, long index) {
        return (int)constants$209.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void codec_id$set(MemorySegment seg, long index, int x) {
        constants$209.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle codec_tag$VH() {
        return constants$209.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int codec_tag;
     * }
     */
    public static int codec_tag$get(MemorySegment seg) {
        return (int)constants$209.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int codec_tag;
     * }
     */
    public static void codec_tag$set(MemorySegment seg, int x) {
        constants$209.const$2.set(seg, x);
    }
    public static int codec_tag$get(MemorySegment seg, long index) {
        return (int)constants$209.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void codec_tag$set(MemorySegment seg, long index, int x) {
        constants$209.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle priv_data$VH() {
        return constants$209.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* priv_data;
     * }
     */
    public static MemorySegment priv_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$209.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* priv_data;
     * }
     */
    public static void priv_data$set(MemorySegment seg, MemorySegment x) {
        constants$209.const$3.set(seg, x);
    }
    public static MemorySegment priv_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$209.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void priv_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$209.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle internal$VH() {
        return constants$209.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct AVCodecInternal* internal;
     * }
     */
    public static MemorySegment internal$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$209.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct AVCodecInternal* internal;
     * }
     */
    public static void internal$set(MemorySegment seg, MemorySegment x) {
        constants$209.const$4.set(seg, x);
    }
    public static MemorySegment internal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$209.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void internal$set(MemorySegment seg, long index, MemorySegment x) {
        constants$209.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle opaque$VH() {
        return constants$209.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static MemorySegment opaque$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$209.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static void opaque$set(MemorySegment seg, MemorySegment x) {
        constants$209.const$5.set(seg, x);
    }
    public static MemorySegment opaque$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$209.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void opaque$set(MemorySegment seg, long index, MemorySegment x) {
        constants$209.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bit_rate$VH() {
        return constants$210.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t bit_rate;
     * }
     */
    public static long bit_rate$get(MemorySegment seg) {
        return (long)constants$210.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t bit_rate;
     * }
     */
    public static void bit_rate$set(MemorySegment seg, long x) {
        constants$210.const$0.set(seg, x);
    }
    public static long bit_rate$get(MemorySegment seg, long index) {
        return (long)constants$210.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_rate$set(MemorySegment seg, long index, long x) {
        constants$210.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bit_rate_tolerance$VH() {
        return constants$210.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bit_rate_tolerance;
     * }
     */
    public static int bit_rate_tolerance$get(MemorySegment seg) {
        return (int)constants$210.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bit_rate_tolerance;
     * }
     */
    public static void bit_rate_tolerance$set(MemorySegment seg, int x) {
        constants$210.const$1.set(seg, x);
    }
    public static int bit_rate_tolerance$get(MemorySegment seg, long index) {
        return (int)constants$210.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_rate_tolerance$set(MemorySegment seg, long index, int x) {
        constants$210.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle global_quality$VH() {
        return constants$210.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int global_quality;
     * }
     */
    public static int global_quality$get(MemorySegment seg) {
        return (int)constants$210.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int global_quality;
     * }
     */
    public static void global_quality$set(MemorySegment seg, int x) {
        constants$210.const$2.set(seg, x);
    }
    public static int global_quality$get(MemorySegment seg, long index) {
        return (int)constants$210.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void global_quality$set(MemorySegment seg, long index, int x) {
        constants$210.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle compression_level$VH() {
        return constants$210.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int compression_level;
     * }
     */
    public static int compression_level$get(MemorySegment seg) {
        return (int)constants$210.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int compression_level;
     * }
     */
    public static void compression_level$set(MemorySegment seg, int x) {
        constants$210.const$3.set(seg, x);
    }
    public static int compression_level$get(MemorySegment seg, long index) {
        return (int)constants$210.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void compression_level$set(MemorySegment seg, long index, int x) {
        constants$210.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$210.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$210.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$210.const$4.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$210.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$210.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags2$VH() {
        return constants$210.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flags2;
     * }
     */
    public static int flags2$get(MemorySegment seg) {
        return (int)constants$210.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flags2;
     * }
     */
    public static void flags2$set(MemorySegment seg, int x) {
        constants$210.const$5.set(seg, x);
    }
    public static int flags2$get(MemorySegment seg, long index) {
        return (int)constants$210.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void flags2$set(MemorySegment seg, long index, int x) {
        constants$210.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extradata$VH() {
        return constants$211.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t* extradata;
     * }
     */
    public static MemorySegment extradata$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$211.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t* extradata;
     * }
     */
    public static void extradata$set(MemorySegment seg, MemorySegment x) {
        constants$211.const$0.set(seg, x);
    }
    public static MemorySegment extradata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$211.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void extradata$set(MemorySegment seg, long index, MemorySegment x) {
        constants$211.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extradata_size$VH() {
        return constants$211.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int extradata_size;
     * }
     */
    public static int extradata_size$get(MemorySegment seg) {
        return (int)constants$211.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int extradata_size;
     * }
     */
    public static void extradata_size$set(MemorySegment seg, int x) {
        constants$211.const$1.set(seg, x);
    }
    public static int extradata_size$get(MemorySegment seg, long index) {
        return (int)constants$211.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void extradata_size$set(MemorySegment seg, long index, int x) {
        constants$211.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment time_base$slice(MemorySegment seg) {
        return seg.asSlice(100, 8);
    }
    public static VarHandle ticks_per_frame$VH() {
        return constants$211.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ticks_per_frame;
     * }
     */
    public static int ticks_per_frame$get(MemorySegment seg) {
        return (int)constants$211.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ticks_per_frame;
     * }
     */
    public static void ticks_per_frame$set(MemorySegment seg, int x) {
        constants$211.const$2.set(seg, x);
    }
    public static int ticks_per_frame$get(MemorySegment seg, long index) {
        return (int)constants$211.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ticks_per_frame$set(MemorySegment seg, long index, int x) {
        constants$211.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle delay$VH() {
        return constants$211.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int delay;
     * }
     */
    public static int delay$get(MemorySegment seg) {
        return (int)constants$211.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int delay;
     * }
     */
    public static void delay$set(MemorySegment seg, int x) {
        constants$211.const$3.set(seg, x);
    }
    public static int delay$get(MemorySegment seg, long index) {
        return (int)constants$211.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void delay$set(MemorySegment seg, long index, int x) {
        constants$211.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle width$VH() {
        return constants$211.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static int width$get(MemorySegment seg) {
        return (int)constants$211.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static void width$set(MemorySegment seg, int x) {
        constants$211.const$4.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)constants$211.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        constants$211.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height$VH() {
        return constants$211.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)constants$211.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        constants$211.const$5.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)constants$211.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        constants$211.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle coded_width$VH() {
        return constants$212.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int coded_width;
     * }
     */
    public static int coded_width$get(MemorySegment seg) {
        return (int)constants$212.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int coded_width;
     * }
     */
    public static void coded_width$set(MemorySegment seg, int x) {
        constants$212.const$0.set(seg, x);
    }
    public static int coded_width$get(MemorySegment seg, long index) {
        return (int)constants$212.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void coded_width$set(MemorySegment seg, long index, int x) {
        constants$212.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle coded_height$VH() {
        return constants$212.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int coded_height;
     * }
     */
    public static int coded_height$get(MemorySegment seg) {
        return (int)constants$212.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int coded_height;
     * }
     */
    public static void coded_height$set(MemorySegment seg, int x) {
        constants$212.const$1.set(seg, x);
    }
    public static int coded_height$get(MemorySegment seg, long index) {
        return (int)constants$212.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void coded_height$set(MemorySegment seg, long index, int x) {
        constants$212.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle gop_size$VH() {
        return constants$212.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int gop_size;
     * }
     */
    public static int gop_size$get(MemorySegment seg) {
        return (int)constants$212.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int gop_size;
     * }
     */
    public static void gop_size$set(MemorySegment seg, int x) {
        constants$212.const$2.set(seg, x);
    }
    public static int gop_size$get(MemorySegment seg, long index) {
        return (int)constants$212.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void gop_size$set(MemorySegment seg, long index, int x) {
        constants$212.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pix_fmt$VH() {
        return constants$212.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVPixelFormat pix_fmt;
     * }
     */
    public static int pix_fmt$get(MemorySegment seg) {
        return (int)constants$212.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVPixelFormat pix_fmt;
     * }
     */
    public static void pix_fmt$set(MemorySegment seg, int x) {
        constants$212.const$3.set(seg, x);
    }
    public static int pix_fmt$get(MemorySegment seg, long index) {
        return (int)constants$212.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pix_fmt$set(MemorySegment seg, long index, int x) {
        constants$212.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void (*draw_horiz_band)(struct AVCodecContext*,const AVFrame*,int*,int,int,int);
     * }
     */
    public interface draw_horiz_band {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4, int _x5);
        static MemorySegment allocate(draw_horiz_band fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$212.const$5, fi, constants$212.const$4, scope);
        }
        static draw_horiz_band ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4, int __x5) -> {
                try {
                    constants$213.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw_horiz_band$VH() {
        return constants$213.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_horiz_band)(struct AVCodecContext*,const AVFrame*,int*,int,int,int);
     * }
     */
    public static MemorySegment draw_horiz_band$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$213.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_horiz_band)(struct AVCodecContext*,const AVFrame*,int*,int,int,int);
     * }
     */
    public static void draw_horiz_band$set(MemorySegment seg, MemorySegment x) {
        constants$213.const$1.set(seg, x);
    }
    public static MemorySegment draw_horiz_band$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$213.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_horiz_band$set(MemorySegment seg, long index, MemorySegment x) {
        constants$213.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_horiz_band draw_horiz_band(MemorySegment segment, Arena scope) {
        return draw_horiz_band.ofAddress(draw_horiz_band$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum AVPixelFormat (*get_format)(struct AVCodecContext*,enum AVPixelFormat*);
     * }
     */
    public interface get_format {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_format fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$213.const$2, fi, constants$66.const$1, scope);
        }
        static get_format ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$111.const$3.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_format$VH() {
        return constants$213.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVPixelFormat (*get_format)(struct AVCodecContext*,enum AVPixelFormat*);
     * }
     */
    public static MemorySegment get_format$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$213.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVPixelFormat (*get_format)(struct AVCodecContext*,enum AVPixelFormat*);
     * }
     */
    public static void get_format$set(MemorySegment seg, MemorySegment x) {
        constants$213.const$3.set(seg, x);
    }
    public static MemorySegment get_format$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$213.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_format$set(MemorySegment seg, long index, MemorySegment x) {
        constants$213.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_format get_format(MemorySegment segment, Arena scope) {
        return get_format.ofAddress(get_format$get(segment), scope);
    }
    public static VarHandle max_b_frames$VH() {
        return constants$213.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_b_frames;
     * }
     */
    public static int max_b_frames$get(MemorySegment seg) {
        return (int)constants$213.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_b_frames;
     * }
     */
    public static void max_b_frames$set(MemorySegment seg, int x) {
        constants$213.const$4.set(seg, x);
    }
    public static int max_b_frames$get(MemorySegment seg, long index) {
        return (int)constants$213.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void max_b_frames$set(MemorySegment seg, long index, int x) {
        constants$213.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle b_quant_factor$VH() {
        return constants$213.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float b_quant_factor;
     * }
     */
    public static float b_quant_factor$get(MemorySegment seg) {
        return (float)constants$213.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float b_quant_factor;
     * }
     */
    public static void b_quant_factor$set(MemorySegment seg, float x) {
        constants$213.const$5.set(seg, x);
    }
    public static float b_quant_factor$get(MemorySegment seg, long index) {
        return (float)constants$213.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void b_quant_factor$set(MemorySegment seg, long index, float x) {
        constants$213.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle b_quant_offset$VH() {
        return constants$214.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float b_quant_offset;
     * }
     */
    public static float b_quant_offset$get(MemorySegment seg) {
        return (float)constants$214.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float b_quant_offset;
     * }
     */
    public static void b_quant_offset$set(MemorySegment seg, float x) {
        constants$214.const$0.set(seg, x);
    }
    public static float b_quant_offset$get(MemorySegment seg, long index) {
        return (float)constants$214.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void b_quant_offset$set(MemorySegment seg, long index, float x) {
        constants$214.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle has_b_frames$VH() {
        return constants$214.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int has_b_frames;
     * }
     */
    public static int has_b_frames$get(MemorySegment seg) {
        return (int)constants$214.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int has_b_frames;
     * }
     */
    public static void has_b_frames$set(MemorySegment seg, int x) {
        constants$214.const$1.set(seg, x);
    }
    public static int has_b_frames$get(MemorySegment seg, long index) {
        return (int)constants$214.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void has_b_frames$set(MemorySegment seg, long index, int x) {
        constants$214.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle i_quant_factor$VH() {
        return constants$214.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float i_quant_factor;
     * }
     */
    public static float i_quant_factor$get(MemorySegment seg) {
        return (float)constants$214.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float i_quant_factor;
     * }
     */
    public static void i_quant_factor$set(MemorySegment seg, float x) {
        constants$214.const$2.set(seg, x);
    }
    public static float i_quant_factor$get(MemorySegment seg, long index) {
        return (float)constants$214.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void i_quant_factor$set(MemorySegment seg, long index, float x) {
        constants$214.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle i_quant_offset$VH() {
        return constants$214.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float i_quant_offset;
     * }
     */
    public static float i_quant_offset$get(MemorySegment seg) {
        return (float)constants$214.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float i_quant_offset;
     * }
     */
    public static void i_quant_offset$set(MemorySegment seg, float x) {
        constants$214.const$3.set(seg, x);
    }
    public static float i_quant_offset$get(MemorySegment seg, long index) {
        return (float)constants$214.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void i_quant_offset$set(MemorySegment seg, long index, float x) {
        constants$214.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lumi_masking$VH() {
        return constants$214.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float lumi_masking;
     * }
     */
    public static float lumi_masking$get(MemorySegment seg) {
        return (float)constants$214.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float lumi_masking;
     * }
     */
    public static void lumi_masking$set(MemorySegment seg, float x) {
        constants$214.const$4.set(seg, x);
    }
    public static float lumi_masking$get(MemorySegment seg, long index) {
        return (float)constants$214.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lumi_masking$set(MemorySegment seg, long index, float x) {
        constants$214.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle temporal_cplx_masking$VH() {
        return constants$214.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float temporal_cplx_masking;
     * }
     */
    public static float temporal_cplx_masking$get(MemorySegment seg) {
        return (float)constants$214.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float temporal_cplx_masking;
     * }
     */
    public static void temporal_cplx_masking$set(MemorySegment seg, float x) {
        constants$214.const$5.set(seg, x);
    }
    public static float temporal_cplx_masking$get(MemorySegment seg, long index) {
        return (float)constants$214.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void temporal_cplx_masking$set(MemorySegment seg, long index, float x) {
        constants$214.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle spatial_cplx_masking$VH() {
        return constants$215.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float spatial_cplx_masking;
     * }
     */
    public static float spatial_cplx_masking$get(MemorySegment seg) {
        return (float)constants$215.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float spatial_cplx_masking;
     * }
     */
    public static void spatial_cplx_masking$set(MemorySegment seg, float x) {
        constants$215.const$0.set(seg, x);
    }
    public static float spatial_cplx_masking$get(MemorySegment seg, long index) {
        return (float)constants$215.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void spatial_cplx_masking$set(MemorySegment seg, long index, float x) {
        constants$215.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle p_masking$VH() {
        return constants$215.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float p_masking;
     * }
     */
    public static float p_masking$get(MemorySegment seg) {
        return (float)constants$215.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float p_masking;
     * }
     */
    public static void p_masking$set(MemorySegment seg, float x) {
        constants$215.const$1.set(seg, x);
    }
    public static float p_masking$get(MemorySegment seg, long index) {
        return (float)constants$215.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void p_masking$set(MemorySegment seg, long index, float x) {
        constants$215.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dark_masking$VH() {
        return constants$215.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float dark_masking;
     * }
     */
    public static float dark_masking$get(MemorySegment seg) {
        return (float)constants$215.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float dark_masking;
     * }
     */
    public static void dark_masking$set(MemorySegment seg, float x) {
        constants$215.const$2.set(seg, x);
    }
    public static float dark_masking$get(MemorySegment seg, long index) {
        return (float)constants$215.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dark_masking$set(MemorySegment seg, long index, float x) {
        constants$215.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle slice_count$VH() {
        return constants$215.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int slice_count;
     * }
     */
    public static int slice_count$get(MemorySegment seg) {
        return (int)constants$215.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int slice_count;
     * }
     */
    public static void slice_count$set(MemorySegment seg, int x) {
        constants$215.const$3.set(seg, x);
    }
    public static int slice_count$get(MemorySegment seg, long index) {
        return (int)constants$215.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void slice_count$set(MemorySegment seg, long index, int x) {
        constants$215.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle slice_offset$VH() {
        return constants$215.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int* slice_offset;
     * }
     */
    public static MemorySegment slice_offset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$215.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int* slice_offset;
     * }
     */
    public static void slice_offset$set(MemorySegment seg, MemorySegment x) {
        constants$215.const$4.set(seg, x);
    }
    public static MemorySegment slice_offset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$215.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void slice_offset$set(MemorySegment seg, long index, MemorySegment x) {
        constants$215.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sample_aspect_ratio$slice(MemorySegment seg) {
        return seg.asSlice(216, 8);
    }
    public static VarHandle me_cmp$VH() {
        return constants$215.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int me_cmp;
     * }
     */
    public static int me_cmp$get(MemorySegment seg) {
        return (int)constants$215.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int me_cmp;
     * }
     */
    public static void me_cmp$set(MemorySegment seg, int x) {
        constants$215.const$5.set(seg, x);
    }
    public static int me_cmp$get(MemorySegment seg, long index) {
        return (int)constants$215.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void me_cmp$set(MemorySegment seg, long index, int x) {
        constants$215.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle me_sub_cmp$VH() {
        return constants$216.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int me_sub_cmp;
     * }
     */
    public static int me_sub_cmp$get(MemorySegment seg) {
        return (int)constants$216.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int me_sub_cmp;
     * }
     */
    public static void me_sub_cmp$set(MemorySegment seg, int x) {
        constants$216.const$0.set(seg, x);
    }
    public static int me_sub_cmp$get(MemorySegment seg, long index) {
        return (int)constants$216.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void me_sub_cmp$set(MemorySegment seg, long index, int x) {
        constants$216.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mb_cmp$VH() {
        return constants$216.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int mb_cmp;
     * }
     */
    public static int mb_cmp$get(MemorySegment seg) {
        return (int)constants$216.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int mb_cmp;
     * }
     */
    public static void mb_cmp$set(MemorySegment seg, int x) {
        constants$216.const$1.set(seg, x);
    }
    public static int mb_cmp$get(MemorySegment seg, long index) {
        return (int)constants$216.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void mb_cmp$set(MemorySegment seg, long index, int x) {
        constants$216.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ildct_cmp$VH() {
        return constants$216.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ildct_cmp;
     * }
     */
    public static int ildct_cmp$get(MemorySegment seg) {
        return (int)constants$216.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ildct_cmp;
     * }
     */
    public static void ildct_cmp$set(MemorySegment seg, int x) {
        constants$216.const$2.set(seg, x);
    }
    public static int ildct_cmp$get(MemorySegment seg, long index) {
        return (int)constants$216.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ildct_cmp$set(MemorySegment seg, long index, int x) {
        constants$216.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dia_size$VH() {
        return constants$216.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int dia_size;
     * }
     */
    public static int dia_size$get(MemorySegment seg) {
        return (int)constants$216.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int dia_size;
     * }
     */
    public static void dia_size$set(MemorySegment seg, int x) {
        constants$216.const$3.set(seg, x);
    }
    public static int dia_size$get(MemorySegment seg, long index) {
        return (int)constants$216.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void dia_size$set(MemorySegment seg, long index, int x) {
        constants$216.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle last_predictor_count$VH() {
        return constants$216.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int last_predictor_count;
     * }
     */
    public static int last_predictor_count$get(MemorySegment seg) {
        return (int)constants$216.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int last_predictor_count;
     * }
     */
    public static void last_predictor_count$set(MemorySegment seg, int x) {
        constants$216.const$4.set(seg, x);
    }
    public static int last_predictor_count$get(MemorySegment seg, long index) {
        return (int)constants$216.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void last_predictor_count$set(MemorySegment seg, long index, int x) {
        constants$216.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle me_pre_cmp$VH() {
        return constants$216.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int me_pre_cmp;
     * }
     */
    public static int me_pre_cmp$get(MemorySegment seg) {
        return (int)constants$216.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int me_pre_cmp;
     * }
     */
    public static void me_pre_cmp$set(MemorySegment seg, int x) {
        constants$216.const$5.set(seg, x);
    }
    public static int me_pre_cmp$get(MemorySegment seg, long index) {
        return (int)constants$216.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void me_pre_cmp$set(MemorySegment seg, long index, int x) {
        constants$216.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pre_dia_size$VH() {
        return constants$217.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pre_dia_size;
     * }
     */
    public static int pre_dia_size$get(MemorySegment seg) {
        return (int)constants$217.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pre_dia_size;
     * }
     */
    public static void pre_dia_size$set(MemorySegment seg, int x) {
        constants$217.const$0.set(seg, x);
    }
    public static int pre_dia_size$get(MemorySegment seg, long index) {
        return (int)constants$217.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pre_dia_size$set(MemorySegment seg, long index, int x) {
        constants$217.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle me_subpel_quality$VH() {
        return constants$217.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int me_subpel_quality;
     * }
     */
    public static int me_subpel_quality$get(MemorySegment seg) {
        return (int)constants$217.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int me_subpel_quality;
     * }
     */
    public static void me_subpel_quality$set(MemorySegment seg, int x) {
        constants$217.const$1.set(seg, x);
    }
    public static int me_subpel_quality$get(MemorySegment seg, long index) {
        return (int)constants$217.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void me_subpel_quality$set(MemorySegment seg, long index, int x) {
        constants$217.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle me_range$VH() {
        return constants$217.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int me_range;
     * }
     */
    public static int me_range$get(MemorySegment seg) {
        return (int)constants$217.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int me_range;
     * }
     */
    public static void me_range$set(MemorySegment seg, int x) {
        constants$217.const$2.set(seg, x);
    }
    public static int me_range$get(MemorySegment seg, long index) {
        return (int)constants$217.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void me_range$set(MemorySegment seg, long index, int x) {
        constants$217.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle slice_flags$VH() {
        return constants$217.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int slice_flags;
     * }
     */
    public static int slice_flags$get(MemorySegment seg) {
        return (int)constants$217.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int slice_flags;
     * }
     */
    public static void slice_flags$set(MemorySegment seg, int x) {
        constants$217.const$3.set(seg, x);
    }
    public static int slice_flags$get(MemorySegment seg, long index) {
        return (int)constants$217.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void slice_flags$set(MemorySegment seg, long index, int x) {
        constants$217.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mb_decision$VH() {
        return constants$217.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int mb_decision;
     * }
     */
    public static int mb_decision$get(MemorySegment seg) {
        return (int)constants$217.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int mb_decision;
     * }
     */
    public static void mb_decision$set(MemorySegment seg, int x) {
        constants$217.const$4.set(seg, x);
    }
    public static int mb_decision$get(MemorySegment seg, long index) {
        return (int)constants$217.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void mb_decision$set(MemorySegment seg, long index, int x) {
        constants$217.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle intra_matrix$VH() {
        return constants$217.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint16_t* intra_matrix;
     * }
     */
    public static MemorySegment intra_matrix$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$217.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint16_t* intra_matrix;
     * }
     */
    public static void intra_matrix$set(MemorySegment seg, MemorySegment x) {
        constants$217.const$5.set(seg, x);
    }
    public static MemorySegment intra_matrix$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$217.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void intra_matrix$set(MemorySegment seg, long index, MemorySegment x) {
        constants$217.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle inter_matrix$VH() {
        return constants$218.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint16_t* inter_matrix;
     * }
     */
    public static MemorySegment inter_matrix$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$218.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint16_t* inter_matrix;
     * }
     */
    public static void inter_matrix$set(MemorySegment seg, MemorySegment x) {
        constants$218.const$0.set(seg, x);
    }
    public static MemorySegment inter_matrix$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$218.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void inter_matrix$set(MemorySegment seg, long index, MemorySegment x) {
        constants$218.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle intra_dc_precision$VH() {
        return constants$218.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int intra_dc_precision;
     * }
     */
    public static int intra_dc_precision$get(MemorySegment seg) {
        return (int)constants$218.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int intra_dc_precision;
     * }
     */
    public static void intra_dc_precision$set(MemorySegment seg, int x) {
        constants$218.const$1.set(seg, x);
    }
    public static int intra_dc_precision$get(MemorySegment seg, long index) {
        return (int)constants$218.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void intra_dc_precision$set(MemorySegment seg, long index, int x) {
        constants$218.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle skip_top$VH() {
        return constants$218.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int skip_top;
     * }
     */
    public static int skip_top$get(MemorySegment seg) {
        return (int)constants$218.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int skip_top;
     * }
     */
    public static void skip_top$set(MemorySegment seg, int x) {
        constants$218.const$2.set(seg, x);
    }
    public static int skip_top$get(MemorySegment seg, long index) {
        return (int)constants$218.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void skip_top$set(MemorySegment seg, long index, int x) {
        constants$218.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle skip_bottom$VH() {
        return constants$218.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int skip_bottom;
     * }
     */
    public static int skip_bottom$get(MemorySegment seg) {
        return (int)constants$218.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int skip_bottom;
     * }
     */
    public static void skip_bottom$set(MemorySegment seg, int x) {
        constants$218.const$3.set(seg, x);
    }
    public static int skip_bottom$get(MemorySegment seg, long index) {
        return (int)constants$218.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void skip_bottom$set(MemorySegment seg, long index, int x) {
        constants$218.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mb_lmin$VH() {
        return constants$218.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int mb_lmin;
     * }
     */
    public static int mb_lmin$get(MemorySegment seg) {
        return (int)constants$218.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int mb_lmin;
     * }
     */
    public static void mb_lmin$set(MemorySegment seg, int x) {
        constants$218.const$4.set(seg, x);
    }
    public static int mb_lmin$get(MemorySegment seg, long index) {
        return (int)constants$218.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void mb_lmin$set(MemorySegment seg, long index, int x) {
        constants$218.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mb_lmax$VH() {
        return constants$218.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int mb_lmax;
     * }
     */
    public static int mb_lmax$get(MemorySegment seg) {
        return (int)constants$218.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int mb_lmax;
     * }
     */
    public static void mb_lmax$set(MemorySegment seg, int x) {
        constants$218.const$5.set(seg, x);
    }
    public static int mb_lmax$get(MemorySegment seg, long index) {
        return (int)constants$218.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void mb_lmax$set(MemorySegment seg, long index, int x) {
        constants$218.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bidir_refine$VH() {
        return constants$219.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bidir_refine;
     * }
     */
    public static int bidir_refine$get(MemorySegment seg) {
        return (int)constants$219.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bidir_refine;
     * }
     */
    public static void bidir_refine$set(MemorySegment seg, int x) {
        constants$219.const$0.set(seg, x);
    }
    public static int bidir_refine$get(MemorySegment seg, long index) {
        return (int)constants$219.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void bidir_refine$set(MemorySegment seg, long index, int x) {
        constants$219.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle keyint_min$VH() {
        return constants$219.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int keyint_min;
     * }
     */
    public static int keyint_min$get(MemorySegment seg) {
        return (int)constants$219.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int keyint_min;
     * }
     */
    public static void keyint_min$set(MemorySegment seg, int x) {
        constants$219.const$1.set(seg, x);
    }
    public static int keyint_min$get(MemorySegment seg, long index) {
        return (int)constants$219.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void keyint_min$set(MemorySegment seg, long index, int x) {
        constants$219.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle refs$VH() {
        return constants$219.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int refs;
     * }
     */
    public static int refs$get(MemorySegment seg) {
        return (int)constants$219.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int refs;
     * }
     */
    public static void refs$set(MemorySegment seg, int x) {
        constants$219.const$2.set(seg, x);
    }
    public static int refs$get(MemorySegment seg, long index) {
        return (int)constants$219.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void refs$set(MemorySegment seg, long index, int x) {
        constants$219.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mv0_threshold$VH() {
        return constants$219.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int mv0_threshold;
     * }
     */
    public static int mv0_threshold$get(MemorySegment seg) {
        return (int)constants$219.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int mv0_threshold;
     * }
     */
    public static void mv0_threshold$set(MemorySegment seg, int x) {
        constants$219.const$3.set(seg, x);
    }
    public static int mv0_threshold$get(MemorySegment seg, long index) {
        return (int)constants$219.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void mv0_threshold$set(MemorySegment seg, long index, int x) {
        constants$219.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle color_primaries$VH() {
        return constants$219.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorPrimaries color_primaries;
     * }
     */
    public static int color_primaries$get(MemorySegment seg) {
        return (int)constants$219.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorPrimaries color_primaries;
     * }
     */
    public static void color_primaries$set(MemorySegment seg, int x) {
        constants$219.const$4.set(seg, x);
    }
    public static int color_primaries$get(MemorySegment seg, long index) {
        return (int)constants$219.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primaries$set(MemorySegment seg, long index, int x) {
        constants$219.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle color_trc$VH() {
        return constants$219.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorTransferCharacteristic color_trc;
     * }
     */
    public static int color_trc$get(MemorySegment seg) {
        return (int)constants$219.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorTransferCharacteristic color_trc;
     * }
     */
    public static void color_trc$set(MemorySegment seg, int x) {
        constants$219.const$5.set(seg, x);
    }
    public static int color_trc$get(MemorySegment seg, long index) {
        return (int)constants$219.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void color_trc$set(MemorySegment seg, long index, int x) {
        constants$219.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle colorspace$VH() {
        return constants$220.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorSpace colorspace;
     * }
     */
    public static int colorspace$get(MemorySegment seg) {
        return (int)constants$220.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorSpace colorspace;
     * }
     */
    public static void colorspace$set(MemorySegment seg, int x) {
        constants$220.const$0.set(seg, x);
    }
    public static int colorspace$get(MemorySegment seg, long index) {
        return (int)constants$220.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void colorspace$set(MemorySegment seg, long index, int x) {
        constants$220.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle color_range$VH() {
        return constants$220.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorRange color_range;
     * }
     */
    public static int color_range$get(MemorySegment seg) {
        return (int)constants$220.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorRange color_range;
     * }
     */
    public static void color_range$set(MemorySegment seg, int x) {
        constants$220.const$1.set(seg, x);
    }
    public static int color_range$get(MemorySegment seg, long index) {
        return (int)constants$220.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void color_range$set(MemorySegment seg, long index, int x) {
        constants$220.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle chroma_sample_location$VH() {
        return constants$220.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVChromaLocation chroma_sample_location;
     * }
     */
    public static int chroma_sample_location$get(MemorySegment seg) {
        return (int)constants$220.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVChromaLocation chroma_sample_location;
     * }
     */
    public static void chroma_sample_location$set(MemorySegment seg, int x) {
        constants$220.const$2.set(seg, x);
    }
    public static int chroma_sample_location$get(MemorySegment seg, long index) {
        return (int)constants$220.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void chroma_sample_location$set(MemorySegment seg, long index, int x) {
        constants$220.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle slices$VH() {
        return constants$220.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int slices;
     * }
     */
    public static int slices$get(MemorySegment seg) {
        return (int)constants$220.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int slices;
     * }
     */
    public static void slices$set(MemorySegment seg, int x) {
        constants$220.const$3.set(seg, x);
    }
    public static int slices$get(MemorySegment seg, long index) {
        return (int)constants$220.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void slices$set(MemorySegment seg, long index, int x) {
        constants$220.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle field_order$VH() {
        return constants$220.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVFieldOrder field_order;
     * }
     */
    public static int field_order$get(MemorySegment seg) {
        return (int)constants$220.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVFieldOrder field_order;
     * }
     */
    public static void field_order$set(MemorySegment seg, int x) {
        constants$220.const$4.set(seg, x);
    }
    public static int field_order$get(MemorySegment seg, long index) {
        return (int)constants$220.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void field_order$set(MemorySegment seg, long index, int x) {
        constants$220.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sample_rate$VH() {
        return constants$220.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int sample_rate;
     * }
     */
    public static int sample_rate$get(MemorySegment seg) {
        return (int)constants$220.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int sample_rate;
     * }
     */
    public static void sample_rate$set(MemorySegment seg, int x) {
        constants$220.const$5.set(seg, x);
    }
    public static int sample_rate$get(MemorySegment seg, long index) {
        return (int)constants$220.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sample_rate$set(MemorySegment seg, long index, int x) {
        constants$220.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle channels$VH() {
        return constants$221.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int channels;
     * }
     */
    public static int channels$get(MemorySegment seg) {
        return (int)constants$221.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int channels;
     * }
     */
    public static void channels$set(MemorySegment seg, int x) {
        constants$221.const$0.set(seg, x);
    }
    public static int channels$get(MemorySegment seg, long index) {
        return (int)constants$221.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void channels$set(MemorySegment seg, long index, int x) {
        constants$221.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sample_fmt$VH() {
        return constants$221.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVSampleFormat sample_fmt;
     * }
     */
    public static int sample_fmt$get(MemorySegment seg) {
        return (int)constants$221.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVSampleFormat sample_fmt;
     * }
     */
    public static void sample_fmt$set(MemorySegment seg, int x) {
        constants$221.const$1.set(seg, x);
    }
    public static int sample_fmt$get(MemorySegment seg, long index) {
        return (int)constants$221.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void sample_fmt$set(MemorySegment seg, long index, int x) {
        constants$221.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle frame_size$VH() {
        return constants$221.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int frame_size;
     * }
     */
    public static int frame_size$get(MemorySegment seg) {
        return (int)constants$221.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int frame_size;
     * }
     */
    public static void frame_size$set(MemorySegment seg, int x) {
        constants$221.const$2.set(seg, x);
    }
    public static int frame_size$get(MemorySegment seg, long index) {
        return (int)constants$221.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void frame_size$set(MemorySegment seg, long index, int x) {
        constants$221.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle frame_number$VH() {
        return constants$221.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int frame_number;
     * }
     */
    public static int frame_number$get(MemorySegment seg) {
        return (int)constants$221.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int frame_number;
     * }
     */
    public static void frame_number$set(MemorySegment seg, int x) {
        constants$221.const$3.set(seg, x);
    }
    public static int frame_number$get(MemorySegment seg, long index) {
        return (int)constants$221.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void frame_number$set(MemorySegment seg, long index, int x) {
        constants$221.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle block_align$VH() {
        return constants$221.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int block_align;
     * }
     */
    public static int block_align$get(MemorySegment seg) {
        return (int)constants$221.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int block_align;
     * }
     */
    public static void block_align$set(MemorySegment seg, int x) {
        constants$221.const$4.set(seg, x);
    }
    public static int block_align$get(MemorySegment seg, long index) {
        return (int)constants$221.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void block_align$set(MemorySegment seg, long index, int x) {
        constants$221.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cutoff$VH() {
        return constants$221.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int cutoff;
     * }
     */
    public static int cutoff$get(MemorySegment seg) {
        return (int)constants$221.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int cutoff;
     * }
     */
    public static void cutoff$set(MemorySegment seg, int x) {
        constants$221.const$5.set(seg, x);
    }
    public static int cutoff$get(MemorySegment seg, long index) {
        return (int)constants$221.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void cutoff$set(MemorySegment seg, long index, int x) {
        constants$221.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle channel_layout$VH() {
        return constants$222.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t channel_layout;
     * }
     */
    public static long channel_layout$get(MemorySegment seg) {
        return (long)constants$222.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t channel_layout;
     * }
     */
    public static void channel_layout$set(MemorySegment seg, long x) {
        constants$222.const$0.set(seg, x);
    }
    public static long channel_layout$get(MemorySegment seg, long index) {
        return (long)constants$222.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void channel_layout$set(MemorySegment seg, long index, long x) {
        constants$222.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle request_channel_layout$VH() {
        return constants$222.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t request_channel_layout;
     * }
     */
    public static long request_channel_layout$get(MemorySegment seg) {
        return (long)constants$222.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t request_channel_layout;
     * }
     */
    public static void request_channel_layout$set(MemorySegment seg, long x) {
        constants$222.const$1.set(seg, x);
    }
    public static long request_channel_layout$get(MemorySegment seg, long index) {
        return (long)constants$222.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void request_channel_layout$set(MemorySegment seg, long index, long x) {
        constants$222.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle audio_service_type$VH() {
        return constants$222.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVAudioServiceType audio_service_type;
     * }
     */
    public static int audio_service_type$get(MemorySegment seg) {
        return (int)constants$222.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVAudioServiceType audio_service_type;
     * }
     */
    public static void audio_service_type$set(MemorySegment seg, int x) {
        constants$222.const$2.set(seg, x);
    }
    public static int audio_service_type$get(MemorySegment seg, long index) {
        return (int)constants$222.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void audio_service_type$set(MemorySegment seg, long index, int x) {
        constants$222.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle request_sample_fmt$VH() {
        return constants$222.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVSampleFormat request_sample_fmt;
     * }
     */
    public static int request_sample_fmt$get(MemorySegment seg) {
        return (int)constants$222.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVSampleFormat request_sample_fmt;
     * }
     */
    public static void request_sample_fmt$set(MemorySegment seg, int x) {
        constants$222.const$3.set(seg, x);
    }
    public static int request_sample_fmt$get(MemorySegment seg, long index) {
        return (int)constants$222.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void request_sample_fmt$set(MemorySegment seg, long index, int x) {
        constants$222.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * int (*get_buffer2)(struct AVCodecContext*,AVFrame*,int);
     * }
     */
    public interface get_buffer2 {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(get_buffer2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$222.const$4, fi, constants$109.const$5, scope);
        }
        static get_buffer2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)constants$222.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_buffer2$VH() {
        return constants$223.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_buffer2)(struct AVCodecContext*,AVFrame*,int);
     * }
     */
    public static MemorySegment get_buffer2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$223.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_buffer2)(struct AVCodecContext*,AVFrame*,int);
     * }
     */
    public static void get_buffer2$set(MemorySegment seg, MemorySegment x) {
        constants$223.const$0.set(seg, x);
    }
    public static MemorySegment get_buffer2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$223.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_buffer2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$223.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_buffer2 get_buffer2(MemorySegment segment, Arena scope) {
        return get_buffer2.ofAddress(get_buffer2$get(segment), scope);
    }
    public static VarHandle qcompress$VH() {
        return constants$223.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float qcompress;
     * }
     */
    public static float qcompress$get(MemorySegment seg) {
        return (float)constants$223.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float qcompress;
     * }
     */
    public static void qcompress$set(MemorySegment seg, float x) {
        constants$223.const$1.set(seg, x);
    }
    public static float qcompress$get(MemorySegment seg, long index) {
        return (float)constants$223.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void qcompress$set(MemorySegment seg, long index, float x) {
        constants$223.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle qblur$VH() {
        return constants$223.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float qblur;
     * }
     */
    public static float qblur$get(MemorySegment seg) {
        return (float)constants$223.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float qblur;
     * }
     */
    public static void qblur$set(MemorySegment seg, float x) {
        constants$223.const$2.set(seg, x);
    }
    public static float qblur$get(MemorySegment seg, long index) {
        return (float)constants$223.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void qblur$set(MemorySegment seg, long index, float x) {
        constants$223.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle qmin$VH() {
        return constants$223.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int qmin;
     * }
     */
    public static int qmin$get(MemorySegment seg) {
        return (int)constants$223.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int qmin;
     * }
     */
    public static void qmin$set(MemorySegment seg, int x) {
        constants$223.const$3.set(seg, x);
    }
    public static int qmin$get(MemorySegment seg, long index) {
        return (int)constants$223.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void qmin$set(MemorySegment seg, long index, int x) {
        constants$223.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle qmax$VH() {
        return constants$223.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int qmax;
     * }
     */
    public static int qmax$get(MemorySegment seg) {
        return (int)constants$223.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int qmax;
     * }
     */
    public static void qmax$set(MemorySegment seg, int x) {
        constants$223.const$4.set(seg, x);
    }
    public static int qmax$get(MemorySegment seg, long index) {
        return (int)constants$223.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void qmax$set(MemorySegment seg, long index, int x) {
        constants$223.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_qdiff$VH() {
        return constants$223.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int max_qdiff;
     * }
     */
    public static int max_qdiff$get(MemorySegment seg) {
        return (int)constants$223.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int max_qdiff;
     * }
     */
    public static void max_qdiff$set(MemorySegment seg, int x) {
        constants$223.const$5.set(seg, x);
    }
    public static int max_qdiff$get(MemorySegment seg, long index) {
        return (int)constants$223.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void max_qdiff$set(MemorySegment seg, long index, int x) {
        constants$223.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rc_buffer_size$VH() {
        return constants$224.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int rc_buffer_size;
     * }
     */
    public static int rc_buffer_size$get(MemorySegment seg) {
        return (int)constants$224.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int rc_buffer_size;
     * }
     */
    public static void rc_buffer_size$set(MemorySegment seg, int x) {
        constants$224.const$0.set(seg, x);
    }
    public static int rc_buffer_size$get(MemorySegment seg, long index) {
        return (int)constants$224.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void rc_buffer_size$set(MemorySegment seg, long index, int x) {
        constants$224.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rc_override_count$VH() {
        return constants$224.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int rc_override_count;
     * }
     */
    public static int rc_override_count$get(MemorySegment seg) {
        return (int)constants$224.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int rc_override_count;
     * }
     */
    public static void rc_override_count$set(MemorySegment seg, int x) {
        constants$224.const$1.set(seg, x);
    }
    public static int rc_override_count$get(MemorySegment seg, long index) {
        return (int)constants$224.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void rc_override_count$set(MemorySegment seg, long index, int x) {
        constants$224.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rc_override$VH() {
        return constants$224.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * RcOverride* rc_override;
     * }
     */
    public static MemorySegment rc_override$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$224.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * RcOverride* rc_override;
     * }
     */
    public static void rc_override$set(MemorySegment seg, MemorySegment x) {
        constants$224.const$2.set(seg, x);
    }
    public static MemorySegment rc_override$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$224.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void rc_override$set(MemorySegment seg, long index, MemorySegment x) {
        constants$224.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rc_max_rate$VH() {
        return constants$224.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t rc_max_rate;
     * }
     */
    public static long rc_max_rate$get(MemorySegment seg) {
        return (long)constants$224.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t rc_max_rate;
     * }
     */
    public static void rc_max_rate$set(MemorySegment seg, long x) {
        constants$224.const$3.set(seg, x);
    }
    public static long rc_max_rate$get(MemorySegment seg, long index) {
        return (long)constants$224.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void rc_max_rate$set(MemorySegment seg, long index, long x) {
        constants$224.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rc_min_rate$VH() {
        return constants$224.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t rc_min_rate;
     * }
     */
    public static long rc_min_rate$get(MemorySegment seg) {
        return (long)constants$224.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t rc_min_rate;
     * }
     */
    public static void rc_min_rate$set(MemorySegment seg, long x) {
        constants$224.const$4.set(seg, x);
    }
    public static long rc_min_rate$get(MemorySegment seg, long index) {
        return (long)constants$224.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void rc_min_rate$set(MemorySegment seg, long index, long x) {
        constants$224.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rc_max_available_vbv_use$VH() {
        return constants$224.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float rc_max_available_vbv_use;
     * }
     */
    public static float rc_max_available_vbv_use$get(MemorySegment seg) {
        return (float)constants$224.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float rc_max_available_vbv_use;
     * }
     */
    public static void rc_max_available_vbv_use$set(MemorySegment seg, float x) {
        constants$224.const$5.set(seg, x);
    }
    public static float rc_max_available_vbv_use$get(MemorySegment seg, long index) {
        return (float)constants$224.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void rc_max_available_vbv_use$set(MemorySegment seg, long index, float x) {
        constants$224.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rc_min_vbv_overflow_use$VH() {
        return constants$225.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float rc_min_vbv_overflow_use;
     * }
     */
    public static float rc_min_vbv_overflow_use$get(MemorySegment seg) {
        return (float)constants$225.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float rc_min_vbv_overflow_use;
     * }
     */
    public static void rc_min_vbv_overflow_use$set(MemorySegment seg, float x) {
        constants$225.const$0.set(seg, x);
    }
    public static float rc_min_vbv_overflow_use$get(MemorySegment seg, long index) {
        return (float)constants$225.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void rc_min_vbv_overflow_use$set(MemorySegment seg, long index, float x) {
        constants$225.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rc_initial_buffer_occupancy$VH() {
        return constants$225.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int rc_initial_buffer_occupancy;
     * }
     */
    public static int rc_initial_buffer_occupancy$get(MemorySegment seg) {
        return (int)constants$225.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int rc_initial_buffer_occupancy;
     * }
     */
    public static void rc_initial_buffer_occupancy$set(MemorySegment seg, int x) {
        constants$225.const$1.set(seg, x);
    }
    public static int rc_initial_buffer_occupancy$get(MemorySegment seg, long index) {
        return (int)constants$225.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void rc_initial_buffer_occupancy$set(MemorySegment seg, long index, int x) {
        constants$225.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle trellis$VH() {
        return constants$225.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int trellis;
     * }
     */
    public static int trellis$get(MemorySegment seg) {
        return (int)constants$225.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int trellis;
     * }
     */
    public static void trellis$set(MemorySegment seg, int x) {
        constants$225.const$2.set(seg, x);
    }
    public static int trellis$get(MemorySegment seg, long index) {
        return (int)constants$225.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void trellis$set(MemorySegment seg, long index, int x) {
        constants$225.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle stats_out$VH() {
        return constants$225.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* stats_out;
     * }
     */
    public static MemorySegment stats_out$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$225.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* stats_out;
     * }
     */
    public static void stats_out$set(MemorySegment seg, MemorySegment x) {
        constants$225.const$3.set(seg, x);
    }
    public static MemorySegment stats_out$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$225.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void stats_out$set(MemorySegment seg, long index, MemorySegment x) {
        constants$225.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle stats_in$VH() {
        return constants$225.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* stats_in;
     * }
     */
    public static MemorySegment stats_in$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$225.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* stats_in;
     * }
     */
    public static void stats_in$set(MemorySegment seg, MemorySegment x) {
        constants$225.const$4.set(seg, x);
    }
    public static MemorySegment stats_in$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$225.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void stats_in$set(MemorySegment seg, long index, MemorySegment x) {
        constants$225.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle workaround_bugs$VH() {
        return constants$225.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int workaround_bugs;
     * }
     */
    public static int workaround_bugs$get(MemorySegment seg) {
        return (int)constants$225.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int workaround_bugs;
     * }
     */
    public static void workaround_bugs$set(MemorySegment seg, int x) {
        constants$225.const$5.set(seg, x);
    }
    public static int workaround_bugs$get(MemorySegment seg, long index) {
        return (int)constants$225.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void workaround_bugs$set(MemorySegment seg, long index, int x) {
        constants$225.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle strict_std_compliance$VH() {
        return constants$226.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int strict_std_compliance;
     * }
     */
    public static int strict_std_compliance$get(MemorySegment seg) {
        return (int)constants$226.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int strict_std_compliance;
     * }
     */
    public static void strict_std_compliance$set(MemorySegment seg, int x) {
        constants$226.const$0.set(seg, x);
    }
    public static int strict_std_compliance$get(MemorySegment seg, long index) {
        return (int)constants$226.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void strict_std_compliance$set(MemorySegment seg, long index, int x) {
        constants$226.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle error_concealment$VH() {
        return constants$226.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int error_concealment;
     * }
     */
    public static int error_concealment$get(MemorySegment seg) {
        return (int)constants$226.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int error_concealment;
     * }
     */
    public static void error_concealment$set(MemorySegment seg, int x) {
        constants$226.const$1.set(seg, x);
    }
    public static int error_concealment$get(MemorySegment seg, long index) {
        return (int)constants$226.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void error_concealment$set(MemorySegment seg, long index, int x) {
        constants$226.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle debug$VH() {
        return constants$226.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int debug;
     * }
     */
    public static int debug$get(MemorySegment seg) {
        return (int)constants$226.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int debug;
     * }
     */
    public static void debug$set(MemorySegment seg, int x) {
        constants$226.const$2.set(seg, x);
    }
    public static int debug$get(MemorySegment seg, long index) {
        return (int)constants$226.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void debug$set(MemorySegment seg, long index, int x) {
        constants$226.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle err_recognition$VH() {
        return constants$226.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int err_recognition;
     * }
     */
    public static int err_recognition$get(MemorySegment seg) {
        return (int)constants$226.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int err_recognition;
     * }
     */
    public static void err_recognition$set(MemorySegment seg, int x) {
        constants$226.const$3.set(seg, x);
    }
    public static int err_recognition$get(MemorySegment seg, long index) {
        return (int)constants$226.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void err_recognition$set(MemorySegment seg, long index, int x) {
        constants$226.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reordered_opaque$VH() {
        return constants$226.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t reordered_opaque;
     * }
     */
    public static long reordered_opaque$get(MemorySegment seg) {
        return (long)constants$226.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t reordered_opaque;
     * }
     */
    public static void reordered_opaque$set(MemorySegment seg, long x) {
        constants$226.const$4.set(seg, x);
    }
    public static long reordered_opaque$get(MemorySegment seg, long index) {
        return (long)constants$226.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void reordered_opaque$set(MemorySegment seg, long index, long x) {
        constants$226.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwaccel$VH() {
        return constants$226.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct AVHWAccel* hwaccel;
     * }
     */
    public static MemorySegment hwaccel$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$226.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct AVHWAccel* hwaccel;
     * }
     */
    public static void hwaccel$set(MemorySegment seg, MemorySegment x) {
        constants$226.const$5.set(seg, x);
    }
    public static MemorySegment hwaccel$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$226.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void hwaccel$set(MemorySegment seg, long index, MemorySegment x) {
        constants$226.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwaccel_context$VH() {
        return constants$227.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* hwaccel_context;
     * }
     */
    public static MemorySegment hwaccel_context$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$227.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* hwaccel_context;
     * }
     */
    public static void hwaccel_context$set(MemorySegment seg, MemorySegment x) {
        constants$227.const$0.set(seg, x);
    }
    public static MemorySegment hwaccel_context$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$227.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hwaccel_context$set(MemorySegment seg, long index, MemorySegment x) {
        constants$227.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment error$slice(MemorySegment seg) {
        return seg.asSlice(552, 64);
    }
    public static VarHandle dct_algo$VH() {
        return constants$227.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int dct_algo;
     * }
     */
    public static int dct_algo$get(MemorySegment seg) {
        return (int)constants$227.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int dct_algo;
     * }
     */
    public static void dct_algo$set(MemorySegment seg, int x) {
        constants$227.const$1.set(seg, x);
    }
    public static int dct_algo$get(MemorySegment seg, long index) {
        return (int)constants$227.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dct_algo$set(MemorySegment seg, long index, int x) {
        constants$227.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle idct_algo$VH() {
        return constants$227.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int idct_algo;
     * }
     */
    public static int idct_algo$get(MemorySegment seg) {
        return (int)constants$227.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int idct_algo;
     * }
     */
    public static void idct_algo$set(MemorySegment seg, int x) {
        constants$227.const$2.set(seg, x);
    }
    public static int idct_algo$get(MemorySegment seg, long index) {
        return (int)constants$227.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void idct_algo$set(MemorySegment seg, long index, int x) {
        constants$227.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bits_per_coded_sample$VH() {
        return constants$227.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bits_per_coded_sample;
     * }
     */
    public static int bits_per_coded_sample$get(MemorySegment seg) {
        return (int)constants$227.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bits_per_coded_sample;
     * }
     */
    public static void bits_per_coded_sample$set(MemorySegment seg, int x) {
        constants$227.const$3.set(seg, x);
    }
    public static int bits_per_coded_sample$get(MemorySegment seg, long index) {
        return (int)constants$227.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void bits_per_coded_sample$set(MemorySegment seg, long index, int x) {
        constants$227.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bits_per_raw_sample$VH() {
        return constants$227.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bits_per_raw_sample;
     * }
     */
    public static int bits_per_raw_sample$get(MemorySegment seg) {
        return (int)constants$227.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bits_per_raw_sample;
     * }
     */
    public static void bits_per_raw_sample$set(MemorySegment seg, int x) {
        constants$227.const$4.set(seg, x);
    }
    public static int bits_per_raw_sample$get(MemorySegment seg, long index) {
        return (int)constants$227.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void bits_per_raw_sample$set(MemorySegment seg, long index, int x) {
        constants$227.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle lowres$VH() {
        return constants$227.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int lowres;
     * }
     */
    public static int lowres$get(MemorySegment seg) {
        return (int)constants$227.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int lowres;
     * }
     */
    public static void lowres$set(MemorySegment seg, int x) {
        constants$227.const$5.set(seg, x);
    }
    public static int lowres$get(MemorySegment seg, long index) {
        return (int)constants$227.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void lowres$set(MemorySegment seg, long index, int x) {
        constants$227.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle thread_count$VH() {
        return constants$228.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int thread_count;
     * }
     */
    public static int thread_count$get(MemorySegment seg) {
        return (int)constants$228.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int thread_count;
     * }
     */
    public static void thread_count$set(MemorySegment seg, int x) {
        constants$228.const$0.set(seg, x);
    }
    public static int thread_count$get(MemorySegment seg, long index) {
        return (int)constants$228.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void thread_count$set(MemorySegment seg, long index, int x) {
        constants$228.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle thread_type$VH() {
        return constants$228.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int thread_type;
     * }
     */
    public static int thread_type$get(MemorySegment seg) {
        return (int)constants$228.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int thread_type;
     * }
     */
    public static void thread_type$set(MemorySegment seg, int x) {
        constants$228.const$1.set(seg, x);
    }
    public static int thread_type$get(MemorySegment seg, long index) {
        return (int)constants$228.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void thread_type$set(MemorySegment seg, long index, int x) {
        constants$228.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle active_thread_type$VH() {
        return constants$228.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int active_thread_type;
     * }
     */
    public static int active_thread_type$get(MemorySegment seg) {
        return (int)constants$228.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int active_thread_type;
     * }
     */
    public static void active_thread_type$set(MemorySegment seg, int x) {
        constants$228.const$2.set(seg, x);
    }
    public static int active_thread_type$get(MemorySegment seg, long index) {
        return (int)constants$228.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void active_thread_type$set(MemorySegment seg, long index, int x) {
        constants$228.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle thread_safe_callbacks$VH() {
        return constants$228.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int thread_safe_callbacks;
     * }
     */
    public static int thread_safe_callbacks$get(MemorySegment seg) {
        return (int)constants$228.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int thread_safe_callbacks;
     * }
     */
    public static void thread_safe_callbacks$set(MemorySegment seg, int x) {
        constants$228.const$3.set(seg, x);
    }
    public static int thread_safe_callbacks$get(MemorySegment seg, long index) {
        return (int)constants$228.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void thread_safe_callbacks$set(MemorySegment seg, long index, int x) {
        constants$228.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * int (*execute)(struct AVCodecContext*,int (*)(struct AVCodecContext*,void*),void*,int*,int,int);
     * }
     */
    public interface execute {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4, int _x5);
        static MemorySegment allocate(execute fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$228.const$5, fi, constants$228.const$4, scope);
        }
        static execute ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4, int __x5) -> {
                try {
                    return (int)constants$229.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle execute$VH() {
        return constants$229.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*execute)(struct AVCodecContext*,int (*)(struct AVCodecContext*,void*),void*,int*,int,int);
     * }
     */
    public static MemorySegment execute$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$229.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*execute)(struct AVCodecContext*,int (*)(struct AVCodecContext*,void*),void*,int*,int,int);
     * }
     */
    public static void execute$set(MemorySegment seg, MemorySegment x) {
        constants$229.const$1.set(seg, x);
    }
    public static MemorySegment execute$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$229.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void execute$set(MemorySegment seg, long index, MemorySegment x) {
        constants$229.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static execute execute(MemorySegment segment, Arena scope) {
        return execute.ofAddress(execute$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*execute2)(struct AVCodecContext*,int (*)(struct AVCodecContext*,void*,int,int),void*,int*,int);
     * }
     */
    public interface execute2 {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(execute2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$229.const$2, fi, constants$154.const$0, scope);
        }
        static execute2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (int)constants$229.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle execute2$VH() {
        return constants$229.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*execute2)(struct AVCodecContext*,int (*)(struct AVCodecContext*,void*,int,int),void*,int*,int);
     * }
     */
    public static MemorySegment execute2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$229.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*execute2)(struct AVCodecContext*,int (*)(struct AVCodecContext*,void*,int,int),void*,int*,int);
     * }
     */
    public static void execute2$set(MemorySegment seg, MemorySegment x) {
        constants$229.const$4.set(seg, x);
    }
    public static MemorySegment execute2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$229.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void execute2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$229.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static execute2 execute2(MemorySegment segment, Arena scope) {
        return execute2.ofAddress(execute2$get(segment), scope);
    }
    public static VarHandle nsse_weight$VH() {
        return constants$229.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nsse_weight;
     * }
     */
    public static int nsse_weight$get(MemorySegment seg) {
        return (int)constants$229.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nsse_weight;
     * }
     */
    public static void nsse_weight$set(MemorySegment seg, int x) {
        constants$229.const$5.set(seg, x);
    }
    public static int nsse_weight$get(MemorySegment seg, long index) {
        return (int)constants$229.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nsse_weight$set(MemorySegment seg, long index, int x) {
        constants$229.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle profile$VH() {
        return constants$230.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int profile;
     * }
     */
    public static int profile$get(MemorySegment seg) {
        return (int)constants$230.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int profile;
     * }
     */
    public static void profile$set(MemorySegment seg, int x) {
        constants$230.const$0.set(seg, x);
    }
    public static int profile$get(MemorySegment seg, long index) {
        return (int)constants$230.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void profile$set(MemorySegment seg, long index, int x) {
        constants$230.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle level$VH() {
        return constants$230.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int level;
     * }
     */
    public static int level$get(MemorySegment seg) {
        return (int)constants$230.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int level;
     * }
     */
    public static void level$set(MemorySegment seg, int x) {
        constants$230.const$1.set(seg, x);
    }
    public static int level$get(MemorySegment seg, long index) {
        return (int)constants$230.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void level$set(MemorySegment seg, long index, int x) {
        constants$230.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle skip_loop_filter$VH() {
        return constants$230.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVDiscard skip_loop_filter;
     * }
     */
    public static int skip_loop_filter$get(MemorySegment seg) {
        return (int)constants$230.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVDiscard skip_loop_filter;
     * }
     */
    public static void skip_loop_filter$set(MemorySegment seg, int x) {
        constants$230.const$2.set(seg, x);
    }
    public static int skip_loop_filter$get(MemorySegment seg, long index) {
        return (int)constants$230.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void skip_loop_filter$set(MemorySegment seg, long index, int x) {
        constants$230.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle skip_idct$VH() {
        return constants$230.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVDiscard skip_idct;
     * }
     */
    public static int skip_idct$get(MemorySegment seg) {
        return (int)constants$230.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVDiscard skip_idct;
     * }
     */
    public static void skip_idct$set(MemorySegment seg, int x) {
        constants$230.const$3.set(seg, x);
    }
    public static int skip_idct$get(MemorySegment seg, long index) {
        return (int)constants$230.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void skip_idct$set(MemorySegment seg, long index, int x) {
        constants$230.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle skip_frame$VH() {
        return constants$230.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVDiscard skip_frame;
     * }
     */
    public static int skip_frame$get(MemorySegment seg) {
        return (int)constants$230.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVDiscard skip_frame;
     * }
     */
    public static void skip_frame$set(MemorySegment seg, int x) {
        constants$230.const$4.set(seg, x);
    }
    public static int skip_frame$get(MemorySegment seg, long index) {
        return (int)constants$230.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void skip_frame$set(MemorySegment seg, long index, int x) {
        constants$230.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle subtitle_header$VH() {
        return constants$230.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t* subtitle_header;
     * }
     */
    public static MemorySegment subtitle_header$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$230.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t* subtitle_header;
     * }
     */
    public static void subtitle_header$set(MemorySegment seg, MemorySegment x) {
        constants$230.const$5.set(seg, x);
    }
    public static MemorySegment subtitle_header$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$230.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void subtitle_header$set(MemorySegment seg, long index, MemorySegment x) {
        constants$230.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle subtitle_header_size$VH() {
        return constants$231.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int subtitle_header_size;
     * }
     */
    public static int subtitle_header_size$get(MemorySegment seg) {
        return (int)constants$231.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int subtitle_header_size;
     * }
     */
    public static void subtitle_header_size$set(MemorySegment seg, int x) {
        constants$231.const$0.set(seg, x);
    }
    public static int subtitle_header_size$get(MemorySegment seg, long index) {
        return (int)constants$231.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void subtitle_header_size$set(MemorySegment seg, long index, int x) {
        constants$231.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle initial_padding$VH() {
        return constants$231.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int initial_padding;
     * }
     */
    public static int initial_padding$get(MemorySegment seg) {
        return (int)constants$231.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int initial_padding;
     * }
     */
    public static void initial_padding$set(MemorySegment seg, int x) {
        constants$231.const$1.set(seg, x);
    }
    public static int initial_padding$get(MemorySegment seg, long index) {
        return (int)constants$231.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void initial_padding$set(MemorySegment seg, long index, int x) {
        constants$231.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment framerate$slice(MemorySegment seg) {
        return seg.asSlice(712, 8);
    }
    public static VarHandle sw_pix_fmt$VH() {
        return constants$231.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVPixelFormat sw_pix_fmt;
     * }
     */
    public static int sw_pix_fmt$get(MemorySegment seg) {
        return (int)constants$231.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVPixelFormat sw_pix_fmt;
     * }
     */
    public static void sw_pix_fmt$set(MemorySegment seg, int x) {
        constants$231.const$2.set(seg, x);
    }
    public static int sw_pix_fmt$get(MemorySegment seg, long index) {
        return (int)constants$231.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void sw_pix_fmt$set(MemorySegment seg, long index, int x) {
        constants$231.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment pkt_timebase$slice(MemorySegment seg) {
        return seg.asSlice(724, 8);
    }
    public static VarHandle codec_descriptor$VH() {
        return constants$231.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const AVCodecDescriptor* codec_descriptor;
     * }
     */
    public static MemorySegment codec_descriptor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$231.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const AVCodecDescriptor* codec_descriptor;
     * }
     */
    public static void codec_descriptor$set(MemorySegment seg, MemorySegment x) {
        constants$231.const$3.set(seg, x);
    }
    public static MemorySegment codec_descriptor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$231.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void codec_descriptor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$231.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pts_correction_num_faulty_pts$VH() {
        return constants$231.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pts_correction_num_faulty_pts;
     * }
     */
    public static long pts_correction_num_faulty_pts$get(MemorySegment seg) {
        return (long)constants$231.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pts_correction_num_faulty_pts;
     * }
     */
    public static void pts_correction_num_faulty_pts$set(MemorySegment seg, long x) {
        constants$231.const$4.set(seg, x);
    }
    public static long pts_correction_num_faulty_pts$get(MemorySegment seg, long index) {
        return (long)constants$231.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pts_correction_num_faulty_pts$set(MemorySegment seg, long index, long x) {
        constants$231.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pts_correction_num_faulty_dts$VH() {
        return constants$231.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pts_correction_num_faulty_dts;
     * }
     */
    public static long pts_correction_num_faulty_dts$get(MemorySegment seg) {
        return (long)constants$231.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pts_correction_num_faulty_dts;
     * }
     */
    public static void pts_correction_num_faulty_dts$set(MemorySegment seg, long x) {
        constants$231.const$5.set(seg, x);
    }
    public static long pts_correction_num_faulty_dts$get(MemorySegment seg, long index) {
        return (long)constants$231.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pts_correction_num_faulty_dts$set(MemorySegment seg, long index, long x) {
        constants$231.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pts_correction_last_pts$VH() {
        return constants$232.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pts_correction_last_pts;
     * }
     */
    public static long pts_correction_last_pts$get(MemorySegment seg) {
        return (long)constants$232.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pts_correction_last_pts;
     * }
     */
    public static void pts_correction_last_pts$set(MemorySegment seg, long x) {
        constants$232.const$0.set(seg, x);
    }
    public static long pts_correction_last_pts$get(MemorySegment seg, long index) {
        return (long)constants$232.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pts_correction_last_pts$set(MemorySegment seg, long index, long x) {
        constants$232.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pts_correction_last_dts$VH() {
        return constants$232.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pts_correction_last_dts;
     * }
     */
    public static long pts_correction_last_dts$get(MemorySegment seg) {
        return (long)constants$232.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pts_correction_last_dts;
     * }
     */
    public static void pts_correction_last_dts$set(MemorySegment seg, long x) {
        constants$232.const$1.set(seg, x);
    }
    public static long pts_correction_last_dts$get(MemorySegment seg, long index) {
        return (long)constants$232.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pts_correction_last_dts$set(MemorySegment seg, long index, long x) {
        constants$232.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sub_charenc$VH() {
        return constants$232.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* sub_charenc;
     * }
     */
    public static MemorySegment sub_charenc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$232.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* sub_charenc;
     * }
     */
    public static void sub_charenc$set(MemorySegment seg, MemorySegment x) {
        constants$232.const$2.set(seg, x);
    }
    public static MemorySegment sub_charenc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$232.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void sub_charenc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$232.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sub_charenc_mode$VH() {
        return constants$232.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int sub_charenc_mode;
     * }
     */
    public static int sub_charenc_mode$get(MemorySegment seg) {
        return (int)constants$232.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int sub_charenc_mode;
     * }
     */
    public static void sub_charenc_mode$set(MemorySegment seg, int x) {
        constants$232.const$3.set(seg, x);
    }
    public static int sub_charenc_mode$get(MemorySegment seg, long index) {
        return (int)constants$232.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void sub_charenc_mode$set(MemorySegment seg, long index, int x) {
        constants$232.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle skip_alpha$VH() {
        return constants$232.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int skip_alpha;
     * }
     */
    public static int skip_alpha$get(MemorySegment seg) {
        return (int)constants$232.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int skip_alpha;
     * }
     */
    public static void skip_alpha$set(MemorySegment seg, int x) {
        constants$232.const$4.set(seg, x);
    }
    public static int skip_alpha$get(MemorySegment seg, long index) {
        return (int)constants$232.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void skip_alpha$set(MemorySegment seg, long index, int x) {
        constants$232.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle seek_preroll$VH() {
        return constants$232.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int seek_preroll;
     * }
     */
    public static int seek_preroll$get(MemorySegment seg) {
        return (int)constants$232.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int seek_preroll;
     * }
     */
    public static void seek_preroll$set(MemorySegment seg, int x) {
        constants$232.const$5.set(seg, x);
    }
    public static int seek_preroll$get(MemorySegment seg, long index) {
        return (int)constants$232.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void seek_preroll$set(MemorySegment seg, long index, int x) {
        constants$232.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle debug_mv$VH() {
        return constants$233.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int debug_mv;
     * }
     */
    public static int debug_mv$get(MemorySegment seg) {
        return (int)constants$233.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int debug_mv;
     * }
     */
    public static void debug_mv$set(MemorySegment seg, int x) {
        constants$233.const$0.set(seg, x);
    }
    public static int debug_mv$get(MemorySegment seg, long index) {
        return (int)constants$233.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void debug_mv$set(MemorySegment seg, long index, int x) {
        constants$233.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle chroma_intra_matrix$VH() {
        return constants$233.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint16_t* chroma_intra_matrix;
     * }
     */
    public static MemorySegment chroma_intra_matrix$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$233.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint16_t* chroma_intra_matrix;
     * }
     */
    public static void chroma_intra_matrix$set(MemorySegment seg, MemorySegment x) {
        constants$233.const$1.set(seg, x);
    }
    public static MemorySegment chroma_intra_matrix$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$233.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void chroma_intra_matrix$set(MemorySegment seg, long index, MemorySegment x) {
        constants$233.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle dump_separator$VH() {
        return constants$233.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t* dump_separator;
     * }
     */
    public static MemorySegment dump_separator$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$233.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t* dump_separator;
     * }
     */
    public static void dump_separator$set(MemorySegment seg, MemorySegment x) {
        constants$233.const$2.set(seg, x);
    }
    public static MemorySegment dump_separator$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$233.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dump_separator$set(MemorySegment seg, long index, MemorySegment x) {
        constants$233.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle codec_whitelist$VH() {
        return constants$233.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* codec_whitelist;
     * }
     */
    public static MemorySegment codec_whitelist$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$233.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* codec_whitelist;
     * }
     */
    public static void codec_whitelist$set(MemorySegment seg, MemorySegment x) {
        constants$233.const$3.set(seg, x);
    }
    public static MemorySegment codec_whitelist$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$233.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void codec_whitelist$set(MemorySegment seg, long index, MemorySegment x) {
        constants$233.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle properties$VH() {
        return constants$233.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int properties;
     * }
     */
    public static int properties$get(MemorySegment seg) {
        return (int)constants$233.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int properties;
     * }
     */
    public static void properties$set(MemorySegment seg, int x) {
        constants$233.const$4.set(seg, x);
    }
    public static int properties$get(MemorySegment seg, long index) {
        return (int)constants$233.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void properties$set(MemorySegment seg, long index, int x) {
        constants$233.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle coded_side_data$VH() {
        return constants$233.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVPacketSideData* coded_side_data;
     * }
     */
    public static MemorySegment coded_side_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$233.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVPacketSideData* coded_side_data;
     * }
     */
    public static void coded_side_data$set(MemorySegment seg, MemorySegment x) {
        constants$233.const$5.set(seg, x);
    }
    public static MemorySegment coded_side_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$233.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void coded_side_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$233.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nb_coded_side_data$VH() {
        return constants$234.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nb_coded_side_data;
     * }
     */
    public static int nb_coded_side_data$get(MemorySegment seg) {
        return (int)constants$234.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nb_coded_side_data;
     * }
     */
    public static void nb_coded_side_data$set(MemorySegment seg, int x) {
        constants$234.const$0.set(seg, x);
    }
    public static int nb_coded_side_data$get(MemorySegment seg, long index) {
        return (int)constants$234.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_coded_side_data$set(MemorySegment seg, long index, int x) {
        constants$234.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hw_frames_ctx$VH() {
        return constants$234.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBufferRef* hw_frames_ctx;
     * }
     */
    public static MemorySegment hw_frames_ctx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$234.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBufferRef* hw_frames_ctx;
     * }
     */
    public static void hw_frames_ctx$set(MemorySegment seg, MemorySegment x) {
        constants$234.const$1.set(seg, x);
    }
    public static MemorySegment hw_frames_ctx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$234.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void hw_frames_ctx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$234.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sub_text_format$VH() {
        return constants$234.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int sub_text_format;
     * }
     */
    public static int sub_text_format$get(MemorySegment seg) {
        return (int)constants$234.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int sub_text_format;
     * }
     */
    public static void sub_text_format$set(MemorySegment seg, int x) {
        constants$234.const$2.set(seg, x);
    }
    public static int sub_text_format$get(MemorySegment seg, long index) {
        return (int)constants$234.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void sub_text_format$set(MemorySegment seg, long index, int x) {
        constants$234.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle trailing_padding$VH() {
        return constants$234.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int trailing_padding;
     * }
     */
    public static int trailing_padding$get(MemorySegment seg) {
        return (int)constants$234.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int trailing_padding;
     * }
     */
    public static void trailing_padding$set(MemorySegment seg, int x) {
        constants$234.const$3.set(seg, x);
    }
    public static int trailing_padding$get(MemorySegment seg, long index) {
        return (int)constants$234.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void trailing_padding$set(MemorySegment seg, long index, int x) {
        constants$234.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_pixels$VH() {
        return constants$234.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t max_pixels;
     * }
     */
    public static long max_pixels$get(MemorySegment seg) {
        return (long)constants$234.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t max_pixels;
     * }
     */
    public static void max_pixels$set(MemorySegment seg, long x) {
        constants$234.const$4.set(seg, x);
    }
    public static long max_pixels$get(MemorySegment seg, long index) {
        return (long)constants$234.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void max_pixels$set(MemorySegment seg, long index, long x) {
        constants$234.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hw_device_ctx$VH() {
        return constants$234.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBufferRef* hw_device_ctx;
     * }
     */
    public static MemorySegment hw_device_ctx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$234.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBufferRef* hw_device_ctx;
     * }
     */
    public static void hw_device_ctx$set(MemorySegment seg, MemorySegment x) {
        constants$234.const$5.set(seg, x);
    }
    public static MemorySegment hw_device_ctx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$234.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void hw_device_ctx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$234.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hwaccel_flags$VH() {
        return constants$235.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int hwaccel_flags;
     * }
     */
    public static int hwaccel_flags$get(MemorySegment seg) {
        return (int)constants$235.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int hwaccel_flags;
     * }
     */
    public static void hwaccel_flags$set(MemorySegment seg, int x) {
        constants$235.const$0.set(seg, x);
    }
    public static int hwaccel_flags$get(MemorySegment seg, long index) {
        return (int)constants$235.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hwaccel_flags$set(MemorySegment seg, long index, int x) {
        constants$235.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle apply_cropping$VH() {
        return constants$235.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int apply_cropping;
     * }
     */
    public static int apply_cropping$get(MemorySegment seg) {
        return (int)constants$235.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int apply_cropping;
     * }
     */
    public static void apply_cropping$set(MemorySegment seg, int x) {
        constants$235.const$1.set(seg, x);
    }
    public static int apply_cropping$get(MemorySegment seg, long index) {
        return (int)constants$235.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void apply_cropping$set(MemorySegment seg, long index, int x) {
        constants$235.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extra_hw_frames$VH() {
        return constants$235.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int extra_hw_frames;
     * }
     */
    public static int extra_hw_frames$get(MemorySegment seg) {
        return (int)constants$235.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int extra_hw_frames;
     * }
     */
    public static void extra_hw_frames$set(MemorySegment seg, int x) {
        constants$235.const$2.set(seg, x);
    }
    public static int extra_hw_frames$get(MemorySegment seg, long index) {
        return (int)constants$235.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void extra_hw_frames$set(MemorySegment seg, long index, int x) {
        constants$235.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle discard_damaged_percentage$VH() {
        return constants$235.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int discard_damaged_percentage;
     * }
     */
    public static int discard_damaged_percentage$get(MemorySegment seg) {
        return (int)constants$235.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int discard_damaged_percentage;
     * }
     */
    public static void discard_damaged_percentage$set(MemorySegment seg, int x) {
        constants$235.const$3.set(seg, x);
    }
    public static int discard_damaged_percentage$get(MemorySegment seg, long index) {
        return (int)constants$235.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void discard_damaged_percentage$set(MemorySegment seg, long index, int x) {
        constants$235.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_samples$VH() {
        return constants$235.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t max_samples;
     * }
     */
    public static long max_samples$get(MemorySegment seg) {
        return (long)constants$235.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t max_samples;
     * }
     */
    public static void max_samples$set(MemorySegment seg, long x) {
        constants$235.const$4.set(seg, x);
    }
    public static long max_samples$get(MemorySegment seg, long index) {
        return (long)constants$235.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void max_samples$set(MemorySegment seg, long index, long x) {
        constants$235.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle export_side_data$VH() {
        return constants$235.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int export_side_data;
     * }
     */
    public static int export_side_data$get(MemorySegment seg) {
        return (int)constants$235.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int export_side_data;
     * }
     */
    public static void export_side_data$set(MemorySegment seg, int x) {
        constants$235.const$5.set(seg, x);
    }
    public static int export_side_data$get(MemorySegment seg, long index) {
        return (int)constants$235.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void export_side_data$set(MemorySegment seg, long index, int x) {
        constants$235.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * int (*get_encode_buffer)(struct AVCodecContext*,AVPacket*,int);
     * }
     */
    public interface get_encode_buffer {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(get_encode_buffer fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$236.const$0, fi, constants$109.const$5, scope);
        }
        static get_encode_buffer ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)constants$222.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_encode_buffer$VH() {
        return constants$236.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_encode_buffer)(struct AVCodecContext*,AVPacket*,int);
     * }
     */
    public static MemorySegment get_encode_buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$236.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_encode_buffer)(struct AVCodecContext*,AVPacket*,int);
     * }
     */
    public static void get_encode_buffer$set(MemorySegment seg, MemorySegment x) {
        constants$236.const$1.set(seg, x);
    }
    public static MemorySegment get_encode_buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$236.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_encode_buffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$236.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_encode_buffer get_encode_buffer(MemorySegment segment, Arena scope) {
        return get_encode_buffer.ofAddress(get_encode_buffer$get(segment), scope);
    }
    public static MemorySegment ch_layout$slice(MemorySegment seg) {
        return seg.asSlice(920, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


