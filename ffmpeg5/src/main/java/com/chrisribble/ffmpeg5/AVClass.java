// Generated by jextract

package com.chrisribble.ffmpeg5;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVClass {
 *     char* class_name;
 *     char* (*item_name)(void*);
 *     struct AVOption* option;
 *     int version;
 *     int log_level_offset_offset;
 *     int parent_log_context_offset;
 *     enum AVClassCategory category;
 *     enum AVClassCategory (*get_category)(void*);
 *     int (*query_ranges)(struct AVOptionRanges**,void*,char*,int);
 *     void* (*child_next)(void*,void*);
 *     struct AVClass* (*child_class_iterate)(void**);
 * };
 * }
 */
public class AVClass {

    public static MemoryLayout $LAYOUT() {
        return constants$140.const$5;
    }
    public static VarHandle class_name$VH() {
        return constants$141.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* class_name;
     * }
     */
    public static MemorySegment class_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$141.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* class_name;
     * }
     */
    public static void class_name$set(MemorySegment seg, MemorySegment x) {
        constants$141.const$0.set(seg, x);
    }
    public static MemorySegment class_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$141.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void class_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$141.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * char* (*item_name)(void*);
     * }
     */
    public interface item_name {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(item_name fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$141.const$1, fi, constants$67.const$1, scope);
        }
        static item_name ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$141.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle item_name$VH() {
        return constants$141.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*item_name)(void*);
     * }
     */
    public static MemorySegment item_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$141.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*item_name)(void*);
     * }
     */
    public static void item_name$set(MemorySegment seg, MemorySegment x) {
        constants$141.const$3.set(seg, x);
    }
    public static MemorySegment item_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$141.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void item_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$141.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static item_name item_name(MemorySegment segment, Arena scope) {
        return item_name.ofAddress(item_name$get(segment), scope);
    }
    public static VarHandle option$VH() {
        return constants$141.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct AVOption* option;
     * }
     */
    public static MemorySegment option$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$141.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct AVOption* option;
     * }
     */
    public static void option$set(MemorySegment seg, MemorySegment x) {
        constants$141.const$4.set(seg, x);
    }
    public static MemorySegment option$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$141.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void option$set(MemorySegment seg, long index, MemorySegment x) {
        constants$141.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle version$VH() {
        return constants$141.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int version;
     * }
     */
    public static int version$get(MemorySegment seg) {
        return (int)constants$141.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int version;
     * }
     */
    public static void version$set(MemorySegment seg, int x) {
        constants$141.const$5.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)constants$141.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        constants$141.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle log_level_offset_offset$VH() {
        return constants$142.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int log_level_offset_offset;
     * }
     */
    public static int log_level_offset_offset$get(MemorySegment seg) {
        return (int)constants$142.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int log_level_offset_offset;
     * }
     */
    public static void log_level_offset_offset$set(MemorySegment seg, int x) {
        constants$142.const$0.set(seg, x);
    }
    public static int log_level_offset_offset$get(MemorySegment seg, long index) {
        return (int)constants$142.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void log_level_offset_offset$set(MemorySegment seg, long index, int x) {
        constants$142.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle parent_log_context_offset$VH() {
        return constants$142.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int parent_log_context_offset;
     * }
     */
    public static int parent_log_context_offset$get(MemorySegment seg) {
        return (int)constants$142.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int parent_log_context_offset;
     * }
     */
    public static void parent_log_context_offset$set(MemorySegment seg, int x) {
        constants$142.const$1.set(seg, x);
    }
    public static int parent_log_context_offset$get(MemorySegment seg, long index) {
        return (int)constants$142.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void parent_log_context_offset$set(MemorySegment seg, long index, int x) {
        constants$142.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle category$VH() {
        return constants$142.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVClassCategory category;
     * }
     */
    public static int category$get(MemorySegment seg) {
        return (int)constants$142.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVClassCategory category;
     * }
     */
    public static void category$set(MemorySegment seg, int x) {
        constants$142.const$2.set(seg, x);
    }
    public static int category$get(MemorySegment seg, long index) {
        return (int)constants$142.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void category$set(MemorySegment seg, long index, int x) {
        constants$142.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * enum AVClassCategory (*get_category)(void*);
     * }
     */
    public interface get_category {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_category fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$142.const$3, fi, constants$0.const$3, scope);
        }
        static get_category ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$142.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_category$VH() {
        return constants$142.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVClassCategory (*get_category)(void*);
     * }
     */
    public static MemorySegment get_category$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$142.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVClassCategory (*get_category)(void*);
     * }
     */
    public static void get_category$set(MemorySegment seg, MemorySegment x) {
        constants$142.const$5.set(seg, x);
    }
    public static MemorySegment get_category$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$142.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_category$set(MemorySegment seg, long index, MemorySegment x) {
        constants$142.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_category get_category(MemorySegment segment, Arena scope) {
        return get_category.ofAddress(get_category$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*query_ranges)(struct AVOptionRanges**,void*,char*,int);
     * }
     */
    public interface query_ranges {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(query_ranges fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$143.const$1, fi, constants$143.const$0, scope);
        }
        static query_ranges ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$143.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle query_ranges$VH() {
        return constants$143.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*query_ranges)(struct AVOptionRanges**,void*,char*,int);
     * }
     */
    public static MemorySegment query_ranges$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$143.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*query_ranges)(struct AVOptionRanges**,void*,char*,int);
     * }
     */
    public static void query_ranges$set(MemorySegment seg, MemorySegment x) {
        constants$143.const$3.set(seg, x);
    }
    public static MemorySegment query_ranges$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$143.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void query_ranges$set(MemorySegment seg, long index, MemorySegment x) {
        constants$143.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_ranges query_ranges(MemorySegment segment, Arena scope) {
        return query_ranges.ofAddress(query_ranges$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*child_next)(void*,void*);
     * }
     */
    public interface child_next {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(child_next fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$143.const$4, fi, constants$67.const$4, scope);
        }
        static child_next ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$143.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle child_next$VH() {
        return constants$144.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*child_next)(void*,void*);
     * }
     */
    public static MemorySegment child_next$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$144.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*child_next)(void*,void*);
     * }
     */
    public static void child_next$set(MemorySegment seg, MemorySegment x) {
        constants$144.const$0.set(seg, x);
    }
    public static MemorySegment child_next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$144.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void child_next$set(MemorySegment seg, long index, MemorySegment x) {
        constants$144.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static child_next child_next(MemorySegment segment, Arena scope) {
        return child_next.ofAddress(child_next$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct AVClass* (*child_class_iterate)(void**);
     * }
     */
    public interface child_class_iterate {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(child_class_iterate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$144.const$1, fi, constants$67.const$1, scope);
        }
        static child_class_iterate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$141.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle child_class_iterate$VH() {
        return constants$144.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct AVClass* (*child_class_iterate)(void**);
     * }
     */
    public static MemorySegment child_class_iterate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$144.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct AVClass* (*child_class_iterate)(void**);
     * }
     */
    public static void child_class_iterate$set(MemorySegment seg, MemorySegment x) {
        constants$144.const$2.set(seg, x);
    }
    public static MemorySegment child_class_iterate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$144.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void child_class_iterate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$144.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static child_class_iterate child_class_iterate(MemorySegment segment, Arena scope) {
        return child_class_iterate.ofAddress(child_class_iterate$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


