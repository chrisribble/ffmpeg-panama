// Generated by jextract

package com.chrisribble.ffmpeg5;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVBufferRef {
 *     AVBuffer* buffer;
 *     uint8_t* data;
 *     size_t size;
 * };
 * }
 */
public class AVBufferRef {

    public static MemoryLayout $LAYOUT() {
        return constants$150.const$5;
    }
    public static VarHandle buffer$VH() {
        return constants$151.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBuffer* buffer;
     * }
     */
    public static MemorySegment buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$151.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBuffer* buffer;
     * }
     */
    public static void buffer$set(MemorySegment seg, MemorySegment x) {
        constants$151.const$0.set(seg, x);
    }
    public static MemorySegment buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$151.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$151.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle data$VH() {
        return constants$151.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t* data;
     * }
     */
    public static MemorySegment data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$151.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t* data;
     * }
     */
    public static void data$set(MemorySegment seg, MemorySegment x) {
        constants$151.const$1.set(seg, x);
    }
    public static MemorySegment data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$151.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$151.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle size$VH() {
        return constants$151.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t size;
     * }
     */
    public static long size$get(MemorySegment seg) {
        return (long)constants$151.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t size;
     * }
     */
    public static void size$set(MemorySegment seg, long x) {
        constants$151.const$2.set(seg, x);
    }
    public static long size$get(MemorySegment seg, long index) {
        return (long)constants$151.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, long x) {
        constants$151.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


