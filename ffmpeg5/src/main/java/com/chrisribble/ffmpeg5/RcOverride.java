// Generated by jextract

package com.chrisribble.ffmpeg5;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct RcOverride {
 *     int start_frame;
 *     int end_frame;
 *     int qscale;
 *     float quality_factor;
 * };
 * }
 */
public class RcOverride {

    public static MemoryLayout $LAYOUT() {
        return constants$207.const$3;
    }
    public static VarHandle start_frame$VH() {
        return constants$207.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int start_frame;
     * }
     */
    public static int start_frame$get(MemorySegment seg) {
        return (int)constants$207.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int start_frame;
     * }
     */
    public static void start_frame$set(MemorySegment seg, int x) {
        constants$207.const$4.set(seg, x);
    }
    public static int start_frame$get(MemorySegment seg, long index) {
        return (int)constants$207.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void start_frame$set(MemorySegment seg, long index, int x) {
        constants$207.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle end_frame$VH() {
        return constants$207.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int end_frame;
     * }
     */
    public static int end_frame$get(MemorySegment seg) {
        return (int)constants$207.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int end_frame;
     * }
     */
    public static void end_frame$set(MemorySegment seg, int x) {
        constants$207.const$5.set(seg, x);
    }
    public static int end_frame$get(MemorySegment seg, long index) {
        return (int)constants$207.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void end_frame$set(MemorySegment seg, long index, int x) {
        constants$207.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle qscale$VH() {
        return constants$208.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int qscale;
     * }
     */
    public static int qscale$get(MemorySegment seg) {
        return (int)constants$208.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int qscale;
     * }
     */
    public static void qscale$set(MemorySegment seg, int x) {
        constants$208.const$0.set(seg, x);
    }
    public static int qscale$get(MemorySegment seg, long index) {
        return (int)constants$208.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void qscale$set(MemorySegment seg, long index, int x) {
        constants$208.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle quality_factor$VH() {
        return constants$208.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float quality_factor;
     * }
     */
    public static float quality_factor$get(MemorySegment seg) {
        return (float)constants$208.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float quality_factor;
     * }
     */
    public static void quality_factor$set(MemorySegment seg, float x) {
        constants$208.const$1.set(seg, x);
    }
    public static float quality_factor$get(MemorySegment seg, long index) {
        return (float)constants$208.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void quality_factor$set(MemorySegment seg, long index, float x) {
        constants$208.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


