// Generated by jextract

package com.chrisribble.ffmpeg5;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVOutputFormat {
 *     char* name;
 *     char* long_name;
 *     char* mime_type;
 *     char* extensions;
 *     enum AVCodecID audio_codec;
 *     enum AVCodecID video_codec;
 *     enum AVCodecID subtitle_codec;
 *     int flags;
 *     struct AVCodecTag** codec_tag;
 *     struct AVClass* priv_class;
 *     int priv_data_size;
 *     int flags_internal;
 *     int (*write_header)(struct AVFormatContext*);
 *     int (*write_packet)(struct AVFormatContext*,struct AVPacket*);
 *     int (*write_trailer)(struct AVFormatContext*);
 *     int (*interleave_packet)(struct AVFormatContext*,struct AVPacket*,int,int);
 *     int (*query_codec)(enum AVCodecID,int);
 *     void (*get_output_timestamp)(struct AVFormatContext*,int,long*,long*);
 *     int (*control_message)(struct AVFormatContext*,int,void*,unsigned long);
 *     int (*write_uncoded_frame)(struct AVFormatContext*,int,struct AVFrame**,unsigned int);
 *     int (*get_device_list)(struct AVFormatContext*,struct AVDeviceInfoList*);
 *     enum AVCodecID data_codec;
 *     int (*init)(struct AVFormatContext*);
 *     void (*deinit)(struct AVFormatContext*);
 *     int (*check_bitstream)(struct AVFormatContext*,struct AVStream*,struct AVPacket*);
 * };
 * }
 */
public class AVOutputFormat {

    public static MemoryLayout $LAYOUT() {
        return constants$292.const$0;
    }
    public static VarHandle name$VH() {
        return constants$292.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$292.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        constants$292.const$1.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$292.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$292.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle long_name$VH() {
        return constants$292.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* long_name;
     * }
     */
    public static MemorySegment long_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$292.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* long_name;
     * }
     */
    public static void long_name$set(MemorySegment seg, MemorySegment x) {
        constants$292.const$2.set(seg, x);
    }
    public static MemorySegment long_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$292.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void long_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$292.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mime_type$VH() {
        return constants$292.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* mime_type;
     * }
     */
    public static MemorySegment mime_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$292.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* mime_type;
     * }
     */
    public static void mime_type$set(MemorySegment seg, MemorySegment x) {
        constants$292.const$3.set(seg, x);
    }
    public static MemorySegment mime_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$292.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void mime_type$set(MemorySegment seg, long index, MemorySegment x) {
        constants$292.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extensions$VH() {
        return constants$292.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* extensions;
     * }
     */
    public static MemorySegment extensions$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$292.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* extensions;
     * }
     */
    public static void extensions$set(MemorySegment seg, MemorySegment x) {
        constants$292.const$4.set(seg, x);
    }
    public static MemorySegment extensions$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$292.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void extensions$set(MemorySegment seg, long index, MemorySegment x) {
        constants$292.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle audio_codec$VH() {
        return constants$292.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVCodecID audio_codec;
     * }
     */
    public static int audio_codec$get(MemorySegment seg) {
        return (int)constants$292.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVCodecID audio_codec;
     * }
     */
    public static void audio_codec$set(MemorySegment seg, int x) {
        constants$292.const$5.set(seg, x);
    }
    public static int audio_codec$get(MemorySegment seg, long index) {
        return (int)constants$292.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void audio_codec$set(MemorySegment seg, long index, int x) {
        constants$292.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle video_codec$VH() {
        return constants$293.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVCodecID video_codec;
     * }
     */
    public static int video_codec$get(MemorySegment seg) {
        return (int)constants$293.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVCodecID video_codec;
     * }
     */
    public static void video_codec$set(MemorySegment seg, int x) {
        constants$293.const$0.set(seg, x);
    }
    public static int video_codec$get(MemorySegment seg, long index) {
        return (int)constants$293.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void video_codec$set(MemorySegment seg, long index, int x) {
        constants$293.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle subtitle_codec$VH() {
        return constants$293.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVCodecID subtitle_codec;
     * }
     */
    public static int subtitle_codec$get(MemorySegment seg) {
        return (int)constants$293.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVCodecID subtitle_codec;
     * }
     */
    public static void subtitle_codec$set(MemorySegment seg, int x) {
        constants$293.const$1.set(seg, x);
    }
    public static int subtitle_codec$get(MemorySegment seg, long index) {
        return (int)constants$293.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void subtitle_codec$set(MemorySegment seg, long index, int x) {
        constants$293.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$293.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$293.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$293.const$2.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$293.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$293.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle codec_tag$VH() {
        return constants$293.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct AVCodecTag** codec_tag;
     * }
     */
    public static MemorySegment codec_tag$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$293.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct AVCodecTag** codec_tag;
     * }
     */
    public static void codec_tag$set(MemorySegment seg, MemorySegment x) {
        constants$293.const$3.set(seg, x);
    }
    public static MemorySegment codec_tag$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$293.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void codec_tag$set(MemorySegment seg, long index, MemorySegment x) {
        constants$293.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle priv_class$VH() {
        return constants$293.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct AVClass* priv_class;
     * }
     */
    public static MemorySegment priv_class$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$293.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct AVClass* priv_class;
     * }
     */
    public static void priv_class$set(MemorySegment seg, MemorySegment x) {
        constants$293.const$4.set(seg, x);
    }
    public static MemorySegment priv_class$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$293.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void priv_class$set(MemorySegment seg, long index, MemorySegment x) {
        constants$293.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle priv_data_size$VH() {
        return constants$293.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int priv_data_size;
     * }
     */
    public static int priv_data_size$get(MemorySegment seg) {
        return (int)constants$293.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int priv_data_size;
     * }
     */
    public static void priv_data_size$set(MemorySegment seg, int x) {
        constants$293.const$5.set(seg, x);
    }
    public static int priv_data_size$get(MemorySegment seg, long index) {
        return (int)constants$293.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void priv_data_size$set(MemorySegment seg, long index, int x) {
        constants$293.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags_internal$VH() {
        return constants$294.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flags_internal;
     * }
     */
    public static int flags_internal$get(MemorySegment seg) {
        return (int)constants$294.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flags_internal;
     * }
     */
    public static void flags_internal$set(MemorySegment seg, int x) {
        constants$294.const$0.set(seg, x);
    }
    public static int flags_internal$get(MemorySegment seg, long index) {
        return (int)constants$294.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void flags_internal$set(MemorySegment seg, long index, int x) {
        constants$294.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * int (*write_header)(struct AVFormatContext*);
     * }
     */
    public interface write_header {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(write_header fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$294.const$1, fi, constants$0.const$3, scope);
        }
        static write_header ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$142.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle write_header$VH() {
        return constants$294.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*write_header)(struct AVFormatContext*);
     * }
     */
    public static MemorySegment write_header$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$294.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*write_header)(struct AVFormatContext*);
     * }
     */
    public static void write_header$set(MemorySegment seg, MemorySegment x) {
        constants$294.const$2.set(seg, x);
    }
    public static MemorySegment write_header$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$294.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void write_header$set(MemorySegment seg, long index, MemorySegment x) {
        constants$294.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_header write_header(MemorySegment segment, Arena scope) {
        return write_header.ofAddress(write_header$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*write_packet)(struct AVFormatContext*,struct AVPacket*);
     * }
     */
    public interface write_packet {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(write_packet fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$294.const$3, fi, constants$66.const$1, scope);
        }
        static write_packet ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$112.const$3.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle write_packet$VH() {
        return constants$294.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*write_packet)(struct AVFormatContext*,struct AVPacket*);
     * }
     */
    public static MemorySegment write_packet$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$294.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*write_packet)(struct AVFormatContext*,struct AVPacket*);
     * }
     */
    public static void write_packet$set(MemorySegment seg, MemorySegment x) {
        constants$294.const$4.set(seg, x);
    }
    public static MemorySegment write_packet$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$294.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void write_packet$set(MemorySegment seg, long index, MemorySegment x) {
        constants$294.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_packet write_packet(MemorySegment segment, Arena scope) {
        return write_packet.ofAddress(write_packet$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*write_trailer)(struct AVFormatContext*);
     * }
     */
    public interface write_trailer {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(write_trailer fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$294.const$5, fi, constants$0.const$3, scope);
        }
        static write_trailer ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$142.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle write_trailer$VH() {
        return constants$295.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*write_trailer)(struct AVFormatContext*);
     * }
     */
    public static MemorySegment write_trailer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$295.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*write_trailer)(struct AVFormatContext*);
     * }
     */
    public static void write_trailer$set(MemorySegment seg, MemorySegment x) {
        constants$295.const$0.set(seg, x);
    }
    public static MemorySegment write_trailer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$295.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void write_trailer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$295.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_trailer write_trailer(MemorySegment segment, Arena scope) {
        return write_trailer.ofAddress(write_trailer$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*interleave_packet)(struct AVFormatContext*,struct AVPacket*,int,int);
     * }
     */
    public interface interleave_packet {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3);
        static MemorySegment allocate(interleave_packet fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$295.const$1, fi, constants$258.const$2, scope);
        }
        static interleave_packet ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3) -> {
                try {
                    return (int)constants$258.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle interleave_packet$VH() {
        return constants$295.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*interleave_packet)(struct AVFormatContext*,struct AVPacket*,int,int);
     * }
     */
    public static MemorySegment interleave_packet$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$295.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*interleave_packet)(struct AVFormatContext*,struct AVPacket*,int,int);
     * }
     */
    public static void interleave_packet$set(MemorySegment seg, MemorySegment x) {
        constants$295.const$2.set(seg, x);
    }
    public static MemorySegment interleave_packet$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$295.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void interleave_packet$set(MemorySegment seg, long index, MemorySegment x) {
        constants$295.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static interleave_packet interleave_packet(MemorySegment segment, Arena scope) {
        return interleave_packet.ofAddress(interleave_packet$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*query_codec)(enum AVCodecID,int);
     * }
     */
    public interface query_codec {

        int apply(int _x0, int _x1);
        static MemorySegment allocate(query_codec fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$295.const$3, fi, constants$0.const$5, scope);
        }
        static query_codec ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (int __x0, int __x1) -> {
                try {
                    return (int)constants$295.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle query_codec$VH() {
        return constants$295.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*query_codec)(enum AVCodecID,int);
     * }
     */
    public static MemorySegment query_codec$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$295.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*query_codec)(enum AVCodecID,int);
     * }
     */
    public static void query_codec$set(MemorySegment seg, MemorySegment x) {
        constants$295.const$5.set(seg, x);
    }
    public static MemorySegment query_codec$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$295.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void query_codec$set(MemorySegment seg, long index, MemorySegment x) {
        constants$295.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_codec query_codec(MemorySegment segment, Arena scope) {
        return query_codec.ofAddress(query_codec$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_output_timestamp)(struct AVFormatContext*,int,long*,long*);
     * }
     */
    public interface get_output_timestamp {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(get_output_timestamp fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$296.const$0, fi, constants$145.const$0, scope);
        }
        static get_output_timestamp ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    constants$145.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_output_timestamp$VH() {
        return constants$296.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_output_timestamp)(struct AVFormatContext*,int,long*,long*);
     * }
     */
    public static MemorySegment get_output_timestamp$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$296.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_output_timestamp)(struct AVFormatContext*,int,long*,long*);
     * }
     */
    public static void get_output_timestamp$set(MemorySegment seg, MemorySegment x) {
        constants$296.const$1.set(seg, x);
    }
    public static MemorySegment get_output_timestamp$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$296.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_output_timestamp$set(MemorySegment seg, long index, MemorySegment x) {
        constants$296.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_output_timestamp get_output_timestamp(MemorySegment segment, Arena scope) {
        return get_output_timestamp.ofAddress(get_output_timestamp$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*control_message)(struct AVFormatContext*,int,void*,unsigned long);
     * }
     */
    public interface control_message {

        int apply(java.lang.foreign.MemorySegment s, int type, java.lang.foreign.MemorySegment data, long data_size);
        static MemorySegment allocate(control_message fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$296.const$2, fi, constants$205.const$5, scope);
        }
        static control_message ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _s, int _type, java.lang.foreign.MemorySegment _data, long _data_size) -> {
                try {
                    return (int)constants$296.const$3.invokeExact(symbol, _s, _type, _data, _data_size);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle control_message$VH() {
        return constants$296.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*control_message)(struct AVFormatContext*,int,void*,unsigned long);
     * }
     */
    public static MemorySegment control_message$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$296.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*control_message)(struct AVFormatContext*,int,void*,unsigned long);
     * }
     */
    public static void control_message$set(MemorySegment seg, MemorySegment x) {
        constants$296.const$4.set(seg, x);
    }
    public static MemorySegment control_message$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$296.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void control_message$set(MemorySegment seg, long index, MemorySegment x) {
        constants$296.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static control_message control_message(MemorySegment segment, Arena scope) {
        return control_message.ofAddress(control_message$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*write_uncoded_frame)(struct AVFormatContext*,int,struct AVFrame**,unsigned int);
     * }
     */
    public interface write_uncoded_frame {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(write_uncoded_frame fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$296.const$5, fi, constants$181.const$2, scope);
        }
        static write_uncoded_frame ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$239.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle write_uncoded_frame$VH() {
        return constants$297.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*write_uncoded_frame)(struct AVFormatContext*,int,struct AVFrame**,unsigned int);
     * }
     */
    public static MemorySegment write_uncoded_frame$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$297.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*write_uncoded_frame)(struct AVFormatContext*,int,struct AVFrame**,unsigned int);
     * }
     */
    public static void write_uncoded_frame$set(MemorySegment seg, MemorySegment x) {
        constants$297.const$0.set(seg, x);
    }
    public static MemorySegment write_uncoded_frame$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$297.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void write_uncoded_frame$set(MemorySegment seg, long index, MemorySegment x) {
        constants$297.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_uncoded_frame write_uncoded_frame(MemorySegment segment, Arena scope) {
        return write_uncoded_frame.ofAddress(write_uncoded_frame$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_device_list)(struct AVFormatContext*,struct AVDeviceInfoList*);
     * }
     */
    public interface get_device_list {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(get_device_list fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$297.const$1, fi, constants$66.const$1, scope);
        }
        static get_device_list ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$112.const$3.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_device_list$VH() {
        return constants$297.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_device_list)(struct AVFormatContext*,struct AVDeviceInfoList*);
     * }
     */
    public static MemorySegment get_device_list$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$297.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_device_list)(struct AVFormatContext*,struct AVDeviceInfoList*);
     * }
     */
    public static void get_device_list$set(MemorySegment seg, MemorySegment x) {
        constants$297.const$2.set(seg, x);
    }
    public static MemorySegment get_device_list$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$297.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_device_list$set(MemorySegment seg, long index, MemorySegment x) {
        constants$297.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_device_list get_device_list(MemorySegment segment, Arena scope) {
        return get_device_list.ofAddress(get_device_list$get(segment), scope);
    }
    public static VarHandle data_codec$VH() {
        return constants$297.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVCodecID data_codec;
     * }
     */
    public static int data_codec$get(MemorySegment seg) {
        return (int)constants$297.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVCodecID data_codec;
     * }
     */
    public static void data_codec$set(MemorySegment seg, int x) {
        constants$297.const$3.set(seg, x);
    }
    public static int data_codec$get(MemorySegment seg, long index) {
        return (int)constants$297.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void data_codec$set(MemorySegment seg, long index, int x) {
        constants$297.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * int (*init)(struct AVFormatContext*);
     * }
     */
    public interface init {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(init fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$297.const$4, fi, constants$0.const$3, scope);
        }
        static init ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$142.const$4.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle init$VH() {
        return constants$297.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*init)(struct AVFormatContext*);
     * }
     */
    public static MemorySegment init$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$297.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*init)(struct AVFormatContext*);
     * }
     */
    public static void init$set(MemorySegment seg, MemorySegment x) {
        constants$297.const$5.set(seg, x);
    }
    public static MemorySegment init$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$297.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void init$set(MemorySegment seg, long index, MemorySegment x) {
        constants$297.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static init init(MemorySegment segment, Arena scope) {
        return init.ofAddress(init$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*deinit)(struct AVFormatContext*);
     * }
     */
    public interface deinit {

        void apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(deinit fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$298.const$0, fi, constants$70.const$2, scope);
        }
        static deinit ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    constants$152.const$3.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle deinit$VH() {
        return constants$298.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*deinit)(struct AVFormatContext*);
     * }
     */
    public static MemorySegment deinit$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$298.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*deinit)(struct AVFormatContext*);
     * }
     */
    public static void deinit$set(MemorySegment seg, MemorySegment x) {
        constants$298.const$1.set(seg, x);
    }
    public static MemorySegment deinit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$298.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void deinit$set(MemorySegment seg, long index, MemorySegment x) {
        constants$298.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static deinit deinit(MemorySegment segment, Arena scope) {
        return deinit.ofAddress(deinit$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*check_bitstream)(struct AVFormatContext*,struct AVStream*,struct AVPacket*);
     * }
     */
    public interface check_bitstream {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(check_bitstream fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$298.const$2, fi, constants$71.const$1, scope);
        }
        static check_bitstream ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$298.const$3.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle check_bitstream$VH() {
        return constants$298.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*check_bitstream)(struct AVFormatContext*,struct AVStream*,struct AVPacket*);
     * }
     */
    public static MemorySegment check_bitstream$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$298.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*check_bitstream)(struct AVFormatContext*,struct AVStream*,struct AVPacket*);
     * }
     */
    public static void check_bitstream$set(MemorySegment seg, MemorySegment x) {
        constants$298.const$4.set(seg, x);
    }
    public static MemorySegment check_bitstream$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$298.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void check_bitstream$set(MemorySegment seg, long index, MemorySegment x) {
        constants$298.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static check_bitstream check_bitstream(MemorySegment segment, Arena scope) {
        return check_bitstream.ofAddress(check_bitstream$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


