// Generated by jextract

package com.chrisribble.ffmpeg5;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FFmpeg5_1 {

    public static MethodHandle lrint$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5,"lrint");
    }
    /**
     * {@snippet :
     * long lrint(double __x);
     * }
     */
    public static long lrint(double __x) {
        var mh$ = lrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lrint$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$0,"__lrint");
    }
    /**
     * {@snippet :
     * long __lrint(double __x);
     * }
     */
    public static long __lrint(double __x) {
        var mh$ = __lrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llrint$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1,"llrint");
    }
    /**
     * {@snippet :
     * long long llrint(double __x);
     * }
     */
    public static long llrint(double __x) {
        var mh$ = llrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llrint$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$2,"__llrint");
    }
    /**
     * {@snippet :
     * long long __llrint(double __x);
     * }
     */
    public static long __llrint(double __x) {
        var mh$ = __llrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lround$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$3,"lround");
    }
    /**
     * {@snippet :
     * long lround(double __x);
     * }
     */
    public static long lround(double __x) {
        var mh$ = lround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lround$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$4,"__lround");
    }
    /**
     * {@snippet :
     * long __lround(double __x);
     * }
     */
    public static long __lround(double __x) {
        var mh$ = __lround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llround$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5,"llround");
    }
    /**
     * {@snippet :
     * long long llround(double __x);
     * }
     */
    public static long llround(double __x) {
        var mh$ = llround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llround$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$0,"__llround");
    }
    /**
     * {@snippet :
     * long long __llround(double __x);
     * }
     */
    public static long __llround(double __x) {
        var mh$ = __llround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdim$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"fdim");
    }
    /**
     * {@snippet :
     * double fdim(double __x, double __y);
     * }
     */
    public static double fdim(double __x, double __y) {
        var mh$ = fdim$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fdim$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$2,"__fdim");
    }
    /**
     * {@snippet :
     * double __fdim(double __x, double __y);
     * }
     */
    public static double __fdim(double __x, double __y) {
        var mh$ = __fdim$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmax$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$3,"fmax");
    }
    /**
     * {@snippet :
     * double fmax(double __x, double __y);
     * }
     */
    public static double fmax(double __x, double __y) {
        var mh$ = fmax$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmax$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$4,"__fmax");
    }
    /**
     * {@snippet :
     * double __fmax(double __x, double __y);
     * }
     */
    public static double __fmax(double __x, double __y) {
        var mh$ = __fmax$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmin$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$5,"fmin");
    }
    /**
     * {@snippet :
     * double fmin(double __x, double __y);
     * }
     */
    public static double fmin(double __x, double __y) {
        var mh$ = fmin$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmin$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$0,"__fmin");
    }
    /**
     * {@snippet :
     * double __fmin(double __x, double __y);
     * }
     */
    public static double __fmin(double __x, double __y) {
        var mh$ = __fmin$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fma$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$2,"fma");
    }
    /**
     * {@snippet :
     * double fma(double __x, double __y, double __z);
     * }
     */
    public static double fma(double __x, double __y, double __z) {
        var mh$ = fma$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fma$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$3,"__fma");
    }
    /**
     * {@snippet :
     * double __fma(double __x, double __y, double __z);
     * }
     */
    public static double __fma(double __x, double __y, double __z) {
        var mh$ = __fma$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalb$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4,"scalb");
    }
    /**
     * {@snippet :
     * double scalb(double __x, double __n);
     * }
     */
    public static double scalb(double __x, double __n) {
        var mh$ = scalb$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalb$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$5,"__scalb");
    }
    /**
     * {@snippet :
     * double __scalb(double __x, double __n);
     * }
     */
    public static double __scalb(double __x, double __n) {
        var mh$ = __scalb$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fpclassifyf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$1,"__fpclassifyf");
    }
    /**
     * {@snippet :
     * int __fpclassifyf(float __value);
     * }
     */
    public static int __fpclassifyf(float __value) {
        var mh$ = __fpclassifyf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __signbitf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$2,"__signbitf");
    }
    /**
     * {@snippet :
     * int __signbitf(float __value);
     * }
     */
    public static int __signbitf(float __value) {
        var mh$ = __signbitf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isinff$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$3,"__isinff");
    }
    /**
     * {@snippet :
     * int __isinff(float __value);
     * }
     */
    public static int __isinff(float __value) {
        var mh$ = __isinff$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __finitef$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$4,"__finitef");
    }
    /**
     * {@snippet :
     * int __finitef(float __value);
     * }
     */
    public static int __finitef(float __value) {
        var mh$ = __finitef$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$5,"__isnanf");
    }
    /**
     * {@snippet :
     * int __isnanf(float __value);
     * }
     */
    public static int __isnanf(float __value) {
        var mh$ = __isnanf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iseqsigf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$1,"__iseqsigf");
    }
    /**
     * {@snippet :
     * int __iseqsigf(float __x, float __y);
     * }
     */
    public static int __iseqsigf(float __x, float __y) {
        var mh$ = __iseqsigf$MH();
        try {
            return (int)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __issignalingf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$2,"__issignalingf");
    }
    /**
     * {@snippet :
     * int __issignalingf(float __value);
     * }
     */
    public static int __issignalingf(float __value) {
        var mh$ = __issignalingf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$4,"acosf");
    }
    /**
     * {@snippet :
     * float acosf(float __x);
     * }
     */
    public static float acosf(float __x) {
        var mh$ = acosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$5,"__acosf");
    }
    /**
     * {@snippet :
     * float __acosf(float __x);
     * }
     */
    public static float __acosf(float __x) {
        var mh$ = __acosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$0,"asinf");
    }
    /**
     * {@snippet :
     * float asinf(float __x);
     * }
     */
    public static float asinf(float __x) {
        var mh$ = asinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$1,"__asinf");
    }
    /**
     * {@snippet :
     * float __asinf(float __x);
     * }
     */
    public static float __asinf(float __x) {
        var mh$ = __asinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$2,"atanf");
    }
    /**
     * {@snippet :
     * float atanf(float __x);
     * }
     */
    public static float atanf(float __x) {
        var mh$ = atanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$3,"__atanf");
    }
    /**
     * {@snippet :
     * float __atanf(float __x);
     * }
     */
    public static float __atanf(float __x) {
        var mh$ = __atanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$5,"atan2f");
    }
    /**
     * {@snippet :
     * float atan2f(float __y, float __x);
     * }
     */
    public static float atan2f(float __y, float __x) {
        var mh$ = atan2f$MH();
        try {
            return (float)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$0,"__atan2f");
    }
    /**
     * {@snippet :
     * float __atan2f(float __y, float __x);
     * }
     */
    public static float __atan2f(float __y, float __x) {
        var mh$ = __atan2f$MH();
        try {
            return (float)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$1,"cosf");
    }
    /**
     * {@snippet :
     * float cosf(float __x);
     * }
     */
    public static float cosf(float __x) {
        var mh$ = cosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$2,"__cosf");
    }
    /**
     * {@snippet :
     * float __cosf(float __x);
     * }
     */
    public static float __cosf(float __x) {
        var mh$ = __cosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$3,"sinf");
    }
    /**
     * {@snippet :
     * float sinf(float __x);
     * }
     */
    public static float sinf(float __x) {
        var mh$ = sinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$4,"__sinf");
    }
    /**
     * {@snippet :
     * float __sinf(float __x);
     * }
     */
    public static float __sinf(float __x) {
        var mh$ = __sinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$5,"tanf");
    }
    /**
     * {@snippet :
     * float tanf(float __x);
     * }
     */
    public static float tanf(float __x) {
        var mh$ = tanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$0,"__tanf");
    }
    /**
     * {@snippet :
     * float __tanf(float __x);
     * }
     */
    public static float __tanf(float __x) {
        var mh$ = __tanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle coshf$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$1,"coshf");
    }
    /**
     * {@snippet :
     * float coshf(float __x);
     * }
     */
    public static float coshf(float __x) {
        var mh$ = coshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __coshf$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$2,"__coshf");
    }
    /**
     * {@snippet :
     * float __coshf(float __x);
     * }
     */
    public static float __coshf(float __x) {
        var mh$ = __coshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$3,"sinhf");
    }
    /**
     * {@snippet :
     * float sinhf(float __x);
     * }
     */
    public static float sinhf(float __x) {
        var mh$ = sinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$4,"__sinhf");
    }
    /**
     * {@snippet :
     * float __sinhf(float __x);
     * }
     */
    public static float __sinhf(float __x) {
        var mh$ = __sinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$5,"tanhf");
    }
    /**
     * {@snippet :
     * float tanhf(float __x);
     * }
     */
    public static float tanhf(float __x) {
        var mh$ = tanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$0,"__tanhf");
    }
    /**
     * {@snippet :
     * float __tanhf(float __x);
     * }
     */
    public static float __tanhf(float __x) {
        var mh$ = __tanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acoshf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$1,"acoshf");
    }
    /**
     * {@snippet :
     * float acoshf(float __x);
     * }
     */
    public static float acoshf(float __x) {
        var mh$ = acoshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acoshf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$2,"__acoshf");
    }
    /**
     * {@snippet :
     * float __acoshf(float __x);
     * }
     */
    public static float __acoshf(float __x) {
        var mh$ = __acoshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$3,"asinhf");
    }
    /**
     * {@snippet :
     * float asinhf(float __x);
     * }
     */
    public static float asinhf(float __x) {
        var mh$ = asinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$4,"__asinhf");
    }
    /**
     * {@snippet :
     * float __asinhf(float __x);
     * }
     */
    public static float __asinhf(float __x) {
        var mh$ = __asinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$5,"atanhf");
    }
    /**
     * {@snippet :
     * float atanhf(float __x);
     * }
     */
    public static float atanhf(float __x) {
        var mh$ = atanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$0,"__atanhf");
    }
    /**
     * {@snippet :
     * float __atanhf(float __x);
     * }
     */
    public static float __atanhf(float __x) {
        var mh$ = __atanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$1,"expf");
    }
    /**
     * {@snippet :
     * float expf(float __x);
     * }
     */
    public static float expf(float __x) {
        var mh$ = expf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __expf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$2,"__expf");
    }
    /**
     * {@snippet :
     * float __expf(float __x);
     * }
     */
    public static float __expf(float __x) {
        var mh$ = __expf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle frexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$4,"frexpf");
    }
    /**
     * {@snippet :
     * float frexpf(float __x, int* __exponent);
     * }
     */
    public static float frexpf(float __x, MemorySegment __exponent) {
        var mh$ = frexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __frexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$5,"__frexpf");
    }
    /**
     * {@snippet :
     * float __frexpf(float __x, int* __exponent);
     * }
     */
    public static float __frexpf(float __x, MemorySegment __exponent) {
        var mh$ = __frexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$1,"ldexpf");
    }
    /**
     * {@snippet :
     * float ldexpf(float __x, int __exponent);
     * }
     */
    public static float ldexpf(float __x, int __exponent) {
        var mh$ = ldexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ldexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$2,"__ldexpf");
    }
    /**
     * {@snippet :
     * float __ldexpf(float __x, int __exponent);
     * }
     */
    public static float __ldexpf(float __x, int __exponent) {
        var mh$ = __ldexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logf$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$3,"logf");
    }
    /**
     * {@snippet :
     * float logf(float __x);
     * }
     */
    public static float logf(float __x) {
        var mh$ = logf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __logf$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$4,"__logf");
    }
    /**
     * {@snippet :
     * float __logf(float __x);
     * }
     */
    public static float __logf(float __x) {
        var mh$ = __logf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$5,"log10f");
    }
    /**
     * {@snippet :
     * float log10f(float __x);
     * }
     */
    public static float log10f(float __x) {
        var mh$ = log10f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$0,"__log10f");
    }
    /**
     * {@snippet :
     * float __log10f(float __x);
     * }
     */
    public static float __log10f(float __x) {
        var mh$ = __log10f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle modff$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$1,"modff");
    }
    /**
     * {@snippet :
     * float modff(float __x, float* __iptr);
     * }
     */
    public static float modff(float __x, MemorySegment __iptr) {
        var mh$ = modff$MH();
        try {
            return (float)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __modff$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$2,"__modff");
    }
    /**
     * {@snippet :
     * float __modff(float __x, float* __iptr);
     * }
     */
    public static float __modff(float __x, MemorySegment __iptr) {
        var mh$ = __modff$MH();
        try {
            return (float)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expm1f$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$3,"expm1f");
    }
    /**
     * {@snippet :
     * float expm1f(float __x);
     * }
     */
    public static float expm1f(float __x) {
        var mh$ = expm1f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __expm1f$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$4,"__expm1f");
    }
    /**
     * {@snippet :
     * float __expm1f(float __x);
     * }
     */
    public static float __expm1f(float __x) {
        var mh$ = __expm1f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log1pf$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5,"log1pf");
    }
    /**
     * {@snippet :
     * float log1pf(float __x);
     * }
     */
    public static float log1pf(float __x) {
        var mh$ = log1pf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log1pf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$0,"__log1pf");
    }
    /**
     * {@snippet :
     * float __log1pf(float __x);
     * }
     */
    public static float __log1pf(float __x) {
        var mh$ = __log1pf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$1,"logbf");
    }
    /**
     * {@snippet :
     * float logbf(float __x);
     * }
     */
    public static float logbf(float __x) {
        var mh$ = logbf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$2,"__logbf");
    }
    /**
     * {@snippet :
     * float __logbf(float __x);
     * }
     */
    public static float __logbf(float __x) {
        var mh$ = __logbf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp2f$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$3,"exp2f");
    }
    /**
     * {@snippet :
     * float exp2f(float __x);
     * }
     */
    public static float exp2f(float __x) {
        var mh$ = exp2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __exp2f$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$4,"__exp2f");
    }
    /**
     * {@snippet :
     * float __exp2f(float __x);
     * }
     */
    public static float __exp2f(float __x) {
        var mh$ = __exp2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log2f$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$5,"log2f");
    }
    /**
     * {@snippet :
     * float log2f(float __x);
     * }
     */
    public static float log2f(float __x) {
        var mh$ = log2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log2f$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$0,"__log2f");
    }
    /**
     * {@snippet :
     * float __log2f(float __x);
     * }
     */
    public static float __log2f(float __x) {
        var mh$ = __log2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle powf$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$1,"powf");
    }
    /**
     * {@snippet :
     * float powf(float __x, float __y);
     * }
     */
    public static float powf(float __x, float __y) {
        var mh$ = powf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __powf$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$2,"__powf");
    }
    /**
     * {@snippet :
     * float __powf(float __x, float __y);
     * }
     */
    public static float __powf(float __x, float __y) {
        var mh$ = __powf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$3,"sqrtf");
    }
    /**
     * {@snippet :
     * float sqrtf(float __x);
     * }
     */
    public static float sqrtf(float __x) {
        var mh$ = sqrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$4,"__sqrtf");
    }
    /**
     * {@snippet :
     * float __sqrtf(float __x);
     * }
     */
    public static float __sqrtf(float __x) {
        var mh$ = __sqrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hypotf$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$5,"hypotf");
    }
    /**
     * {@snippet :
     * float hypotf(float __x, float __y);
     * }
     */
    public static float hypotf(float __x, float __y) {
        var mh$ = hypotf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __hypotf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$0,"__hypotf");
    }
    /**
     * {@snippet :
     * float __hypotf(float __x, float __y);
     * }
     */
    public static float __hypotf(float __x, float __y) {
        var mh$ = __hypotf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cbrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$1,"cbrtf");
    }
    /**
     * {@snippet :
     * float cbrtf(float __x);
     * }
     */
    public static float cbrtf(float __x) {
        var mh$ = cbrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cbrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$2,"__cbrtf");
    }
    /**
     * {@snippet :
     * float __cbrtf(float __x);
     * }
     */
    public static float __cbrtf(float __x) {
        var mh$ = __cbrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$3,"ceilf");
    }
    /**
     * {@snippet :
     * float ceilf(float __x);
     * }
     */
    public static float ceilf(float __x) {
        var mh$ = ceilf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$4,"__ceilf");
    }
    /**
     * {@snippet :
     * float __ceilf(float __x);
     * }
     */
    public static float __ceilf(float __x) {
        var mh$ = __ceilf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$5,"fabsf");
    }
    /**
     * {@snippet :
     * float fabsf(float __x);
     * }
     */
    public static float fabsf(float __x) {
        var mh$ = fabsf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$0,"__fabsf");
    }
    /**
     * {@snippet :
     * float __fabsf(float __x);
     * }
     */
    public static float __fabsf(float __x) {
        var mh$ = __fabsf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$1,"floorf");
    }
    /**
     * {@snippet :
     * float floorf(float __x);
     * }
     */
    public static float floorf(float __x) {
        var mh$ = floorf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$2,"__floorf");
    }
    /**
     * {@snippet :
     * float __floorf(float __x);
     * }
     */
    public static float __floorf(float __x) {
        var mh$ = __floorf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$3,"fmodf");
    }
    /**
     * {@snippet :
     * float fmodf(float __x, float __y);
     * }
     */
    public static float fmodf(float __x, float __y) {
        var mh$ = fmodf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$4,"__fmodf");
    }
    /**
     * {@snippet :
     * float __fmodf(float __x, float __y);
     * }
     */
    public static float __fmodf(float __x, float __y) {
        var mh$ = __fmodf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isinff$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$5,"isinff");
    }
    /**
     * {@snippet :
     * int isinff(float __value);
     * }
     */
    public static int isinff(float __value) {
        var mh$ = isinff$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle finitef$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$0,"finitef");
    }
    /**
     * {@snippet :
     * int finitef(float __value);
     * }
     */
    public static int finitef(float __value) {
        var mh$ = finitef$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dremf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$1,"dremf");
    }
    /**
     * {@snippet :
     * float dremf(float __x, float __y);
     * }
     */
    public static float dremf(float __x, float __y) {
        var mh$ = dremf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __dremf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$2,"__dremf");
    }
    /**
     * {@snippet :
     * float __dremf(float __x, float __y);
     * }
     */
    public static float __dremf(float __x, float __y) {
        var mh$ = __dremf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle significandf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$3,"significandf");
    }
    /**
     * {@snippet :
     * float significandf(float __x);
     * }
     */
    public static float significandf(float __x) {
        var mh$ = significandf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __significandf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$4,"__significandf");
    }
    /**
     * {@snippet :
     * float __significandf(float __x);
     * }
     */
    public static float __significandf(float __x) {
        var mh$ = __significandf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$5,"copysignf");
    }
    /**
     * {@snippet :
     * float copysignf(float __x, float __y);
     * }
     */
    public static float copysignf(float __x, float __y) {
        var mh$ = copysignf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$0,"__copysignf");
    }
    /**
     * {@snippet :
     * float __copysignf(float __x, float __y);
     * }
     */
    public static float __copysignf(float __x, float __y) {
        var mh$ = __copysignf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanf$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$2,"nanf");
    }
    /**
     * {@snippet :
     * float nanf(char* __tagb);
     * }
     */
    public static float nanf(MemorySegment __tagb) {
        var mh$ = nanf$MH();
        try {
            return (float)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nanf$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$3,"__nanf");
    }
    /**
     * {@snippet :
     * float __nanf(char* __tagb);
     * }
     */
    public static float __nanf(MemorySegment __tagb) {
        var mh$ = __nanf$MH();
        try {
            return (float)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$4,"isnanf");
    }
    /**
     * {@snippet :
     * int isnanf(float __value);
     * }
     */
    public static int isnanf(float __value) {
        var mh$ = isnanf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j0f$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$5,"j0f");
    }
    /**
     * {@snippet :
     * float j0f(float);
     * }
     */
    public static float j0f(float x0) {
        var mh$ = j0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j0f$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$0,"__j0f");
    }
    /**
     * {@snippet :
     * float __j0f(float);
     * }
     */
    public static float __j0f(float x0) {
        var mh$ = __j0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j1f$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1,"j1f");
    }
    /**
     * {@snippet :
     * float j1f(float);
     * }
     */
    public static float j1f(float x0) {
        var mh$ = j1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j1f$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$2,"__j1f");
    }
    /**
     * {@snippet :
     * float __j1f(float);
     * }
     */
    public static float __j1f(float x0) {
        var mh$ = __j1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jnf$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$4,"jnf");
    }
    /**
     * {@snippet :
     * float jnf(int, float);
     * }
     */
    public static float jnf(int x0, float x1) {
        var mh$ = jnf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __jnf$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$5,"__jnf");
    }
    /**
     * {@snippet :
     * float __jnf(int, float);
     * }
     */
    public static float __jnf(int x0, float x1) {
        var mh$ = __jnf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y0f$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$0,"y0f");
    }
    /**
     * {@snippet :
     * float y0f(float);
     * }
     */
    public static float y0f(float x0) {
        var mh$ = y0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y0f$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$1,"__y0f");
    }
    /**
     * {@snippet :
     * float __y0f(float);
     * }
     */
    public static float __y0f(float x0) {
        var mh$ = __y0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y1f$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$2,"y1f");
    }
    /**
     * {@snippet :
     * float y1f(float);
     * }
     */
    public static float y1f(float x0) {
        var mh$ = y1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y1f$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$3,"__y1f");
    }
    /**
     * {@snippet :
     * float __y1f(float);
     * }
     */
    public static float __y1f(float x0) {
        var mh$ = __y1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ynf$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$4,"ynf");
    }
    /**
     * {@snippet :
     * float ynf(int, float);
     * }
     */
    public static float ynf(int x0, float x1) {
        var mh$ = ynf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ynf$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$5,"__ynf");
    }
    /**
     * {@snippet :
     * float __ynf(int, float);
     * }
     */
    public static float __ynf(int x0, float x1) {
        var mh$ = __ynf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erff$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$0,"erff");
    }
    /**
     * {@snippet :
     * float erff(float);
     * }
     */
    public static float erff(float x0) {
        var mh$ = erff$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erff$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$1,"__erff");
    }
    /**
     * {@snippet :
     * float __erff(float);
     * }
     */
    public static float __erff(float x0) {
        var mh$ = __erff$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erfcf$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$2,"erfcf");
    }
    /**
     * {@snippet :
     * float erfcf(float);
     * }
     */
    public static float erfcf(float x0) {
        var mh$ = erfcf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erfcf$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$3,"__erfcf");
    }
    /**
     * {@snippet :
     * float __erfcf(float);
     * }
     */
    public static float __erfcf(float x0) {
        var mh$ = __erfcf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$4,"lgammaf");
    }
    /**
     * {@snippet :
     * float lgammaf(float);
     * }
     */
    public static float lgammaf(float x0) {
        var mh$ = lgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$5,"__lgammaf");
    }
    /**
     * {@snippet :
     * float __lgammaf(float);
     * }
     */
    public static float __lgammaf(float x0) {
        var mh$ = __lgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$0,"tgammaf");
    }
    /**
     * {@snippet :
     * float tgammaf(float);
     * }
     */
    public static float tgammaf(float x0) {
        var mh$ = tgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$1,"__tgammaf");
    }
    /**
     * {@snippet :
     * float __tgammaf(float);
     * }
     */
    public static float __tgammaf(float x0) {
        var mh$ = __tgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$2,"gammaf");
    }
    /**
     * {@snippet :
     * float gammaf(float);
     * }
     */
    public static float gammaf(float x0) {
        var mh$ = gammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __gammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$3,"__gammaf");
    }
    /**
     * {@snippet :
     * float __gammaf(float);
     * }
     */
    public static float __gammaf(float x0) {
        var mh$ = __gammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgammaf_r$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$4,"lgammaf_r");
    }
    /**
     * {@snippet :
     * float lgammaf_r(float, int* __signgamp);
     * }
     */
    public static float lgammaf_r(float x0, MemorySegment __signgamp) {
        var mh$ = lgammaf_r$MH();
        try {
            return (float)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgammaf_r$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$5,"__lgammaf_r");
    }
    /**
     * {@snippet :
     * float __lgammaf_r(float, int* __signgamp);
     * }
     */
    public static float __lgammaf_r(float x0, MemorySegment __signgamp) {
        var mh$ = __lgammaf_r$MH();
        try {
            return (float)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rintf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$0,"rintf");
    }
    /**
     * {@snippet :
     * float rintf(float __x);
     * }
     */
    public static float rintf(float __x) {
        var mh$ = rintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __rintf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$1,"__rintf");
    }
    /**
     * {@snippet :
     * float __rintf(float __x);
     * }
     */
    public static float __rintf(float __x) {
        var mh$ = __rintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$2,"nextafterf");
    }
    /**
     * {@snippet :
     * float nextafterf(float __x, float __y);
     * }
     */
    public static float nextafterf(float __x, float __y) {
        var mh$ = nextafterf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$3,"__nextafterf");
    }
    /**
     * {@snippet :
     * float __nextafterf(float __x, float __y);
     * }
     */
    public static float __nextafterf(float __x, float __y) {
        var mh$ = __nextafterf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remainderf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$4,"remainderf");
    }
    /**
     * {@snippet :
     * float remainderf(float __x, float __y);
     * }
     */
    public static float remainderf(float __x, float __y) {
        var mh$ = remainderf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remainderf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$5,"__remainderf");
    }
    /**
     * {@snippet :
     * float __remainderf(float __x, float __y);
     * }
     */
    public static float __remainderf(float __x, float __y) {
        var mh$ = __remainderf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$0,"scalbnf");
    }
    /**
     * {@snippet :
     * float scalbnf(float __x, int __n);
     * }
     */
    public static float scalbnf(float __x, int __n) {
        var mh$ = scalbnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$1,"__scalbnf");
    }
    /**
     * {@snippet :
     * float __scalbnf(float __x, int __n);
     * }
     */
    public static float __scalbnf(float __x, int __n) {
        var mh$ = __scalbnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ilogbf$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$2,"ilogbf");
    }
    /**
     * {@snippet :
     * int ilogbf(float __x);
     * }
     */
    public static int ilogbf(float __x) {
        var mh$ = ilogbf$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ilogbf$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$3,"__ilogbf");
    }
    /**
     * {@snippet :
     * int __ilogbf(float __x);
     * }
     */
    public static int __ilogbf(float __x) {
        var mh$ = __ilogbf$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalblnf$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$5,"scalblnf");
    }
    /**
     * {@snippet :
     * float scalblnf(float __x, long __n);
     * }
     */
    public static float scalblnf(float __x, long __n) {
        var mh$ = scalblnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalblnf$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$0,"__scalblnf");
    }
    /**
     * {@snippet :
     * float __scalblnf(float __x, long __n);
     * }
     */
    public static float __scalblnf(float __x, long __n) {
        var mh$ = __scalblnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nearbyintf$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$1,"nearbyintf");
    }
    /**
     * {@snippet :
     * float nearbyintf(float __x);
     * }
     */
    public static float nearbyintf(float __x) {
        var mh$ = nearbyintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nearbyintf$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$2,"__nearbyintf");
    }
    /**
     * {@snippet :
     * float __nearbyintf(float __x);
     * }
     */
    public static float __nearbyintf(float __x) {
        var mh$ = __nearbyintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$3,"roundf");
    }
    /**
     * {@snippet :
     * float roundf(float __x);
     * }
     */
    public static float roundf(float __x) {
        var mh$ = roundf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$4,"__roundf");
    }
    /**
     * {@snippet :
     * float __roundf(float __x);
     * }
     */
    public static float __roundf(float __x) {
        var mh$ = __roundf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$5,"truncf");
    }
    /**
     * {@snippet :
     * float truncf(float __x);
     * }
     */
    public static float truncf(float __x) {
        var mh$ = truncf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$0,"__truncf");
    }
    /**
     * {@snippet :
     * float __truncf(float __x);
     * }
     */
    public static float __truncf(float __x) {
        var mh$ = __truncf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remquof$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$2,"remquof");
    }
    /**
     * {@snippet :
     * float remquof(float __x, float __y, int* __quo);
     * }
     */
    public static float remquof(float __x, float __y, MemorySegment __quo) {
        var mh$ = remquof$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remquof$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$3,"__remquof");
    }
    /**
     * {@snippet :
     * float __remquof(float __x, float __y, int* __quo);
     * }
     */
    public static float __remquof(float __x, float __y, MemorySegment __quo) {
        var mh$ = __remquof$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$5,"lrintf");
    }
    /**
     * {@snippet :
     * long lrintf(float __x);
     * }
     */
    public static long lrintf(float __x) {
        var mh$ = lrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$0,"__lrintf");
    }
    /**
     * {@snippet :
     * long __lrintf(float __x);
     * }
     */
    public static long __lrintf(float __x) {
        var mh$ = __lrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$1,"llrintf");
    }
    /**
     * {@snippet :
     * long long llrintf(float __x);
     * }
     */
    public static long llrintf(float __x) {
        var mh$ = llrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$2,"__llrintf");
    }
    /**
     * {@snippet :
     * long long __llrintf(float __x);
     * }
     */
    public static long __llrintf(float __x) {
        var mh$ = __llrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$3,"lroundf");
    }
    /**
     * {@snippet :
     * long lroundf(float __x);
     * }
     */
    public static long lroundf(float __x) {
        var mh$ = lroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$4,"__lroundf");
    }
    /**
     * {@snippet :
     * long __lroundf(float __x);
     * }
     */
    public static long __lroundf(float __x) {
        var mh$ = __lroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$5,"llroundf");
    }
    /**
     * {@snippet :
     * long long llroundf(float __x);
     * }
     */
    public static long llroundf(float __x) {
        var mh$ = llroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$0,"__llroundf");
    }
    /**
     * {@snippet :
     * long long __llroundf(float __x);
     * }
     */
    public static long __llroundf(float __x) {
        var mh$ = __llroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdimf$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$1,"fdimf");
    }
    /**
     * {@snippet :
     * float fdimf(float __x, float __y);
     * }
     */
    public static float fdimf(float __x, float __y) {
        var mh$ = fdimf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fdimf$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$2,"__fdimf");
    }
    /**
     * {@snippet :
     * float __fdimf(float __x, float __y);
     * }
     */
    public static float __fdimf(float __x, float __y) {
        var mh$ = __fdimf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmaxf$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$3,"fmaxf");
    }
    /**
     * {@snippet :
     * float fmaxf(float __x, float __y);
     * }
     */
    public static float fmaxf(float __x, float __y) {
        var mh$ = fmaxf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmaxf$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$4,"__fmaxf");
    }
    /**
     * {@snippet :
     * float __fmaxf(float __x, float __y);
     * }
     */
    public static float __fmaxf(float __x, float __y) {
        var mh$ = __fmaxf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fminf$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$5,"fminf");
    }
    /**
     * {@snippet :
     * float fminf(float __x, float __y);
     * }
     */
    public static float fminf(float __x, float __y) {
        var mh$ = fminf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fminf$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$0,"__fminf");
    }
    /**
     * {@snippet :
     * float __fminf(float __x, float __y);
     * }
     */
    public static float __fminf(float __x, float __y) {
        var mh$ = __fminf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmaf$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$2,"fmaf");
    }
    /**
     * {@snippet :
     * float fmaf(float __x, float __y, float __z);
     * }
     */
    public static float fmaf(float __x, float __y, float __z) {
        var mh$ = fmaf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmaf$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$3,"__fmaf");
    }
    /**
     * {@snippet :
     * float __fmaf(float __x, float __y, float __z);
     * }
     */
    public static float __fmaf(float __x, float __y, float __z) {
        var mh$ = __fmaf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbf$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$4,"scalbf");
    }
    /**
     * {@snippet :
     * float scalbf(float __x, float __n);
     * }
     */
    public static float scalbf(float __x, float __n) {
        var mh$ = scalbf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbf$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$5,"__scalbf");
    }
    /**
     * {@snippet :
     * float __scalbf(float __x, float __n);
     * }
     */
    public static float __scalbf(float __x, float __n) {
        var mh$ = __scalbf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout signgam$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle signgam$VH() {
        return constants$59.const$0;
    }
    public static MemorySegment signgam$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$59.const$1,"signgam");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int signgam;
     * }
     */
    public static int signgam$get() {
        return (int) constants$59.const$0.get(RuntimeHelper.requireNonNull(constants$59.const$1, "signgam"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int signgam;
     * }
     */
    public static void signgam$set(int x) {
        constants$59.const$0.set(RuntimeHelper.requireNonNull(constants$59.const$1, "signgam"), x);
    }
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long off_t;
     * }
     */
    public static final OfLong off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = JAVA_LONG;
    public static MemoryLayout stdin$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle stdin$VH() {
        return constants$65.const$2;
    }
    public static MemorySegment stdin$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$65.const$3,"stdin");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * struct _IO_FILE* stdin;
     * }
     */
    public static MemorySegment stdin$get() {
        return (java.lang.foreign.MemorySegment) constants$65.const$2.get(RuntimeHelper.requireNonNull(constants$65.const$3, "stdin"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * struct _IO_FILE* stdin;
     * }
     */
    public static void stdin$set(MemorySegment x) {
        constants$65.const$2.set(RuntimeHelper.requireNonNull(constants$65.const$3, "stdin"), x);
    }
    public static MemoryLayout stdout$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle stdout$VH() {
        return constants$65.const$2;
    }
    public static MemorySegment stdout$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$65.const$4,"stdout");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * struct _IO_FILE* stdout;
     * }
     */
    public static MemorySegment stdout$get() {
        return (java.lang.foreign.MemorySegment) constants$65.const$2.get(RuntimeHelper.requireNonNull(constants$65.const$4, "stdout"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * struct _IO_FILE* stdout;
     * }
     */
    public static void stdout$set(MemorySegment x) {
        constants$65.const$2.set(RuntimeHelper.requireNonNull(constants$65.const$4, "stdout"), x);
    }
    public static MemoryLayout stderr$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle stderr$VH() {
        return constants$65.const$2;
    }
    public static MemorySegment stderr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$65.const$5,"stderr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * struct _IO_FILE* stderr;
     * }
     */
    public static MemorySegment stderr$get() {
        return (java.lang.foreign.MemorySegment) constants$65.const$2.get(RuntimeHelper.requireNonNull(constants$65.const$5, "stderr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * struct _IO_FILE* stderr;
     * }
     */
    public static void stderr$set(MemorySegment x) {
        constants$65.const$2.set(RuntimeHelper.requireNonNull(constants$65.const$5, "stderr"), x);
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$0,"remove");
    }
    /**
     * {@snippet :
     * int remove(char* __filename);
     * }
     */
    public static int remove(MemorySegment __filename) {
        var mh$ = remove$MH();
        try {
            return (int)mh$.invokeExact(__filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$2,"rename");
    }
    /**
     * {@snippet :
     * int rename(char* __old, char* __new);
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new) {
        var mh$ = rename$MH();
        try {
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$4,"renameat");
    }
    /**
     * {@snippet :
     * int renameat(int __oldfd, char* __old, int __newfd, char* __new);
     * }
     */
    public static int renameat(int __oldfd, MemorySegment __old, int __newfd, MemorySegment __new) {
        var mh$ = renameat$MH();
        try {
            return (int)mh$.invokeExact(__oldfd, __old, __newfd, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$5,"fclose");
    }
    /**
     * {@snippet :
     * int fclose(struct _IO_FILE* __stream);
     * }
     */
    public static int fclose(MemorySegment __stream) {
        var mh$ = fclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$0,"tmpfile");
    }
    /**
     * {@snippet :
     * struct _IO_FILE* tmpfile();
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$2,"tmpnam");
    }
    /**
     * {@snippet :
     * char* tmpnam(char [20]);
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0) {
        var mh$ = tmpnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam_r$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$3,"tmpnam_r");
    }
    /**
     * {@snippet :
     * char* tmpnam_r(char __s[20]);
     * }
     */
    public static MemorySegment tmpnam_r(MemorySegment __s) {
        var mh$ = tmpnam_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$5,"tempnam");
    }
    /**
     * {@snippet :
     * char* tempnam(char* __dir, char* __pfx);
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __pfx) {
        var mh$ = tempnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dir, __pfx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$0,"fflush");
    }
    /**
     * {@snippet :
     * int fflush(struct _IO_FILE* __stream);
     * }
     */
    public static int fflush(MemorySegment __stream) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$1,"fflush_unlocked");
    }
    /**
     * {@snippet :
     * int fflush_unlocked(struct _IO_FILE* __stream);
     * }
     */
    public static int fflush_unlocked(MemorySegment __stream) {
        var mh$ = fflush_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$2,"fopen");
    }
    /**
     * {@snippet :
     * FILE* fopen(char* __filename, char* __modes);
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __modes) {
        var mh$ = fopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__filename, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$4,"freopen");
    }
    /**
     * {@snippet :
     * struct _IO_FILE* freopen(char* __filename, char* __modes, struct _IO_FILE* __stream);
     * }
     */
    public static MemorySegment freopen(MemorySegment __filename, MemorySegment __modes, MemorySegment __stream) {
        var mh$ = freopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__filename, __modes, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$6,"fdopen");
    }
    /**
     * {@snippet :
     * struct _IO_FILE* fdopen(int __fd, char* __modes);
     * }
     */
    public static MemorySegment fdopen(int __fd, MemorySegment __modes) {
        var mh$ = fdopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__fd, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$1,"fmemopen");
    }
    /**
     * {@snippet :
     * struct _IO_FILE* fmemopen(void* __s, unsigned long __len, char* __modes);
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __s, long __len, MemorySegment __modes) {
        var mh$ = fmemopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __len, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$2,"open_memstream");
    }
    /**
     * {@snippet :
     * struct _IO_FILE* open_memstream(char** __bufloc, unsigned long* __sizeloc);
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufloc, MemorySegment __sizeloc) {
        var mh$ = open_memstream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__bufloc, __sizeloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$4,"setbuf");
    }
    /**
     * {@snippet :
     * void setbuf(struct _IO_FILE* __stream, char* __buf);
     * }
     */
    public static void setbuf(MemorySegment __stream, MemorySegment __buf) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(__stream, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$6,"setvbuf");
    }
    /**
     * {@snippet :
     * int setvbuf(struct _IO_FILE* __stream, char* __buf, int __modes, unsigned long __n);
     * }
     */
    public static int setvbuf(MemorySegment __stream, MemorySegment __buf, int __modes, long __n) {
        var mh$ = setvbuf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __buf, __modes, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$1,"setbuffer");
    }
    /**
     * {@snippet :
     * void setbuffer(struct _IO_FILE* __stream, char* __buf, unsigned long __size);
     * }
     */
    public static void setbuffer(MemorySegment __stream, MemorySegment __buf, long __size) {
        var mh$ = setbuffer$MH();
        try {
            mh$.invokeExact(__stream, __buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$3,"setlinebuf");
    }
    /**
     * {@snippet :
     * void setlinebuf(struct _IO_FILE* __stream);
     * }
     */
    public static void setlinebuf(MemorySegment __stream) {
        var mh$ = setlinebuf$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$4,"fprintf");
    }
    /**
     * {@snippet :
     * int fprintf(struct _IO_FILE* __stream, char* __format,...);
     * }
     */
    public static int fprintf(MemorySegment __stream, MemorySegment __format, Object... x2) {
        var mh$ = fprintf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$5,"printf");
    }
    /**
     * {@snippet :
     * int printf(char* __format,...);
     * }
     */
    public static int printf(MemorySegment __format, Object... x1) {
        var mh$ = printf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$0,"sprintf");
    }
    /**
     * {@snippet :
     * int sprintf(char* __s, char* __format,...);
     * }
     */
    public static int sprintf(MemorySegment __s, MemorySegment __format, Object... x2) {
        var mh$ = sprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$2,"vfprintf");
    }
    /**
     * {@snippet :
     * int vfprintf(struct _IO_FILE* __s, char* __format, struct __va_list_tag __arg[1]);
     * }
     */
    public static int vfprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vfprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$3,"vprintf");
    }
    /**
     * {@snippet :
     * int vprintf(char* __format, struct __va_list_tag __arg[1]);
     * }
     */
    public static int vprintf(MemorySegment __format, MemorySegment __arg) {
        var mh$ = vprintf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$4,"vsprintf");
    }
    /**
     * {@snippet :
     * int vsprintf(char* __s, char* __format, struct __va_list_tag __arg[1]);
     * }
     */
    public static int vsprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$6,"snprintf");
    }
    /**
     * {@snippet :
     * int snprintf(char* __s, unsigned long __maxlen, char* __format,...);
     * }
     */
    public static int snprintf(MemorySegment __s, long __maxlen, MemorySegment __format, Object... x3) {
        var mh$ = snprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$1,"vsnprintf");
    }
    /**
     * {@snippet :
     * int vsnprintf(char* __s, unsigned long __maxlen, char* __format, struct __va_list_tag __arg[1]);
     * }
     */
    public static int vsnprintf(MemorySegment __s, long __maxlen, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$3,"vdprintf");
    }
    /**
     * {@snippet :
     * int vdprintf(int __fd, char* __fmt, struct __va_list_tag __arg[1]);
     * }
     */
    public static int vdprintf(int __fd, MemorySegment __fmt, MemorySegment __arg) {
        var mh$ = vdprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$5,"dprintf");
    }
    /**
     * {@snippet :
     * int dprintf(int __fd, char* __fmt,...);
     * }
     */
    public static int dprintf(int __fd, MemorySegment __fmt, Object... x2) {
        var mh$ = dprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$0,"fscanf");
    }
    /**
     * {@snippet :
     * int fscanf(struct _IO_FILE* __stream, char* __format,...);
     * }
     */
    public static int fscanf(MemorySegment __stream, MemorySegment __format, Object... x2) {
        var mh$ = fscanf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$1,"scanf");
    }
    /**
     * {@snippet :
     * int scanf(char* __format,...);
     * }
     */
    public static int scanf(MemorySegment __format, Object... x1) {
        var mh$ = scanf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$2,"sscanf");
    }
    /**
     * {@snippet :
     * int sscanf(char* __s, char* __format,...);
     * }
     */
    public static int sscanf(MemorySegment __s, MemorySegment __format, Object... x2) {
        var mh$ = sscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$3,"vfscanf");
    }
    /**
     * {@snippet :
     * int vfscanf(struct _IO_FILE* __s, char* __format, struct __va_list_tag __arg[1]);
     * }
     */
    public static int vfscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vfscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$4,"vscanf");
    }
    /**
     * {@snippet :
     * int vscanf(char* __format, struct __va_list_tag __arg[1]);
     * }
     */
    public static int vscanf(MemorySegment __format, MemorySegment __arg) {
        var mh$ = vscanf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$5,"vsscanf");
    }
    /**
     * {@snippet :
     * int vsscanf(char* __s, char* __format, struct __va_list_tag __arg[1]);
     * }
     */
    public static int vsscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$0,"fgetc");
    }
    /**
     * {@snippet :
     * int fgetc(struct _IO_FILE* __stream);
     * }
     */
    public static int fgetc(MemorySegment __stream) {
        var mh$ = fgetc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$1,"getc");
    }
    /**
     * {@snippet :
     * int getc(struct _IO_FILE* __stream);
     * }
     */
    public static int getc(MemorySegment __stream) {
        var mh$ = getc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$2,"getchar");
    }
    /**
     * {@snippet :
     * int getchar();
     * }
     */
    public static int getchar() {
        var mh$ = getchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$3,"getc_unlocked");
    }
    /**
     * {@snippet :
     * int getc_unlocked(struct _IO_FILE* __stream);
     * }
     */
    public static int getc_unlocked(MemorySegment __stream) {
        var mh$ = getc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$4,"getchar_unlocked");
    }
    /**
     * {@snippet :
     * int getchar_unlocked();
     * }
     */
    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$5,"fgetc_unlocked");
    }
    /**
     * {@snippet :
     * int fgetc_unlocked(struct _IO_FILE* __stream);
     * }
     */
    public static int fgetc_unlocked(MemorySegment __stream) {
        var mh$ = fgetc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$0,"fputc");
    }
    /**
     * {@snippet :
     * int fputc(int __c, struct _IO_FILE* __stream);
     * }
     */
    public static int fputc(int __c, MemorySegment __stream) {
        var mh$ = fputc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$1,"putc");
    }
    /**
     * {@snippet :
     * int putc(int __c, struct _IO_FILE* __stream);
     * }
     */
    public static int putc(int __c, MemorySegment __stream) {
        var mh$ = putc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$2,"putchar");
    }
    /**
     * {@snippet :
     * int putchar(int __c);
     * }
     */
    public static int putchar(int __c) {
        var mh$ = putchar$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$3,"fputc_unlocked");
    }
    /**
     * {@snippet :
     * int fputc_unlocked(int __c, struct _IO_FILE* __stream);
     * }
     */
    public static int fputc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = fputc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$4,"putc_unlocked");
    }
    /**
     * {@snippet :
     * int putc_unlocked(int __c, struct _IO_FILE* __stream);
     * }
     */
    public static int putc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = putc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$5,"putchar_unlocked");
    }
    /**
     * {@snippet :
     * int putchar_unlocked(int __c);
     * }
     */
    public static int putchar_unlocked(int __c) {
        var mh$ = putchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$0,"getw");
    }
    /**
     * {@snippet :
     * int getw(struct _IO_FILE* __stream);
     * }
     */
    public static int getw(MemorySegment __stream) {
        var mh$ = getw$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$1,"putw");
    }
    /**
     * {@snippet :
     * int putw(int __w, struct _IO_FILE* __stream);
     * }
     */
    public static int putw(int __w, MemorySegment __stream) {
        var mh$ = putw$MH();
        try {
            return (int)mh$.invokeExact(__w, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$3,"fgets");
    }
    /**
     * {@snippet :
     * char* fgets(char* __s, int __n, struct _IO_FILE* __stream);
     * }
     */
    public static MemorySegment fgets(MemorySegment __s, int __n, MemorySegment __stream) {
        var mh$ = fgets$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$5,"__getdelim");
    }
    /**
     * {@snippet :
     * long __getdelim(char** __lineptr, unsigned long* __n, int __delimiter, struct _IO_FILE* __stream);
     * }
     */
    public static long __getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = __getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$0,"getdelim");
    }
    /**
     * {@snippet :
     * long getdelim(char** __lineptr, unsigned long* __n, int __delimiter, struct _IO_FILE* __stream);
     * }
     */
    public static long getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$2,"getline");
    }
    /**
     * {@snippet :
     * long getline(char** __lineptr, unsigned long* __n, struct _IO_FILE* __stream);
     * }
     */
    public static long getline(MemorySegment __lineptr, MemorySegment __n, MemorySegment __stream) {
        var mh$ = getline$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$3,"fputs");
    }
    /**
     * {@snippet :
     * int fputs(char* __s, struct _IO_FILE* __stream);
     * }
     */
    public static int fputs(MemorySegment __s, MemorySegment __stream) {
        var mh$ = fputs$MH();
        try {
            return (int)mh$.invokeExact(__s, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$4,"puts");
    }
    /**
     * {@snippet :
     * int puts(char* __s);
     * }
     */
    public static int puts(MemorySegment __s) {
        var mh$ = puts$MH();
        try {
            return (int)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$5,"ungetc");
    }
    /**
     * {@snippet :
     * int ungetc(int __c, struct _IO_FILE* __stream);
     * }
     */
    public static int ungetc(int __c, MemorySegment __stream) {
        var mh$ = ungetc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$1,"fread");
    }
    /**
     * {@snippet :
     * unsigned long fread(void* __ptr, unsigned long __size, unsigned long __n, struct _IO_FILE* __stream);
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$2,"fwrite");
    }
    /**
     * {@snippet :
     * unsigned long fwrite(void* __ptr, unsigned long __size, unsigned long __n, struct _IO_FILE* __s);
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __n, MemorySegment __s) {
        var mh$ = fwrite$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$3,"fread_unlocked");
    }
    /**
     * {@snippet :
     * unsigned long fread_unlocked(void* __ptr, unsigned long __size, unsigned long __n, struct _IO_FILE* __stream);
     * }
     */
    public static long fread_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$4,"fwrite_unlocked");
    }
    /**
     * {@snippet :
     * unsigned long fwrite_unlocked(void* __ptr, unsigned long __size, unsigned long __n, struct _IO_FILE* __stream);
     * }
     */
    public static long fwrite_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fwrite_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$6,"fseek");
    }
    /**
     * {@snippet :
     * int fseek(struct _IO_FILE* __stream, long __off, int __whence);
     * }
     */
    public static int fseek(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseek$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$1,"ftell");
    }
    /**
     * {@snippet :
     * long ftell(struct _IO_FILE* __stream);
     * }
     */
    public static long ftell(MemorySegment __stream) {
        var mh$ = ftell$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$2,"rewind");
    }
    /**
     * {@snippet :
     * void rewind(struct _IO_FILE* __stream);
     * }
     */
    public static void rewind(MemorySegment __stream) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$3,"fseeko");
    }
    /**
     * {@snippet :
     * int fseeko(struct _IO_FILE* __stream, long __off, int __whence);
     * }
     */
    public static int fseeko(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseeko$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$4,"ftello");
    }
    /**
     * {@snippet :
     * long ftello(struct _IO_FILE* __stream);
     * }
     */
    public static long ftello(MemorySegment __stream) {
        var mh$ = ftello$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$5,"fgetpos");
    }
    /**
     * {@snippet :
     * int fgetpos(struct _IO_FILE* __stream, struct _G_fpos_t* __pos);
     * }
     */
    public static int fgetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fgetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$0,"fsetpos");
    }
    /**
     * {@snippet :
     * int fsetpos(struct _IO_FILE* __stream, struct _G_fpos_t* __pos);
     * }
     */
    public static int fsetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fsetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$1,"clearerr");
    }
    /**
     * {@snippet :
     * void clearerr(struct _IO_FILE* __stream);
     * }
     */
    public static void clearerr(MemorySegment __stream) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$2,"feof");
    }
    /**
     * {@snippet :
     * int feof(struct _IO_FILE* __stream);
     * }
     */
    public static int feof(MemorySegment __stream) {
        var mh$ = feof$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$3,"ferror");
    }
    /**
     * {@snippet :
     * int ferror(struct _IO_FILE* __stream);
     * }
     */
    public static int ferror(MemorySegment __stream) {
        var mh$ = ferror$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$4,"clearerr_unlocked");
    }
    /**
     * {@snippet :
     * void clearerr_unlocked(struct _IO_FILE* __stream);
     * }
     */
    public static void clearerr_unlocked(MemorySegment __stream) {
        var mh$ = clearerr_unlocked$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$5,"feof_unlocked");
    }
    /**
     * {@snippet :
     * int feof_unlocked(struct _IO_FILE* __stream);
     * }
     */
    public static int feof_unlocked(MemorySegment __stream) {
        var mh$ = feof_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$0,"ferror_unlocked");
    }
    /**
     * {@snippet :
     * int ferror_unlocked(struct _IO_FILE* __stream);
     * }
     */
    public static int ferror_unlocked(MemorySegment __stream) {
        var mh$ = ferror_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$1,"perror");
    }
    /**
     * {@snippet :
     * void perror(char* __s);
     * }
     */
    public static void perror(MemorySegment __s) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$2,"fileno");
    }
    /**
     * {@snippet :
     * int fileno(struct _IO_FILE* __stream);
     * }
     */
    public static int fileno(MemorySegment __stream) {
        var mh$ = fileno$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$3,"fileno_unlocked");
    }
    /**
     * {@snippet :
     * int fileno_unlocked(struct _IO_FILE* __stream);
     * }
     */
    public static int fileno_unlocked(MemorySegment __stream) {
        var mh$ = fileno_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$4,"pclose");
    }
    /**
     * {@snippet :
     * int pclose(struct _IO_FILE* __stream);
     * }
     */
    public static int pclose(MemorySegment __stream) {
        var mh$ = pclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$5,"popen");
    }
    /**
     * {@snippet :
     * struct _IO_FILE* popen(char* __command, char* __modes);
     * }
     */
    public static MemorySegment popen(MemorySegment __command, MemorySegment __modes) {
        var mh$ = popen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__command, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$0,"ctermid");
    }
    /**
     * {@snippet :
     * char* ctermid(char* __s);
     * }
     */
    public static MemorySegment ctermid(MemorySegment __s) {
        var mh$ = ctermid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$1,"flockfile");
    }
    /**
     * {@snippet :
     * void flockfile(struct _IO_FILE* __stream);
     * }
     */
    public static void flockfile(MemorySegment __stream) {
        var mh$ = flockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$2,"ftrylockfile");
    }
    /**
     * {@snippet :
     * int ftrylockfile(struct _IO_FILE* __stream);
     * }
     */
    public static int ftrylockfile(MemorySegment __stream) {
        var mh$ = ftrylockfile$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$3,"funlockfile");
    }
    /**
     * {@snippet :
     * void funlockfile(struct _IO_FILE* __stream);
     * }
     */
    public static void funlockfile(MemorySegment __stream) {
        var mh$ = funlockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uflow$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$4,"__uflow");
    }
    /**
     * {@snippet :
     * int __uflow(struct _IO_FILE*);
     * }
     */
    public static int __uflow(MemorySegment x0) {
        var mh$ = __uflow$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$6,"__overflow");
    }
    /**
     * {@snippet :
     * int __overflow(struct _IO_FILE*, int);
     * }
     */
    public static int __overflow(MemorySegment x0, int x1) {
        var mh$ = __overflow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int wchar_t;
     * }
     */
    public static final OfInt wchar_t = JAVA_INT;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$4,"__ctype_get_mb_cur_max");
    }
    /**
     * {@snippet :
     * unsigned long __ctype_get_mb_cur_max();
     * }
     */
    public static long __ctype_get_mb_cur_max() {
        var mh$ = __ctype_get_mb_cur_max$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$5,"atof");
    }
    /**
     * {@snippet :
     * double atof(char* __nptr);
     * }
     */
    public static double atof(MemorySegment __nptr) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$0,"atoi");
    }
    /**
     * {@snippet :
     * int atoi(char* __nptr);
     * }
     */
    public static int atoi(MemorySegment __nptr) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$1,"atol");
    }
    /**
     * {@snippet :
     * long atol(char* __nptr);
     * }
     */
    public static long atol(MemorySegment __nptr) {
        var mh$ = atol$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$2,"atoll");
    }
    /**
     * {@snippet :
     * long long atoll(char* __nptr);
     * }
     */
    public static long atoll(MemorySegment __nptr) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$4,"strtod");
    }
    /**
     * {@snippet :
     * double strtod(char* __nptr, char** __endptr);
     * }
     */
    public static double strtod(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$6,"strtof");
    }
    /**
     * {@snippet :
     * float strtof(char* __nptr, char** __endptr);
     * }
     */
    public static float strtof(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$0,"strtol");
    }
    /**
     * {@snippet :
     * long strtol(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtol(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtol$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$1,"strtoul");
    }
    /**
     * {@snippet :
     * unsigned long strtoul(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoul(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoul$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$2,"strtoq");
    }
    /**
     * {@snippet :
     * long long strtoq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$3,"strtouq");
    }
    /**
     * {@snippet :
     * unsigned long long strtouq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtouq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtouq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$4,"strtoll");
    }
    /**
     * {@snippet :
     * long long strtoll(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoll(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$5,"strtoull");
    }
    /**
     * {@snippet :
     * unsigned long long strtoull(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoull(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$1,"l64a");
    }
    /**
     * {@snippet :
     * char* l64a(long __n);
     * }
     */
    public static MemorySegment l64a(long __n) {
        var mh$ = l64a$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$2,"a64l");
    }
    /**
     * {@snippet :
     * long a64l(char* __s);
     * }
     */
    public static long a64l(MemorySegment __s) {
        var mh$ = a64l$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char u_char;
     * }
     */
    public static final OfByte u_char = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_short;
     * }
     */
    public static final OfShort u_short = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int;
     * }
     */
    public static final OfInt u_int = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long u_long;
     * }
     */
    public static final OfLong u_long = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long quad_t;
     * }
     */
    public static final OfLong quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long u_quad_t;
     * }
     */
    public static final OfLong u_quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long loff_t;
     * }
     */
    public static final OfLong loff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long ino_t;
     * }
     */
    public static final OfLong ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long dev_t;
     * }
     */
    public static final OfLong dev_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int gid_t;
     * }
     */
    public static final OfInt gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int mode_t;
     * }
     */
    public static final OfInt mode_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long nlink_t;
     * }
     */
    public static final OfLong nlink_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int uid_t;
     * }
     */
    public static final OfInt uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int pid_t;
     * }
     */
    public static final OfInt pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int id_t;
     * }
     */
    public static final OfInt id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int daddr_t;
     * }
     */
    public static final OfInt daddr_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef char* caddr_t;
     * }
     */
    public static final AddressLayout caddr_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef int key_t;
     * }
     */
    public static final OfInt key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long clock_t;
     * }
     */
    public static final OfLong clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int clockid_t;
     * }
     */
    public static final OfInt clockid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long time_t;
     * }
     */
    public static final OfLong time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef void* timer_t;
     * }
     */
    public static final AddressLayout timer_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long ulong;
     * }
     */
    public static final OfLong ulong = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned short ushort;
     * }
     */
    public static final OfShort ushort = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint;
     * }
     */
    public static final OfInt uint = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long register_t;
     * }
     */
    public static final OfLong register_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long suseconds_t;
     * }
     */
    public static final OfLong suseconds_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __fd_mask;
     * }
     */
    public static final OfLong __fd_mask = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long fd_mask;
     * }
     */
    public static final OfLong fd_mask = JAVA_LONG;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$6,"select");
    }
    /**
     * {@snippet :
     * int select(int __nfds, struct fd_set* __readfds, struct fd_set* __writefds, struct fd_set* __exceptfds, struct timeval* __timeout);
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$1,"pselect");
    }
    /**
     * {@snippet :
     * int pselect(int __nfds, struct fd_set* __readfds, struct fd_set* __writefds, struct fd_set* __exceptfds, struct timespec* __timeout, struct __sigset_t* __sigmask);
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long blksize_t;
     * }
     */
    public static final OfLong blksize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long blkcnt_t;
     * }
     */
    public static final OfLong blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long fsblkcnt_t;
     * }
     */
    public static final OfLong fsblkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long fsfilcnt_t;
     * }
     */
    public static final OfLong fsfilcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __tss_t;
     * }
     */
    public static final OfInt __tss_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __thrd_t;
     * }
     */
    public static final OfLong __thrd_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long pthread_t;
     * }
     */
    public static final OfLong pthread_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int pthread_key_t;
     * }
     */
    public static final OfInt pthread_key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int pthread_once_t;
     * }
     */
    public static final OfInt pthread_once_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int pthread_spinlock_t;
     * }
     */
    public static final OfInt pthread_spinlock_t = JAVA_INT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$1,"random");
    }
    /**
     * {@snippet :
     * long random();
     * }
     */
    public static long random() {
        var mh$ = random$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$3,"srandom");
    }
    /**
     * {@snippet :
     * void srandom(unsigned int __seed);
     * }
     */
    public static void srandom(int __seed) {
        var mh$ = srandom$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$5,"initstate");
    }
    /**
     * {@snippet :
     * char* initstate(unsigned int __seed, char* __statebuf, unsigned long __statelen);
     * }
     */
    public static MemorySegment initstate(int __seed, MemorySegment __statebuf, long __statelen) {
        var mh$ = initstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$0,"setstate");
    }
    /**
     * {@snippet :
     * char* setstate(char* __statebuf);
     * }
     */
    public static MemorySegment setstate(MemorySegment __statebuf) {
        var mh$ = setstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$3,"random_r");
    }
    /**
     * {@snippet :
     * int random_r(struct random_data* __buf, int* __result);
     * }
     */
    public static int random_r(MemorySegment __buf, MemorySegment __result) {
        var mh$ = random_r$MH();
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$4,"srandom_r");
    }
    /**
     * {@snippet :
     * int srandom_r(unsigned int __seed, struct random_data* __buf);
     * }
     */
    public static int srandom_r(int __seed, MemorySegment __buf) {
        var mh$ = srandom_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$6,"initstate_r");
    }
    /**
     * {@snippet :
     * int initstate_r(unsigned int __seed, char* __statebuf, unsigned long __statelen, struct random_data* __buf);
     * }
     */
    public static int initstate_r(int __seed, MemorySegment __statebuf, long __statelen, MemorySegment __buf) {
        var mh$ = initstate_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$0,"setstate_r");
    }
    /**
     * {@snippet :
     * int setstate_r(char* __statebuf, struct random_data* __buf);
     * }
     */
    public static int setstate_r(MemorySegment __statebuf, MemorySegment __buf) {
        var mh$ = setstate_r$MH();
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$1,"rand");
    }
    /**
     * {@snippet :
     * int rand();
     * }
     */
    public static int rand() {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$2,"srand");
    }
    /**
     * {@snippet :
     * void srand(unsigned int __seed);
     * }
     */
    public static void srand(int __seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$3,"rand_r");
    }
    /**
     * {@snippet :
     * int rand_r(unsigned int* __seed);
     * }
     */
    public static int rand_r(MemorySegment __seed) {
        var mh$ = rand_r$MH();
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$5,"drand48");
    }
    /**
     * {@snippet :
     * double drand48();
     * }
     */
    public static double drand48() {
        var mh$ = drand48$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$0,"erand48");
    }
    /**
     * {@snippet :
     * double erand48(unsigned short __xsubi[3]);
     * }
     */
    public static double erand48(MemorySegment __xsubi) {
        var mh$ = erand48$MH();
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$1,"lrand48");
    }
    /**
     * {@snippet :
     * long lrand48();
     * }
     */
    public static long lrand48() {
        var mh$ = lrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$2,"nrand48");
    }
    /**
     * {@snippet :
     * long nrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long nrand48(MemorySegment __xsubi) {
        var mh$ = nrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$3,"mrand48");
    }
    /**
     * {@snippet :
     * long mrand48();
     * }
     */
    public static long mrand48() {
        var mh$ = mrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$4,"jrand48");
    }
    /**
     * {@snippet :
     * long jrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long jrand48(MemorySegment __xsubi) {
        var mh$ = jrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$6,"srand48");
    }
    /**
     * {@snippet :
     * void srand48(long __seedval);
     * }
     */
    public static void srand48(long __seedval) {
        var mh$ = srand48$MH();
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$0,"seed48");
    }
    /**
     * {@snippet :
     * unsigned short* seed48(unsigned short __seed16v[3]);
     * }
     */
    public static MemorySegment seed48(MemorySegment __seed16v) {
        var mh$ = seed48$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$1,"lcong48");
    }
    /**
     * {@snippet :
     * void lcong48(unsigned short __param[7]);
     * }
     */
    public static void lcong48(MemorySegment __param) {
        var mh$ = lcong48$MH();
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$0,"drand48_r");
    }
    /**
     * {@snippet :
     * int drand48_r(struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int drand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = drand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$1,"erand48_r");
    }
    /**
     * {@snippet :
     * int erand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int erand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = erand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$2,"lrand48_r");
    }
    /**
     * {@snippet :
     * int lrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int lrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = lrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$3,"nrand48_r");
    }
    /**
     * {@snippet :
     * int nrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int nrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = nrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$4,"mrand48_r");
    }
    /**
     * {@snippet :
     * int mrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int mrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = mrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$5,"jrand48_r");
    }
    /**
     * {@snippet :
     * int jrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int jrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = jrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$1,"srand48_r");
    }
    /**
     * {@snippet :
     * int srand48_r(long __seedval, struct drand48_data* __buffer);
     * }
     */
    public static int srand48_r(long __seedval, MemorySegment __buffer) {
        var mh$ = srand48_r$MH();
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$2,"seed48_r");
    }
    /**
     * {@snippet :
     * int seed48_r(unsigned short __seed16v[3], struct drand48_data* __buffer);
     * }
     */
    public static int seed48_r(MemorySegment __seed16v, MemorySegment __buffer) {
        var mh$ = seed48_r$MH();
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$3,"lcong48_r");
    }
    /**
     * {@snippet :
     * int lcong48_r(unsigned short __param[7], struct drand48_data* __buffer);
     * }
     */
    public static int lcong48_r(MemorySegment __param, MemorySegment __buffer) {
        var mh$ = lcong48_r$MH();
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$4,"arc4random");
    }
    /**
     * {@snippet :
     * unsigned int arc4random();
     * }
     */
    public static int arc4random() {
        var mh$ = arc4random$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$6,"arc4random_buf");
    }
    /**
     * {@snippet :
     * void arc4random_buf(void* __buf, unsigned long __size);
     * }
     */
    public static void arc4random_buf(MemorySegment __buf, long __size) {
        var mh$ = arc4random_buf$MH();
        try {
            mh$.invokeExact(__buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle arc4random_uniform$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$0,"arc4random_uniform");
    }
    /**
     * {@snippet :
     * unsigned int arc4random_uniform(unsigned int __upper_bound);
     * }
     */
    public static int arc4random_uniform(int __upper_bound) {
        var mh$ = arc4random_uniform$MH();
        try {
            return (int)mh$.invokeExact(__upper_bound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$1,"malloc");
    }
    /**
     * {@snippet :
     * void* malloc(unsigned long __size);
     * }
     */
    public static MemorySegment malloc(long __size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$3,"calloc");
    }
    /**
     * {@snippet :
     * void* calloc(unsigned long __nmemb, unsigned long __size);
     * }
     */
    public static MemorySegment calloc(long __nmemb, long __size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$5,"realloc");
    }
    /**
     * {@snippet :
     * void* realloc(void* __ptr, unsigned long __size);
     * }
     */
    public static MemorySegment realloc(MemorySegment __ptr, long __size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$0,"free");
    }
    /**
     * {@snippet :
     * void free(void* __ptr);
     * }
     */
    public static void free(MemorySegment __ptr) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$2,"reallocarray");
    }
    /**
     * {@snippet :
     * void* reallocarray(void* __ptr, unsigned long __nmemb, unsigned long __size);
     * }
     */
    public static MemorySegment reallocarray(MemorySegment __ptr, long __nmemb, long __size) {
        var mh$ = reallocarray$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$3,"alloca");
    }
    /**
     * {@snippet :
     * void* alloca(unsigned long __size);
     * }
     */
    public static MemorySegment alloca(long __size) {
        var mh$ = alloca$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$4,"valloc");
    }
    /**
     * {@snippet :
     * void* valloc(unsigned long __size);
     * }
     */
    public static MemorySegment valloc(long __size) {
        var mh$ = valloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$6,"posix_memalign");
    }
    /**
     * {@snippet :
     * int posix_memalign(void** __memptr, unsigned long __alignment, unsigned long __size);
     * }
     */
    public static int posix_memalign(MemorySegment __memptr, long __alignment, long __size) {
        var mh$ = posix_memalign$MH();
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$0,"aligned_alloc");
    }
    /**
     * {@snippet :
     * void* aligned_alloc(unsigned long __alignment, unsigned long __size);
     * }
     */
    public static MemorySegment aligned_alloc(long __alignment, long __size) {
        var mh$ = aligned_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$2,"abort");
    }
    /**
     * {@snippet :
     * void abort();
     * }
     */
    public static void abort() {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$5,"atexit");
    }
    /**
     * {@snippet :
     * int atexit(void (*__func)());
     * }
     */
    public static int atexit(MemorySegment __func) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$1,"at_quick_exit");
    }
    /**
     * {@snippet :
     * int at_quick_exit(void (*__func)());
     * }
     */
    public static int at_quick_exit(MemorySegment __func) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$5,"on_exit");
    }
    /**
     * {@snippet :
     * int on_exit(void (*__func)(int,void*), void* __arg);
     * }
     */
    public static int on_exit(MemorySegment __func, MemorySegment __arg) {
        var mh$ = on_exit$MH();
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$0,"exit");
    }
    /**
     * {@snippet :
     * void exit(int __status);
     * }
     */
    public static void exit(int __status) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$1,"quick_exit");
    }
    /**
     * {@snippet :
     * void quick_exit(int __status);
     * }
     */
    public static void quick_exit(int __status) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$2,"_Exit");
    }
    /**
     * {@snippet :
     * void _Exit(int __status);
     * }
     */
    public static void _Exit(int __status) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$3,"getenv");
    }
    /**
     * {@snippet :
     * char* getenv(char* __name);
     * }
     */
    public static MemorySegment getenv(MemorySegment __name) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$4,"putenv");
    }
    /**
     * {@snippet :
     * int putenv(char* __string);
     * }
     */
    public static int putenv(MemorySegment __string) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$6,"setenv");
    }
    /**
     * {@snippet :
     * int setenv(char* __name, char* __value, int __replace);
     * }
     */
    public static int setenv(MemorySegment __name, MemorySegment __value, int __replace) {
        var mh$ = setenv$MH();
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$0,"unsetenv");
    }
    /**
     * {@snippet :
     * int unsetenv(char* __name);
     * }
     */
    public static int unsetenv(MemorySegment __name) {
        var mh$ = unsetenv$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$1,"clearenv");
    }
    /**
     * {@snippet :
     * int clearenv();
     * }
     */
    public static int clearenv() {
        var mh$ = clearenv$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$2,"mktemp");
    }
    /**
     * {@snippet :
     * char* mktemp(char* __template);
     * }
     */
    public static MemorySegment mktemp(MemorySegment __template) {
        var mh$ = mktemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$3,"mkstemp");
    }
    /**
     * {@snippet :
     * int mkstemp(char* __template);
     * }
     */
    public static int mkstemp(MemorySegment __template) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$4,"mkstemps");
    }
    /**
     * {@snippet :
     * int mkstemps(char* __template, int __suffixlen);
     * }
     */
    public static int mkstemps(MemorySegment __template, int __suffixlen) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$5,"mkdtemp");
    }
    /**
     * {@snippet :
     * char* mkdtemp(char* __template);
     * }
     */
    public static MemorySegment mkdtemp(MemorySegment __template) {
        var mh$ = mkdtemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$0,"system");
    }
    /**
     * {@snippet :
     * int system(char* __command);
     * }
     */
    public static int system(MemorySegment __command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$1,"realpath");
    }
    /**
     * {@snippet :
     * char* realpath(char* __name, char* __resolved);
     * }
     */
    public static MemorySegment realpath(MemorySegment __name, MemorySegment __resolved) {
        var mh$ = realpath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$6,"bsearch");
    }
    /**
     * {@snippet :
     * void* bsearch(void* __key, void* __base, unsigned long __nmemb, unsigned long __size, int (*__compar)(void*,void*));
     * }
     */
    public static MemorySegment bsearch(MemorySegment __key, MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$2,"qsort");
    }
    /**
     * {@snippet :
     * void qsort(void* __base, unsigned long __nmemb, unsigned long __size, int (*__compar)(void*,void*));
     * }
     */
    public static void qsort(MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$3,"abs");
    }
    /**
     * {@snippet :
     * int abs(int __x);
     * }
     */
    public static int abs(int __x) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$4,"labs");
    }
    /**
     * {@snippet :
     * long labs(long __x);
     * }
     */
    public static long labs(long __x) {
        var mh$ = labs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$5,"llabs");
    }
    /**
     * {@snippet :
     * long long llabs(long long __x);
     * }
     */
    public static long llabs(long __x) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$1,"div");
    }
    /**
     * {@snippet :
     * struct div_t div(int __numer, int __denom);
     * }
     */
    public static MemorySegment div(SegmentAllocator allocator, int __numer, int __denom) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$3,"ldiv");
    }
    /**
     * {@snippet :
     * struct ldiv_t ldiv(long __numer, long __denom);
     * }
     */
    public static MemorySegment ldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$5,"lldiv");
    }
    /**
     * {@snippet :
     * struct lldiv_t lldiv(long long __numer, long long __denom);
     * }
     */
    public static MemorySegment lldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$1,"ecvt");
    }
    /**
     * {@snippet :
     * char* ecvt(double __value, int __ndigit, int* __decpt, int* __sign);
     * }
     */
    public static MemorySegment ecvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$2,"fcvt");
    }
    /**
     * {@snippet :
     * char* fcvt(double __value, int __ndigit, int* __decpt, int* __sign);
     * }
     */
    public static MemorySegment fcvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$4,"gcvt");
    }
    /**
     * {@snippet :
     * char* gcvt(double __value, int __ndigit, char* __buf);
     * }
     */
    public static MemorySegment gcvt(double __value, int __ndigit, MemorySegment __buf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$6,"ecvt_r");
    }
    /**
     * {@snippet :
     * int ecvt_r(double __value, int __ndigit, int* __decpt, int* __sign, char* __buf, unsigned long __len);
     * }
     */
    public static int ecvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = ecvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$0,"fcvt_r");
    }
    /**
     * {@snippet :
     * int fcvt_r(double __value, int __ndigit, int* __decpt, int* __sign, char* __buf, unsigned long __len);
     * }
     */
    public static int fcvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = fcvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$2,"mblen");
    }
    /**
     * {@snippet :
     * int mblen(char* __s, unsigned long __n);
     * }
     */
    public static int mblen(MemorySegment __s, long __n) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$4,"mbtowc");
    }
    /**
     * {@snippet :
     * int mbtowc(int* __pwc, char* __s, unsigned long __n);
     * }
     */
    public static int mbtowc(MemorySegment __pwc, MemorySegment __s, long __n) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$5,"wctomb");
    }
    /**
     * {@snippet :
     * int wctomb(char* __s, int __wchar);
     * }
     */
    public static int wctomb(MemorySegment __s, int __wchar) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$1,"mbstowcs");
    }
    /**
     * {@snippet :
     * unsigned long mbstowcs(int* __pwcs, char* __s, unsigned long __n);
     * }
     */
    public static long mbstowcs(MemorySegment __pwcs, MemorySegment __s, long __n) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$2,"wcstombs");
    }
    /**
     * {@snippet :
     * unsigned long wcstombs(char* __s, int* __pwcs, unsigned long __n);
     * }
     */
    public static long wcstombs(MemorySegment __s, MemorySegment __pwcs, long __n) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$3,"rpmatch");
    }
    /**
     * {@snippet :
     * int rpmatch(char* __response);
     * }
     */
    public static int rpmatch(MemorySegment __response) {
        var mh$ = rpmatch$MH();
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$4,"getsubopt");
    }
    /**
     * {@snippet :
     * int getsubopt(char** __optionp, char** __tokens, char** __valuep);
     * }
     */
    public static int getsubopt(MemorySegment __optionp, MemorySegment __tokens, MemorySegment __valuep) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$5,"getloadavg");
    }
    /**
     * {@snippet :
     * int getloadavg(double __loadavg[], int __nelem);
     * }
     */
    public static int getloadavg(MemorySegment __loadavg, int __nelem) {
        var mh$ = getloadavg$MH();
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$1,"memcpy");
    }
    /**
     * {@snippet :
     * void* memcpy(void* __dest, void* __src, unsigned long __n);
     * }
     */
    public static MemorySegment memcpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = memcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memmove$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$2,"memmove");
    }
    /**
     * {@snippet :
     * void* memmove(void* __dest, void* __src, unsigned long __n);
     * }
     */
    public static MemorySegment memmove(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = memmove$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memccpy$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$4,"memccpy");
    }
    /**
     * {@snippet :
     * void* memccpy(void* __dest, void* __src, int __c, unsigned long __n);
     * }
     */
    public static MemorySegment memccpy(MemorySegment __dest, MemorySegment __src, int __c, long __n) {
        var mh$ = memccpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memset$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$6,"memset");
    }
    /**
     * {@snippet :
     * void* memset(void* __s, int __c, unsigned long __n);
     * }
     */
    public static MemorySegment memset(MemorySegment __s, int __c, long __n) {
        var mh$ = memset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$0,"memcmp");
    }
    /**
     * {@snippet :
     * int memcmp(void* __s1, void* __s2, unsigned long __n);
     * }
     */
    public static int memcmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = memcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __memcmpeq$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$1,"__memcmpeq");
    }
    /**
     * {@snippet :
     * int __memcmpeq(void* __s1, void* __s2, unsigned long __n);
     * }
     */
    public static int __memcmpeq(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = __memcmpeq$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memchr$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$2,"memchr");
    }
    /**
     * {@snippet :
     * void* memchr(void* __s, int __c, unsigned long __n);
     * }
     */
    public static MemorySegment memchr(MemorySegment __s, int __c, long __n) {
        var mh$ = memchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$3,"strcpy");
    }
    /**
     * {@snippet :
     * char* strcpy(char* __dest, char* __src);
     * }
     */
    public static MemorySegment strcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = strcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$4,"strncpy");
    }
    /**
     * {@snippet :
     * char* strncpy(char* __dest, char* __src, unsigned long __n);
     * }
     */
    public static MemorySegment strncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strncpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcat$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$5,"strcat");
    }
    /**
     * {@snippet :
     * char* strcat(char* __dest, char* __src);
     * }
     */
    public static MemorySegment strcat(MemorySegment __dest, MemorySegment __src) {
        var mh$ = strcat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncat$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$0,"strncat");
    }
    /**
     * {@snippet :
     * char* strncat(char* __dest, char* __src, unsigned long __n);
     * }
     */
    public static MemorySegment strncat(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strncat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$1,"strcmp");
    }
    /**
     * {@snippet :
     * int strcmp(char* __s1, char* __s2);
     * }
     */
    public static int strcmp(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$2,"strncmp");
    }
    /**
     * {@snippet :
     * int strncmp(char* __s1, char* __s2, unsigned long __n);
     * }
     */
    public static int strncmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = strncmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$3,"strcoll");
    }
    /**
     * {@snippet :
     * int strcoll(char* __s1, char* __s2);
     * }
     */
    public static int strcoll(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcoll$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$4,"strxfrm");
    }
    /**
     * {@snippet :
     * unsigned long strxfrm(char* __dest, char* __src, unsigned long __n);
     * }
     */
    public static long strxfrm(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strxfrm$MH();
        try {
            return (long)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct __locale_struct* __locale_t;
     * }
     */
    public static final AddressLayout __locale_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct __locale_struct* locale_t;
     * }
     */
    public static final AddressLayout locale_t = RuntimeHelper.POINTER;
    public static MethodHandle strcoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$3,"strcoll_l");
    }
    /**
     * {@snippet :
     * int strcoll_l(char* __s1, char* __s2, struct __locale_struct* __l);
     * }
     */
    public static int strcoll_l(MemorySegment __s1, MemorySegment __s2, MemorySegment __l) {
        var mh$ = strcoll_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm_l$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$5,"strxfrm_l");
    }
    /**
     * {@snippet :
     * unsigned long strxfrm_l(char* __dest, char* __src, unsigned long __n, struct __locale_struct* __l);
     * }
     */
    public static long strxfrm_l(MemorySegment __dest, MemorySegment __src, long __n, MemorySegment __l) {
        var mh$ = strxfrm_l$MH();
        try {
            return (long)mh$.invokeExact(__dest, __src, __n, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$0,"strdup");
    }
    /**
     * {@snippet :
     * char* strdup(char* __s);
     * }
     */
    public static MemorySegment strdup(MemorySegment __s) {
        var mh$ = strdup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strndup$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$1,"strndup");
    }
    /**
     * {@snippet :
     * char* strndup(char* __string, unsigned long __n);
     * }
     */
    public static MemorySegment strndup(MemorySegment __string, long __n) {
        var mh$ = strndup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__string, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$3,"strchr");
    }
    /**
     * {@snippet :
     * char* strchr(char* __s, int __c);
     * }
     */
    public static MemorySegment strchr(MemorySegment __s, int __c) {
        var mh$ = strchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$4,"strrchr");
    }
    /**
     * {@snippet :
     * char* strrchr(char* __s, int __c);
     * }
     */
    public static MemorySegment strrchr(MemorySegment __s, int __c) {
        var mh$ = strrchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcspn$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$6,"strcspn");
    }
    /**
     * {@snippet :
     * unsigned long strcspn(char* __s, char* __reject);
     * }
     */
    public static long strcspn(MemorySegment __s, MemorySegment __reject) {
        var mh$ = strcspn$MH();
        try {
            return (long)mh$.invokeExact(__s, __reject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strspn$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$0,"strspn");
    }
    /**
     * {@snippet :
     * unsigned long strspn(char* __s, char* __accept);
     * }
     */
    public static long strspn(MemorySegment __s, MemorySegment __accept) {
        var mh$ = strspn$MH();
        try {
            return (long)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strpbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$1,"strpbrk");
    }
    /**
     * {@snippet :
     * char* strpbrk(char* __s, char* __accept);
     * }
     */
    public static MemorySegment strpbrk(MemorySegment __s, MemorySegment __accept) {
        var mh$ = strpbrk$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strstr$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$2,"strstr");
    }
    /**
     * {@snippet :
     * char* strstr(char* __haystack, char* __needle);
     * }
     */
    public static MemorySegment strstr(MemorySegment __haystack, MemorySegment __needle) {
        var mh$ = strstr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__haystack, __needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$3,"strtok");
    }
    /**
     * {@snippet :
     * char* strtok(char* __s, char* __delim);
     * }
     */
    public static MemorySegment strtok(MemorySegment __s, MemorySegment __delim) {
        var mh$ = strtok$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$4,"__strtok_r");
    }
    /**
     * {@snippet :
     * char* __strtok_r(char* __s, char* __delim, char** __save_ptr);
     * }
     */
    public static MemorySegment __strtok_r(MemorySegment __s, MemorySegment __delim, MemorySegment __save_ptr) {
        var mh$ = __strtok_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$5,"strtok_r");
    }
    /**
     * {@snippet :
     * char* strtok_r(char* __s, char* __delim, char** __save_ptr);
     * }
     */
    public static MemorySegment strtok_r(MemorySegment __s, MemorySegment __delim, MemorySegment __save_ptr) {
        var mh$ = strtok_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$0,"strlen");
    }
    /**
     * {@snippet :
     * unsigned long strlen(char* __s);
     * }
     */
    public static long strlen(MemorySegment __s) {
        var mh$ = strlen$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$2,"strnlen");
    }
    /**
     * {@snippet :
     * unsigned long strnlen(char* __string, unsigned long __maxlen);
     * }
     */
    public static long strnlen(MemorySegment __string, long __maxlen) {
        var mh$ = strnlen$MH();
        try {
            return (long)mh$.invokeExact(__string, __maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$3,"strerror");
    }
    /**
     * {@snippet :
     * char* strerror(int __errnum);
     * }
     */
    public static MemorySegment strerror(int __errnum) {
        var mh$ = strerror$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__errnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_r$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$5,"strerror_r");
    }
    /**
     * {@snippet :
     * int strerror_r(int __errnum, char* __buf, unsigned long __buflen);
     * }
     */
    public static int strerror_r(int __errnum, MemorySegment __buf, long __buflen) {
        var mh$ = strerror_r$MH();
        try {
            return (int)mh$.invokeExact(__errnum, __buf, __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_l$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$0,"strerror_l");
    }
    /**
     * {@snippet :
     * char* strerror_l(int __errnum, struct __locale_struct* __l);
     * }
     */
    public static MemorySegment strerror_l(int __errnum, MemorySegment __l) {
        var mh$ = strerror_l$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__errnum, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$1,"bcmp");
    }
    /**
     * {@snippet :
     * int bcmp(void* __s1, void* __s2, unsigned long __n);
     * }
     */
    public static int bcmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = bcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcopy$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$2,"bcopy");
    }
    /**
     * {@snippet :
     * void bcopy(void* __src, void* __dest, unsigned long __n);
     * }
     */
    public static void bcopy(MemorySegment __src, MemorySegment __dest, long __n) {
        var mh$ = bcopy$MH();
        try {
            mh$.invokeExact(__src, __dest, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$3,"bzero");
    }
    /**
     * {@snippet :
     * void bzero(void* __s, unsigned long __n);
     * }
     */
    public static void bzero(MemorySegment __s, long __n) {
        var mh$ = bzero$MH();
        try {
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle index$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$4,"index");
    }
    /**
     * {@snippet :
     * char* index(char* __s, int __c);
     * }
     */
    public static MemorySegment index(MemorySegment __s, int __c) {
        var mh$ = index$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rindex$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$5,"rindex");
    }
    /**
     * {@snippet :
     * char* rindex(char* __s, int __c);
     * }
     */
    public static MemorySegment rindex(MemorySegment __s, int __c) {
        var mh$ = rindex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffs$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$0,"ffs");
    }
    /**
     * {@snippet :
     * int ffs(int __i);
     * }
     */
    public static int ffs(int __i) {
        var mh$ = ffs$MH();
        try {
            return (int)mh$.invokeExact(__i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsl$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$2,"ffsl");
    }
    /**
     * {@snippet :
     * int ffsl(long __l);
     * }
     */
    public static int ffsl(long __l) {
        var mh$ = ffsl$MH();
        try {
            return (int)mh$.invokeExact(__l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsll$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$3,"ffsll");
    }
    /**
     * {@snippet :
     * int ffsll(long long __ll);
     * }
     */
    public static int ffsll(long __ll) {
        var mh$ = ffsll$MH();
        try {
            return (int)mh$.invokeExact(__ll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$4,"strcasecmp");
    }
    /**
     * {@snippet :
     * int strcasecmp(char* __s1, char* __s2);
     * }
     */
    public static int strcasecmp(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcasecmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$5,"strncasecmp");
    }
    /**
     * {@snippet :
     * int strncasecmp(char* __s1, char* __s2, unsigned long __n);
     * }
     */
    public static int strncasecmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = strncasecmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$0,"strcasecmp_l");
    }
    /**
     * {@snippet :
     * int strcasecmp_l(char* __s1, char* __s2, struct __locale_struct* __loc);
     * }
     */
    public static int strcasecmp_l(MemorySegment __s1, MemorySegment __s2, MemorySegment __loc) {
        var mh$ = strcasecmp_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$2,"strncasecmp_l");
    }
    /**
     * {@snippet :
     * int strncasecmp_l(char* __s1, char* __s2, unsigned long __n, struct __locale_struct* __loc);
     * }
     */
    public static int strncasecmp_l(MemorySegment __s1, MemorySegment __s2, long __n, MemorySegment __loc) {
        var mh$ = strncasecmp_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle explicit_bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$3,"explicit_bzero");
    }
    /**
     * {@snippet :
     * void explicit_bzero(void* __s, unsigned long __n);
     * }
     */
    public static void explicit_bzero(MemorySegment __s, long __n) {
        var mh$ = explicit_bzero$MH();
        try {
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsep$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$4,"strsep");
    }
    /**
     * {@snippet :
     * char* strsep(char** __stringp, char* __delim);
     * }
     */
    public static MemorySegment strsep(MemorySegment __stringp, MemorySegment __delim) {
        var mh$ = strsep$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__stringp, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$5,"strsignal");
    }
    /**
     * {@snippet :
     * char* strsignal(int __sig);
     * }
     */
    public static MemorySegment strsignal(int __sig) {
        var mh$ = strsignal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$0,"__stpcpy");
    }
    /**
     * {@snippet :
     * char* __stpcpy(char* __dest, char* __src);
     * }
     */
    public static MemorySegment __stpcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = __stpcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$1,"stpcpy");
    }
    /**
     * {@snippet :
     * char* stpcpy(char* __dest, char* __src);
     * }
     */
    public static MemorySegment stpcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = stpcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$2,"__stpncpy");
    }
    /**
     * {@snippet :
     * char* __stpncpy(char* __dest, char* __src, unsigned long __n);
     * }
     */
    public static MemorySegment __stpncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = __stpncpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$3,"stpncpy");
    }
    /**
     * {@snippet :
     * char* stpncpy(char* __dest, char* __src, unsigned long __n);
     * }
     */
    public static MemorySegment stpncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = stpncpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_log2$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$4,"av_log2");
    }
    /**
     * {@snippet :
     * int av_log2(unsigned int v);
     * }
     */
    public static int av_log2(int v) {
        var mh$ = av_log2$MH();
        try {
            return (int)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_log2_16bit$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$5,"av_log2_16bit");
    }
    /**
     * {@snippet :
     * int av_log2_16bit(unsigned int v);
     * }
     */
    public static int av_log2_16bit(int v) {
        var mh$ = av_log2_16bit$MH();
        try {
            return (int)mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$0,"av_malloc");
    }
    /**
     * {@snippet :
     * void* av_malloc(unsigned long size);
     * }
     */
    public static MemorySegment av_malloc(long size) {
        var mh$ = av_malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_mallocz$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$1,"av_mallocz");
    }
    /**
     * {@snippet :
     * void* av_mallocz(unsigned long size);
     * }
     */
    public static MemorySegment av_mallocz(long size) {
        var mh$ = av_mallocz$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_malloc_array$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$2,"av_malloc_array");
    }
    /**
     * {@snippet :
     * void* av_malloc_array(unsigned long nmemb, unsigned long size);
     * }
     */
    public static MemorySegment av_malloc_array(long nmemb, long size) {
        var mh$ = av_malloc_array$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(nmemb, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$3,"av_calloc");
    }
    /**
     * {@snippet :
     * void* av_calloc(unsigned long nmemb, unsigned long size);
     * }
     */
    public static MemorySegment av_calloc(long nmemb, long size) {
        var mh$ = av_calloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(nmemb, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_mallocz_array$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$4,"av_mallocz_array");
    }
    /**
     * {@snippet :
     * void* av_mallocz_array(unsigned long nmemb, unsigned long size);
     * }
     */
    public static MemorySegment av_mallocz_array(long nmemb, long size) {
        var mh$ = av_mallocz_array$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(nmemb, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$5,"av_realloc");
    }
    /**
     * {@snippet :
     * void* av_realloc(void* ptr, unsigned long size);
     * }
     */
    public static MemorySegment av_realloc(MemorySegment ptr, long size) {
        var mh$ = av_realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ptr, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_reallocp$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$0,"av_reallocp");
    }
    /**
     * {@snippet :
     * int av_reallocp(void* ptr, unsigned long size);
     * }
     */
    public static int av_reallocp(MemorySegment ptr, long size) {
        var mh$ = av_reallocp$MH();
        try {
            return (int)mh$.invokeExact(ptr, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_realloc_f$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$1,"av_realloc_f");
    }
    /**
     * {@snippet :
     * void* av_realloc_f(void* ptr, unsigned long nelem, unsigned long elsize);
     * }
     */
    public static MemorySegment av_realloc_f(MemorySegment ptr, long nelem, long elsize) {
        var mh$ = av_realloc_f$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ptr, nelem, elsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_realloc_array$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$2,"av_realloc_array");
    }
    /**
     * {@snippet :
     * void* av_realloc_array(void* ptr, unsigned long nmemb, unsigned long size);
     * }
     */
    public static MemorySegment av_realloc_array(MemorySegment ptr, long nmemb, long size) {
        var mh$ = av_realloc_array$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ptr, nmemb, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_reallocp_array$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$3,"av_reallocp_array");
    }
    /**
     * {@snippet :
     * int av_reallocp_array(void* ptr, unsigned long nmemb, unsigned long size);
     * }
     */
    public static int av_reallocp_array(MemorySegment ptr, long nmemb, long size) {
        var mh$ = av_reallocp_array$MH();
        try {
            return (int)mh$.invokeExact(ptr, nmemb, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_fast_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$4,"av_fast_realloc");
    }
    /**
     * {@snippet :
     * void* av_fast_realloc(void* ptr, unsigned int* size, unsigned long min_size);
     * }
     */
    public static MemorySegment av_fast_realloc(MemorySegment ptr, MemorySegment size, long min_size) {
        var mh$ = av_fast_realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ptr, size, min_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_fast_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$5,"av_fast_malloc");
    }
    /**
     * {@snippet :
     * void av_fast_malloc(void* ptr, unsigned int* size, unsigned long min_size);
     * }
     */
    public static void av_fast_malloc(MemorySegment ptr, MemorySegment size, long min_size) {
        var mh$ = av_fast_malloc$MH();
        try {
            mh$.invokeExact(ptr, size, min_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_fast_mallocz$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$0,"av_fast_mallocz");
    }
    /**
     * {@snippet :
     * void av_fast_mallocz(void* ptr, unsigned int* size, unsigned long min_size);
     * }
     */
    public static void av_fast_mallocz(MemorySegment ptr, MemorySegment size, long min_size) {
        var mh$ = av_fast_mallocz$MH();
        try {
            mh$.invokeExact(ptr, size, min_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_free$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$1,"av_free");
    }
    /**
     * {@snippet :
     * void av_free(void* ptr);
     * }
     */
    public static void av_free(MemorySegment ptr) {
        var mh$ = av_free$MH();
        try {
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_freep$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$2,"av_freep");
    }
    /**
     * {@snippet :
     * void av_freep(void* ptr);
     * }
     */
    public static void av_freep(MemorySegment ptr) {
        var mh$ = av_freep$MH();
        try {
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$3,"av_strdup");
    }
    /**
     * {@snippet :
     * char* av_strdup(char* s);
     * }
     */
    public static MemorySegment av_strdup(MemorySegment s) {
        var mh$ = av_strdup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_strndup$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$4,"av_strndup");
    }
    /**
     * {@snippet :
     * char* av_strndup(char* s, unsigned long len);
     * }
     */
    public static MemorySegment av_strndup(MemorySegment s, long len) {
        var mh$ = av_strndup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_memdup$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$5,"av_memdup");
    }
    /**
     * {@snippet :
     * void* av_memdup(void* p, unsigned long size);
     * }
     */
    public static MemorySegment av_memdup(MemorySegment p, long size) {
        var mh$ = av_memdup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_memcpy_backptr$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$1,"av_memcpy_backptr");
    }
    /**
     * {@snippet :
     * void av_memcpy_backptr(unsigned char* dst, int back, int cnt);
     * }
     */
    public static void av_memcpy_backptr(MemorySegment dst, int back, int cnt) {
        var mh$ = av_memcpy_backptr$MH();
        try {
            mh$.invokeExact(dst, back, cnt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_dynarray_add$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$3,"av_dynarray_add");
    }
    /**
     * {@snippet :
     * void av_dynarray_add(void* tab_ptr, int* nb_ptr, void* elem);
     * }
     */
    public static void av_dynarray_add(MemorySegment tab_ptr, MemorySegment nb_ptr, MemorySegment elem) {
        var mh$ = av_dynarray_add$MH();
        try {
            mh$.invokeExact(tab_ptr, nb_ptr, elem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_dynarray_add_nofree$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$4,"av_dynarray_add_nofree");
    }
    /**
     * {@snippet :
     * int av_dynarray_add_nofree(void* tab_ptr, int* nb_ptr, void* elem);
     * }
     */
    public static int av_dynarray_add_nofree(MemorySegment tab_ptr, MemorySegment nb_ptr, MemorySegment elem) {
        var mh$ = av_dynarray_add_nofree$MH();
        try {
            return (int)mh$.invokeExact(tab_ptr, nb_ptr, elem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_dynarray2_add$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$6,"av_dynarray2_add");
    }
    /**
     * {@snippet :
     * void* av_dynarray2_add(void** tab_ptr, int* nb_ptr, unsigned long elem_size, unsigned char* elem_data);
     * }
     */
    public static MemorySegment av_dynarray2_add(MemorySegment tab_ptr, MemorySegment nb_ptr, long elem_size, MemorySegment elem_data) {
        var mh$ = av_dynarray2_add$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tab_ptr, nb_ptr, elem_size, elem_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_size_mult$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$1,"av_size_mult");
    }
    /**
     * {@snippet :
     * int av_size_mult(unsigned long a, unsigned long b, unsigned long* r);
     * }
     */
    public static int av_size_mult(long a, long b, MemorySegment r) {
        var mh$ = av_size_mult$MH();
        try {
            return (int)mh$.invokeExact(a, b, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_max_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$2,"av_max_alloc");
    }
    /**
     * {@snippet :
     * void av_max_alloc(unsigned long max);
     * }
     */
    public static void av_max_alloc(long max) {
        var mh$ = av_max_alloc$MH();
        try {
            mh$.invokeExact(max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = JAVA_LONG;
    public static MethodHandle av_strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$5,"av_strerror");
    }
    /**
     * {@snippet :
     * int av_strerror(int errnum, char* errbuf, unsigned long errbuf_size);
     * }
     */
    public static int av_strerror(int errnum, MemorySegment errbuf, long errbuf_size) {
        var mh$ = av_strerror$MH();
        try {
            return (int)mh$.invokeExact(errnum, errbuf, errbuf_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_reduce$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$4,"av_reduce");
    }
    /**
     * {@snippet :
     * int av_reduce(int* dst_num, int* dst_den, long num, long den, long max);
     * }
     */
    public static int av_reduce(MemorySegment dst_num, MemorySegment dst_den, long num, long den, long max) {
        var mh$ = av_reduce$MH();
        try {
            return (int)mh$.invokeExact(dst_num, dst_den, num, den, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_mul_q$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$6,"av_mul_q");
    }
    /**
     * {@snippet :
     * struct AVRational av_mul_q(struct AVRational b, struct AVRational c);
     * }
     */
    public static MemorySegment av_mul_q(SegmentAllocator allocator, MemorySegment b, MemorySegment c) {
        var mh$ = av_mul_q$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_div_q$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$0,"av_div_q");
    }
    /**
     * {@snippet :
     * struct AVRational av_div_q(struct AVRational b, struct AVRational c);
     * }
     */
    public static MemorySegment av_div_q(SegmentAllocator allocator, MemorySegment b, MemorySegment c) {
        var mh$ = av_div_q$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_add_q$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$1,"av_add_q");
    }
    /**
     * {@snippet :
     * struct AVRational av_add_q(struct AVRational b, struct AVRational c);
     * }
     */
    public static MemorySegment av_add_q(SegmentAllocator allocator, MemorySegment b, MemorySegment c) {
        var mh$ = av_add_q$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_sub_q$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$2,"av_sub_q");
    }
    /**
     * {@snippet :
     * struct AVRational av_sub_q(struct AVRational b, struct AVRational c);
     * }
     */
    public static MemorySegment av_sub_q(SegmentAllocator allocator, MemorySegment b, MemorySegment c) {
        var mh$ = av_sub_q$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_d2q$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$4,"av_d2q");
    }
    /**
     * {@snippet :
     * struct AVRational av_d2q(double d, int max);
     * }
     */
    public static MemorySegment av_d2q(SegmentAllocator allocator, double d, int max) {
        var mh$ = av_d2q$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, d, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_nearer_q$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$6,"av_nearer_q");
    }
    /**
     * {@snippet :
     * int av_nearer_q(struct AVRational q, struct AVRational q1, struct AVRational q2);
     * }
     */
    public static int av_nearer_q(MemorySegment q, MemorySegment q1, MemorySegment q2) {
        var mh$ = av_nearer_q$MH();
        try {
            return (int)mh$.invokeExact(q, q1, q2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_find_nearest_q_idx$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$1,"av_find_nearest_q_idx");
    }
    /**
     * {@snippet :
     * int av_find_nearest_q_idx(struct AVRational q, struct AVRational* q_list);
     * }
     */
    public static int av_find_nearest_q_idx(MemorySegment q, MemorySegment q_list) {
        var mh$ = av_find_nearest_q_idx$MH();
        try {
            return (int)mh$.invokeExact(q, q_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_q2intfloat$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$3,"av_q2intfloat");
    }
    /**
     * {@snippet :
     * unsigned int av_q2intfloat(struct AVRational q);
     * }
     */
    public static int av_q2intfloat(MemorySegment q) {
        var mh$ = av_q2intfloat$MH();
        try {
            return (int)mh$.invokeExact(q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_gcd_q$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$5,"av_gcd_q");
    }
    /**
     * {@snippet :
     * struct AVRational av_gcd_q(struct AVRational a, struct AVRational b, int max_den, struct AVRational def);
     * }
     */
    public static MemorySegment av_gcd_q(SegmentAllocator allocator, MemorySegment a, MemorySegment b, int max_den, MemorySegment def) {
        var mh$ = av_gcd_q$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, a, b, max_den, def);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVRounding.AV_ROUND_ZERO = 0;
     * }
     */
    public static int AV_ROUND_ZERO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVRounding.AV_ROUND_INF = 1;
     * }
     */
    public static int AV_ROUND_INF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVRounding.AV_ROUND_DOWN = 2;
     * }
     */
    public static int AV_ROUND_DOWN() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVRounding.AV_ROUND_UP = 3;
     * }
     */
    public static int AV_ROUND_UP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVRounding.AV_ROUND_NEAR_INF = 5;
     * }
     */
    public static int AV_ROUND_NEAR_INF() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVRounding.AV_ROUND_PASS_MINMAX = 8192;
     * }
     */
    public static int AV_ROUND_PASS_MINMAX() {
        return (int)8192L;
    }
    public static MethodHandle av_gcd$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$1,"av_gcd");
    }
    /**
     * {@snippet :
     * long av_gcd(long a, long b);
     * }
     */
    public static long av_gcd(long a, long b) {
        var mh$ = av_gcd$MH();
        try {
            return (long)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_rescale$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$3,"av_rescale");
    }
    /**
     * {@snippet :
     * long av_rescale(long a, long b, long c);
     * }
     */
    public static long av_rescale(long a, long b, long c) {
        var mh$ = av_rescale$MH();
        try {
            return (long)mh$.invokeExact(a, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_rescale_rnd$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$5,"av_rescale_rnd");
    }
    /**
     * {@snippet :
     * long av_rescale_rnd(long a, long b, long c, enum AVRounding rnd);
     * }
     */
    public static long av_rescale_rnd(long a, long b, long c, int rnd) {
        var mh$ = av_rescale_rnd$MH();
        try {
            return (long)mh$.invokeExact(a, b, c, rnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_rescale_q$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$1,"av_rescale_q");
    }
    /**
     * {@snippet :
     * long av_rescale_q(long a, struct AVRational bq, struct AVRational cq);
     * }
     */
    public static long av_rescale_q(long a, MemorySegment bq, MemorySegment cq) {
        var mh$ = av_rescale_q$MH();
        try {
            return (long)mh$.invokeExact(a, bq, cq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_rescale_q_rnd$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$3,"av_rescale_q_rnd");
    }
    /**
     * {@snippet :
     * long av_rescale_q_rnd(long a, struct AVRational bq, struct AVRational cq, enum AVRounding rnd);
     * }
     */
    public static long av_rescale_q_rnd(long a, MemorySegment bq, MemorySegment cq, int rnd) {
        var mh$ = av_rescale_q_rnd$MH();
        try {
            return (long)mh$.invokeExact(a, bq, cq, rnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_compare_ts$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$5,"av_compare_ts");
    }
    /**
     * {@snippet :
     * int av_compare_ts(long ts_a, struct AVRational tb_a, long ts_b, struct AVRational tb_b);
     * }
     */
    public static int av_compare_ts(long ts_a, MemorySegment tb_a, long ts_b, MemorySegment tb_b) {
        var mh$ = av_compare_ts$MH();
        try {
            return (int)mh$.invokeExact(ts_a, tb_a, ts_b, tb_b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_compare_mod$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$0,"av_compare_mod");
    }
    /**
     * {@snippet :
     * long av_compare_mod(unsigned long a, unsigned long b, unsigned long mod);
     * }
     */
    public static long av_compare_mod(long a, long b, long mod) {
        var mh$ = av_compare_mod$MH();
        try {
            return (long)mh$.invokeExact(a, b, mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_rescale_delta$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$2,"av_rescale_delta");
    }
    /**
     * {@snippet :
     * long av_rescale_delta(struct AVRational in_tb, long in_ts, struct AVRational fs_tb, int duration, long* last, struct AVRational out_tb);
     * }
     */
    public static long av_rescale_delta(MemorySegment in_tb, long in_ts, MemorySegment fs_tb, int duration, MemorySegment last, MemorySegment out_tb) {
        var mh$ = av_rescale_delta$MH();
        try {
            return (long)mh$.invokeExact(in_tb, in_ts, fs_tb, duration, last, out_tb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_add_stable$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$4,"av_add_stable");
    }
    /**
     * {@snippet :
     * long av_add_stable(struct AVRational ts_tb, long ts, struct AVRational inc_tb, long inc);
     * }
     */
    public static long av_add_stable(MemorySegment ts_tb, long ts, MemorySegment inc_tb, long inc) {
        var mh$ = av_add_stable$MH();
        try {
            return (long)mh$.invokeExact(ts_tb, ts, inc_tb, inc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_NA = 0;
     * }
     */
    public static int AV_CLASS_CATEGORY_NA() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_INPUT = 1;
     * }
     */
    public static int AV_CLASS_CATEGORY_INPUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_OUTPUT = 2;
     * }
     */
    public static int AV_CLASS_CATEGORY_OUTPUT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_MUXER = 3;
     * }
     */
    public static int AV_CLASS_CATEGORY_MUXER() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_DEMUXER = 4;
     * }
     */
    public static int AV_CLASS_CATEGORY_DEMUXER() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_ENCODER = 5;
     * }
     */
    public static int AV_CLASS_CATEGORY_ENCODER() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_DECODER = 6;
     * }
     */
    public static int AV_CLASS_CATEGORY_DECODER() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_FILTER = 7;
     * }
     */
    public static int AV_CLASS_CATEGORY_FILTER() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_BITSTREAM_FILTER = 8;
     * }
     */
    public static int AV_CLASS_CATEGORY_BITSTREAM_FILTER() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_SWSCALER = 9;
     * }
     */
    public static int AV_CLASS_CATEGORY_SWSCALER() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_SWRESAMPLER = 10;
     * }
     */
    public static int AV_CLASS_CATEGORY_SWRESAMPLER() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT = 40;
     * }
     */
    public static int AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT = 41;
     * }
     */
    public static int AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT = 42;
     * }
     */
    public static int AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT = 43;
     * }
     */
    public static int AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_DEVICE_OUTPUT = 44;
     * }
     */
    public static int AV_CLASS_CATEGORY_DEVICE_OUTPUT() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_DEVICE_INPUT = 45;
     * }
     */
    public static int AV_CLASS_CATEGORY_DEVICE_INPUT() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * enum AVClassCategory.AV_CLASS_CATEGORY_NB = 46;
     * }
     */
    public static int AV_CLASS_CATEGORY_NB() {
        return (int)46L;
    }
    public static MethodHandle av_log$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$4,"av_log");
    }
    /**
     * {@snippet :
     * void av_log(void* avcl, int level, char* fmt,...);
     * }
     */
    public static void av_log(MemorySegment avcl, int level, MemorySegment fmt, Object... x3) {
        var mh$ = av_log$MH();
        try {
            mh$.invokeExact(avcl, level, fmt, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_log_once$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$6,"av_log_once");
    }
    /**
     * {@snippet :
     * void av_log_once(void* avcl, int initial_level, int subsequent_level, int* state, char* fmt,...);
     * }
     */
    public static void av_log_once(MemorySegment avcl, int initial_level, int subsequent_level, MemorySegment state, MemorySegment fmt, Object... x5) {
        var mh$ = av_log_once$MH();
        try {
            mh$.invokeExact(avcl, initial_level, subsequent_level, state, fmt, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_vlog$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$1,"av_vlog");
    }
    /**
     * {@snippet :
     * void av_vlog(void* avcl, int level, char* fmt, struct __va_list_tag vl[1]);
     * }
     */
    public static void av_vlog(MemorySegment avcl, int level, MemorySegment fmt, MemorySegment vl) {
        var mh$ = av_vlog$MH();
        try {
            mh$.invokeExact(avcl, level, fmt, vl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_log_get_level$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$2,"av_log_get_level");
    }
    /**
     * {@snippet :
     * int av_log_get_level();
     * }
     */
    public static int av_log_get_level() {
        var mh$ = av_log_get_level$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_log_set_level$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$3,"av_log_set_level");
    }
    /**
     * {@snippet :
     * void av_log_set_level(int level);
     * }
     */
    public static void av_log_set_level(int level) {
        var mh$ = av_log_set_level$MH();
        try {
            mh$.invokeExact(level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_log_set_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$0,"av_log_set_callback");
    }
    /**
     * {@snippet :
     * void av_log_set_callback(void (*callback)(void*,int,char*,struct __va_list_tag*));
     * }
     */
    public static void av_log_set_callback(MemorySegment callback) {
        var mh$ = av_log_set_callback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_log_default_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$1,"av_log_default_callback");
    }
    /**
     * {@snippet :
     * void av_log_default_callback(void* avcl, int level, char* fmt, struct __va_list_tag vl[1]);
     * }
     */
    public static void av_log_default_callback(MemorySegment avcl, int level, MemorySegment fmt, MemorySegment vl) {
        var mh$ = av_log_default_callback$MH();
        try {
            mh$.invokeExact(avcl, level, fmt, vl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_default_item_name$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$2,"av_default_item_name");
    }
    /**
     * {@snippet :
     * char* av_default_item_name(void* ctx);
     * }
     */
    public static MemorySegment av_default_item_name(MemorySegment ctx) {
        var mh$ = av_default_item_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_default_get_category$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$3,"av_default_get_category");
    }
    /**
     * {@snippet :
     * enum AVClassCategory av_default_get_category(void* ptr);
     * }
     */
    public static int av_default_get_category(MemorySegment ptr) {
        var mh$ = av_default_get_category$MH();
        try {
            return (int)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_log_format_line$MH() {
        return RuntimeHelper.requireNonNull(constants$146.const$5,"av_log_format_line");
    }
    /**
     * {@snippet :
     * void av_log_format_line(void* ptr, int level, char* fmt, struct __va_list_tag vl[1], char* line, int line_size, int* print_prefix);
     * }
     */
    public static void av_log_format_line(MemorySegment ptr, int level, MemorySegment fmt, MemorySegment vl, MemorySegment line, int line_size, MemorySegment print_prefix) {
        var mh$ = av_log_format_line$MH();
        try {
            mh$.invokeExact(ptr, level, fmt, vl, line, line_size, print_prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_log_format_line2$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$1,"av_log_format_line2");
    }
    /**
     * {@snippet :
     * int av_log_format_line2(void* ptr, int level, char* fmt, struct __va_list_tag vl[1], char* line, int line_size, int* print_prefix);
     * }
     */
    public static int av_log_format_line2(MemorySegment ptr, int level, MemorySegment fmt, MemorySegment vl, MemorySegment line, int line_size, MemorySegment print_prefix) {
        var mh$ = av_log_format_line2$MH();
        try {
            return (int)mh$.invokeExact(ptr, level, fmt, vl, line, line_size, print_prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_log_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$2,"av_log_set_flags");
    }
    /**
     * {@snippet :
     * void av_log_set_flags(int arg);
     * }
     */
    public static void av_log_set_flags(int arg) {
        var mh$ = av_log_set_flags$MH();
        try {
            mh$.invokeExact(arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_log_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$3,"av_log_get_flags");
    }
    /**
     * {@snippet :
     * int av_log_get_flags();
     * }
     */
    public static int av_log_get_flags() {
        var mh$ = av_log_get_flags$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_NONE = -1;
     * }
     */
    public static int AV_PIX_FMT_NONE() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV420P = 0;
     * }
     */
    public static int AV_PIX_FMT_YUV420P() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUYV422 = 1;
     * }
     */
    public static int AV_PIX_FMT_YUYV422() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGB24 = 2;
     * }
     */
    public static int AV_PIX_FMT_RGB24() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGR24 = 3;
     * }
     */
    public static int AV_PIX_FMT_BGR24() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV422P = 4;
     * }
     */
    public static int AV_PIX_FMT_YUV422P() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV444P = 5;
     * }
     */
    public static int AV_PIX_FMT_YUV444P() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV410P = 6;
     * }
     */
    public static int AV_PIX_FMT_YUV410P() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV411P = 7;
     * }
     */
    public static int AV_PIX_FMT_YUV411P() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GRAY8 = 8;
     * }
     */
    public static int AV_PIX_FMT_GRAY8() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_MONOWHITE = 9;
     * }
     */
    public static int AV_PIX_FMT_MONOWHITE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_MONOBLACK = 10;
     * }
     */
    public static int AV_PIX_FMT_MONOBLACK() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_PAL8 = 11;
     * }
     */
    public static int AV_PIX_FMT_PAL8() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVJ420P = 12;
     * }
     */
    public static int AV_PIX_FMT_YUVJ420P() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVJ422P = 13;
     * }
     */
    public static int AV_PIX_FMT_YUVJ422P() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVJ444P = 14;
     * }
     */
    public static int AV_PIX_FMT_YUVJ444P() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_UYVY422 = 15;
     * }
     */
    public static int AV_PIX_FMT_UYVY422() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_UYYVYY411 = 16;
     * }
     */
    public static int AV_PIX_FMT_UYYVYY411() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGR8 = 17;
     * }
     */
    public static int AV_PIX_FMT_BGR8() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGR4 = 18;
     * }
     */
    public static int AV_PIX_FMT_BGR4() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGR4_BYTE = 19;
     * }
     */
    public static int AV_PIX_FMT_BGR4_BYTE() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGB8 = 20;
     * }
     */
    public static int AV_PIX_FMT_RGB8() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGB4 = 21;
     * }
     */
    public static int AV_PIX_FMT_RGB4() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGB4_BYTE = 22;
     * }
     */
    public static int AV_PIX_FMT_RGB4_BYTE() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_NV12 = 23;
     * }
     */
    public static int AV_PIX_FMT_NV12() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_NV21 = 24;
     * }
     */
    public static int AV_PIX_FMT_NV21() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_ARGB = 25;
     * }
     */
    public static int AV_PIX_FMT_ARGB() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGBA = 26;
     * }
     */
    public static int AV_PIX_FMT_RGBA() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_ABGR = 27;
     * }
     */
    public static int AV_PIX_FMT_ABGR() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGRA = 28;
     * }
     */
    public static int AV_PIX_FMT_BGRA() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GRAY16BE = 29;
     * }
     */
    public static int AV_PIX_FMT_GRAY16BE() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GRAY16LE = 30;
     * }
     */
    public static int AV_PIX_FMT_GRAY16LE() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV440P = 31;
     * }
     */
    public static int AV_PIX_FMT_YUV440P() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVJ440P = 32;
     * }
     */
    public static int AV_PIX_FMT_YUVJ440P() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA420P = 33;
     * }
     */
    public static int AV_PIX_FMT_YUVA420P() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGB48BE = 34;
     * }
     */
    public static int AV_PIX_FMT_RGB48BE() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGB48LE = 35;
     * }
     */
    public static int AV_PIX_FMT_RGB48LE() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGB565BE = 36;
     * }
     */
    public static int AV_PIX_FMT_RGB565BE() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGB565LE = 37;
     * }
     */
    public static int AV_PIX_FMT_RGB565LE() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGB555BE = 38;
     * }
     */
    public static int AV_PIX_FMT_RGB555BE() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGB555LE = 39;
     * }
     */
    public static int AV_PIX_FMT_RGB555LE() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGR565BE = 40;
     * }
     */
    public static int AV_PIX_FMT_BGR565BE() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGR565LE = 41;
     * }
     */
    public static int AV_PIX_FMT_BGR565LE() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGR555BE = 42;
     * }
     */
    public static int AV_PIX_FMT_BGR555BE() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGR555LE = 43;
     * }
     */
    public static int AV_PIX_FMT_BGR555LE() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_VAAPI = 44;
     * }
     */
    public static int AV_PIX_FMT_VAAPI() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV420P16LE = 45;
     * }
     */
    public static int AV_PIX_FMT_YUV420P16LE() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV420P16BE = 46;
     * }
     */
    public static int AV_PIX_FMT_YUV420P16BE() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV422P16LE = 47;
     * }
     */
    public static int AV_PIX_FMT_YUV422P16LE() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV422P16BE = 48;
     * }
     */
    public static int AV_PIX_FMT_YUV422P16BE() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV444P16LE = 49;
     * }
     */
    public static int AV_PIX_FMT_YUV444P16LE() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV444P16BE = 50;
     * }
     */
    public static int AV_PIX_FMT_YUV444P16BE() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_DXVA2_VLD = 51;
     * }
     */
    public static int AV_PIX_FMT_DXVA2_VLD() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGB444LE = 52;
     * }
     */
    public static int AV_PIX_FMT_RGB444LE() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGB444BE = 53;
     * }
     */
    public static int AV_PIX_FMT_RGB444BE() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGR444LE = 54;
     * }
     */
    public static int AV_PIX_FMT_BGR444LE() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGR444BE = 55;
     * }
     */
    public static int AV_PIX_FMT_BGR444BE() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YA8 = 56;
     * }
     */
    public static int AV_PIX_FMT_YA8() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_Y400A = 56;
     * }
     */
    public static int AV_PIX_FMT_Y400A() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GRAY8A = 56;
     * }
     */
    public static int AV_PIX_FMT_GRAY8A() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGR48BE = 57;
     * }
     */
    public static int AV_PIX_FMT_BGR48BE() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGR48LE = 58;
     * }
     */
    public static int AV_PIX_FMT_BGR48LE() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV420P9BE = 59;
     * }
     */
    public static int AV_PIX_FMT_YUV420P9BE() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV420P9LE = 60;
     * }
     */
    public static int AV_PIX_FMT_YUV420P9LE() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV420P10BE = 61;
     * }
     */
    public static int AV_PIX_FMT_YUV420P10BE() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV420P10LE = 62;
     * }
     */
    public static int AV_PIX_FMT_YUV420P10LE() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV422P10BE = 63;
     * }
     */
    public static int AV_PIX_FMT_YUV422P10BE() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV422P10LE = 64;
     * }
     */
    public static int AV_PIX_FMT_YUV422P10LE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV444P9BE = 65;
     * }
     */
    public static int AV_PIX_FMT_YUV444P9BE() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV444P9LE = 66;
     * }
     */
    public static int AV_PIX_FMT_YUV444P9LE() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV444P10BE = 67;
     * }
     */
    public static int AV_PIX_FMT_YUV444P10BE() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV444P10LE = 68;
     * }
     */
    public static int AV_PIX_FMT_YUV444P10LE() {
        return (int)68L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV422P9BE = 69;
     * }
     */
    public static int AV_PIX_FMT_YUV422P9BE() {
        return (int)69L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV422P9LE = 70;
     * }
     */
    public static int AV_PIX_FMT_YUV422P9LE() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRP = 71;
     * }
     */
    public static int AV_PIX_FMT_GBRP() {
        return (int)71L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBR24P = 71;
     * }
     */
    public static int AV_PIX_FMT_GBR24P() {
        return (int)71L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRP9BE = 72;
     * }
     */
    public static int AV_PIX_FMT_GBRP9BE() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRP9LE = 73;
     * }
     */
    public static int AV_PIX_FMT_GBRP9LE() {
        return (int)73L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRP10BE = 74;
     * }
     */
    public static int AV_PIX_FMT_GBRP10BE() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRP10LE = 75;
     * }
     */
    public static int AV_PIX_FMT_GBRP10LE() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRP16BE = 76;
     * }
     */
    public static int AV_PIX_FMT_GBRP16BE() {
        return (int)76L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRP16LE = 77;
     * }
     */
    public static int AV_PIX_FMT_GBRP16LE() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA422P = 78;
     * }
     */
    public static int AV_PIX_FMT_YUVA422P() {
        return (int)78L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA444P = 79;
     * }
     */
    public static int AV_PIX_FMT_YUVA444P() {
        return (int)79L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA420P9BE = 80;
     * }
     */
    public static int AV_PIX_FMT_YUVA420P9BE() {
        return (int)80L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA420P9LE = 81;
     * }
     */
    public static int AV_PIX_FMT_YUVA420P9LE() {
        return (int)81L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA422P9BE = 82;
     * }
     */
    public static int AV_PIX_FMT_YUVA422P9BE() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA422P9LE = 83;
     * }
     */
    public static int AV_PIX_FMT_YUVA422P9LE() {
        return (int)83L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA444P9BE = 84;
     * }
     */
    public static int AV_PIX_FMT_YUVA444P9BE() {
        return (int)84L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA444P9LE = 85;
     * }
     */
    public static int AV_PIX_FMT_YUVA444P9LE() {
        return (int)85L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA420P10BE = 86;
     * }
     */
    public static int AV_PIX_FMT_YUVA420P10BE() {
        return (int)86L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA420P10LE = 87;
     * }
     */
    public static int AV_PIX_FMT_YUVA420P10LE() {
        return (int)87L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA422P10BE = 88;
     * }
     */
    public static int AV_PIX_FMT_YUVA422P10BE() {
        return (int)88L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA422P10LE = 89;
     * }
     */
    public static int AV_PIX_FMT_YUVA422P10LE() {
        return (int)89L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA444P10BE = 90;
     * }
     */
    public static int AV_PIX_FMT_YUVA444P10BE() {
        return (int)90L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA444P10LE = 91;
     * }
     */
    public static int AV_PIX_FMT_YUVA444P10LE() {
        return (int)91L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA420P16BE = 92;
     * }
     */
    public static int AV_PIX_FMT_YUVA420P16BE() {
        return (int)92L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA420P16LE = 93;
     * }
     */
    public static int AV_PIX_FMT_YUVA420P16LE() {
        return (int)93L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA422P16BE = 94;
     * }
     */
    public static int AV_PIX_FMT_YUVA422P16BE() {
        return (int)94L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA422P16LE = 95;
     * }
     */
    public static int AV_PIX_FMT_YUVA422P16LE() {
        return (int)95L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA444P16BE = 96;
     * }
     */
    public static int AV_PIX_FMT_YUVA444P16BE() {
        return (int)96L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA444P16LE = 97;
     * }
     */
    public static int AV_PIX_FMT_YUVA444P16LE() {
        return (int)97L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_VDPAU = 98;
     * }
     */
    public static int AV_PIX_FMT_VDPAU() {
        return (int)98L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_XYZ12LE = 99;
     * }
     */
    public static int AV_PIX_FMT_XYZ12LE() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_XYZ12BE = 100;
     * }
     */
    public static int AV_PIX_FMT_XYZ12BE() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_NV16 = 101;
     * }
     */
    public static int AV_PIX_FMT_NV16() {
        return (int)101L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_NV20LE = 102;
     * }
     */
    public static int AV_PIX_FMT_NV20LE() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_NV20BE = 103;
     * }
     */
    public static int AV_PIX_FMT_NV20BE() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGBA64BE = 104;
     * }
     */
    public static int AV_PIX_FMT_RGBA64BE() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGBA64LE = 105;
     * }
     */
    public static int AV_PIX_FMT_RGBA64LE() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGRA64BE = 106;
     * }
     */
    public static int AV_PIX_FMT_BGRA64BE() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGRA64LE = 107;
     * }
     */
    public static int AV_PIX_FMT_BGRA64LE() {
        return (int)107L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YVYU422 = 108;
     * }
     */
    public static int AV_PIX_FMT_YVYU422() {
        return (int)108L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YA16BE = 109;
     * }
     */
    public static int AV_PIX_FMT_YA16BE() {
        return (int)109L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YA16LE = 110;
     * }
     */
    public static int AV_PIX_FMT_YA16LE() {
        return (int)110L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRAP = 111;
     * }
     */
    public static int AV_PIX_FMT_GBRAP() {
        return (int)111L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRAP16BE = 112;
     * }
     */
    public static int AV_PIX_FMT_GBRAP16BE() {
        return (int)112L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRAP16LE = 113;
     * }
     */
    public static int AV_PIX_FMT_GBRAP16LE() {
        return (int)113L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_QSV = 114;
     * }
     */
    public static int AV_PIX_FMT_QSV() {
        return (int)114L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_MMAL = 115;
     * }
     */
    public static int AV_PIX_FMT_MMAL() {
        return (int)115L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_D3D11VA_VLD = 116;
     * }
     */
    public static int AV_PIX_FMT_D3D11VA_VLD() {
        return (int)116L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_CUDA = 117;
     * }
     */
    public static int AV_PIX_FMT_CUDA() {
        return (int)117L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_0RGB = 118;
     * }
     */
    public static int AV_PIX_FMT_0RGB() {
        return (int)118L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_RGB0 = 119;
     * }
     */
    public static int AV_PIX_FMT_RGB0() {
        return (int)119L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_0BGR = 120;
     * }
     */
    public static int AV_PIX_FMT_0BGR() {
        return (int)120L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BGR0 = 121;
     * }
     */
    public static int AV_PIX_FMT_BGR0() {
        return (int)121L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV420P12BE = 122;
     * }
     */
    public static int AV_PIX_FMT_YUV420P12BE() {
        return (int)122L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV420P12LE = 123;
     * }
     */
    public static int AV_PIX_FMT_YUV420P12LE() {
        return (int)123L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV420P14BE = 124;
     * }
     */
    public static int AV_PIX_FMT_YUV420P14BE() {
        return (int)124L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV420P14LE = 125;
     * }
     */
    public static int AV_PIX_FMT_YUV420P14LE() {
        return (int)125L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV422P12BE = 126;
     * }
     */
    public static int AV_PIX_FMT_YUV422P12BE() {
        return (int)126L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV422P12LE = 127;
     * }
     */
    public static int AV_PIX_FMT_YUV422P12LE() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV422P14BE = 128;
     * }
     */
    public static int AV_PIX_FMT_YUV422P14BE() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV422P14LE = 129;
     * }
     */
    public static int AV_PIX_FMT_YUV422P14LE() {
        return (int)129L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV444P12BE = 130;
     * }
     */
    public static int AV_PIX_FMT_YUV444P12BE() {
        return (int)130L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV444P12LE = 131;
     * }
     */
    public static int AV_PIX_FMT_YUV444P12LE() {
        return (int)131L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV444P14BE = 132;
     * }
     */
    public static int AV_PIX_FMT_YUV444P14BE() {
        return (int)132L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV444P14LE = 133;
     * }
     */
    public static int AV_PIX_FMT_YUV444P14LE() {
        return (int)133L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRP12BE = 134;
     * }
     */
    public static int AV_PIX_FMT_GBRP12BE() {
        return (int)134L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRP12LE = 135;
     * }
     */
    public static int AV_PIX_FMT_GBRP12LE() {
        return (int)135L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRP14BE = 136;
     * }
     */
    public static int AV_PIX_FMT_GBRP14BE() {
        return (int)136L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRP14LE = 137;
     * }
     */
    public static int AV_PIX_FMT_GBRP14LE() {
        return (int)137L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVJ411P = 138;
     * }
     */
    public static int AV_PIX_FMT_YUVJ411P() {
        return (int)138L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BAYER_BGGR8 = 139;
     * }
     */
    public static int AV_PIX_FMT_BAYER_BGGR8() {
        return (int)139L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BAYER_RGGB8 = 140;
     * }
     */
    public static int AV_PIX_FMT_BAYER_RGGB8() {
        return (int)140L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BAYER_GBRG8 = 141;
     * }
     */
    public static int AV_PIX_FMT_BAYER_GBRG8() {
        return (int)141L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BAYER_GRBG8 = 142;
     * }
     */
    public static int AV_PIX_FMT_BAYER_GRBG8() {
        return (int)142L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BAYER_BGGR16LE = 143;
     * }
     */
    public static int AV_PIX_FMT_BAYER_BGGR16LE() {
        return (int)143L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BAYER_BGGR16BE = 144;
     * }
     */
    public static int AV_PIX_FMT_BAYER_BGGR16BE() {
        return (int)144L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BAYER_RGGB16LE = 145;
     * }
     */
    public static int AV_PIX_FMT_BAYER_RGGB16LE() {
        return (int)145L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BAYER_RGGB16BE = 146;
     * }
     */
    public static int AV_PIX_FMT_BAYER_RGGB16BE() {
        return (int)146L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BAYER_GBRG16LE = 147;
     * }
     */
    public static int AV_PIX_FMT_BAYER_GBRG16LE() {
        return (int)147L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BAYER_GBRG16BE = 148;
     * }
     */
    public static int AV_PIX_FMT_BAYER_GBRG16BE() {
        return (int)148L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BAYER_GRBG16LE = 149;
     * }
     */
    public static int AV_PIX_FMT_BAYER_GRBG16LE() {
        return (int)149L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_BAYER_GRBG16BE = 150;
     * }
     */
    public static int AV_PIX_FMT_BAYER_GRBG16BE() {
        return (int)150L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_XVMC = 151;
     * }
     */
    public static int AV_PIX_FMT_XVMC() {
        return (int)151L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV440P10LE = 152;
     * }
     */
    public static int AV_PIX_FMT_YUV440P10LE() {
        return (int)152L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV440P10BE = 153;
     * }
     */
    public static int AV_PIX_FMT_YUV440P10BE() {
        return (int)153L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV440P12LE = 154;
     * }
     */
    public static int AV_PIX_FMT_YUV440P12LE() {
        return (int)154L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUV440P12BE = 155;
     * }
     */
    public static int AV_PIX_FMT_YUV440P12BE() {
        return (int)155L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_AYUV64LE = 156;
     * }
     */
    public static int AV_PIX_FMT_AYUV64LE() {
        return (int)156L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_AYUV64BE = 157;
     * }
     */
    public static int AV_PIX_FMT_AYUV64BE() {
        return (int)157L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_VIDEOTOOLBOX = 158;
     * }
     */
    public static int AV_PIX_FMT_VIDEOTOOLBOX() {
        return (int)158L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_P010LE = 159;
     * }
     */
    public static int AV_PIX_FMT_P010LE() {
        return (int)159L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_P010BE = 160;
     * }
     */
    public static int AV_PIX_FMT_P010BE() {
        return (int)160L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRAP12BE = 161;
     * }
     */
    public static int AV_PIX_FMT_GBRAP12BE() {
        return (int)161L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRAP12LE = 162;
     * }
     */
    public static int AV_PIX_FMT_GBRAP12LE() {
        return (int)162L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRAP10BE = 163;
     * }
     */
    public static int AV_PIX_FMT_GBRAP10BE() {
        return (int)163L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRAP10LE = 164;
     * }
     */
    public static int AV_PIX_FMT_GBRAP10LE() {
        return (int)164L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_MEDIACODEC = 165;
     * }
     */
    public static int AV_PIX_FMT_MEDIACODEC() {
        return (int)165L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GRAY12BE = 166;
     * }
     */
    public static int AV_PIX_FMT_GRAY12BE() {
        return (int)166L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GRAY12LE = 167;
     * }
     */
    public static int AV_PIX_FMT_GRAY12LE() {
        return (int)167L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GRAY10BE = 168;
     * }
     */
    public static int AV_PIX_FMT_GRAY10BE() {
        return (int)168L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GRAY10LE = 169;
     * }
     */
    public static int AV_PIX_FMT_GRAY10LE() {
        return (int)169L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_P016LE = 170;
     * }
     */
    public static int AV_PIX_FMT_P016LE() {
        return (int)170L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_P016BE = 171;
     * }
     */
    public static int AV_PIX_FMT_P016BE() {
        return (int)171L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_D3D11 = 172;
     * }
     */
    public static int AV_PIX_FMT_D3D11() {
        return (int)172L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GRAY9BE = 173;
     * }
     */
    public static int AV_PIX_FMT_GRAY9BE() {
        return (int)173L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GRAY9LE = 174;
     * }
     */
    public static int AV_PIX_FMT_GRAY9LE() {
        return (int)174L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRPF32BE = 175;
     * }
     */
    public static int AV_PIX_FMT_GBRPF32BE() {
        return (int)175L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRPF32LE = 176;
     * }
     */
    public static int AV_PIX_FMT_GBRPF32LE() {
        return (int)176L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRAPF32BE = 177;
     * }
     */
    public static int AV_PIX_FMT_GBRAPF32BE() {
        return (int)177L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GBRAPF32LE = 178;
     * }
     */
    public static int AV_PIX_FMT_GBRAPF32LE() {
        return (int)178L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_DRM_PRIME = 179;
     * }
     */
    public static int AV_PIX_FMT_DRM_PRIME() {
        return (int)179L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_OPENCL = 180;
     * }
     */
    public static int AV_PIX_FMT_OPENCL() {
        return (int)180L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GRAY14BE = 181;
     * }
     */
    public static int AV_PIX_FMT_GRAY14BE() {
        return (int)181L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GRAY14LE = 182;
     * }
     */
    public static int AV_PIX_FMT_GRAY14LE() {
        return (int)182L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GRAYF32BE = 183;
     * }
     */
    public static int AV_PIX_FMT_GRAYF32BE() {
        return (int)183L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_GRAYF32LE = 184;
     * }
     */
    public static int AV_PIX_FMT_GRAYF32LE() {
        return (int)184L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA422P12BE = 185;
     * }
     */
    public static int AV_PIX_FMT_YUVA422P12BE() {
        return (int)185L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA422P12LE = 186;
     * }
     */
    public static int AV_PIX_FMT_YUVA422P12LE() {
        return (int)186L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA444P12BE = 187;
     * }
     */
    public static int AV_PIX_FMT_YUVA444P12BE() {
        return (int)187L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_YUVA444P12LE = 188;
     * }
     */
    public static int AV_PIX_FMT_YUVA444P12LE() {
        return (int)188L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_NV24 = 189;
     * }
     */
    public static int AV_PIX_FMT_NV24() {
        return (int)189L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_NV42 = 190;
     * }
     */
    public static int AV_PIX_FMT_NV42() {
        return (int)190L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_VULKAN = 191;
     * }
     */
    public static int AV_PIX_FMT_VULKAN() {
        return (int)191L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_Y210BE = 192;
     * }
     */
    public static int AV_PIX_FMT_Y210BE() {
        return (int)192L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_Y210LE = 193;
     * }
     */
    public static int AV_PIX_FMT_Y210LE() {
        return (int)193L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_X2RGB10LE = 194;
     * }
     */
    public static int AV_PIX_FMT_X2RGB10LE() {
        return (int)194L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_X2RGB10BE = 195;
     * }
     */
    public static int AV_PIX_FMT_X2RGB10BE() {
        return (int)195L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_X2BGR10LE = 196;
     * }
     */
    public static int AV_PIX_FMT_X2BGR10LE() {
        return (int)196L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_X2BGR10BE = 197;
     * }
     */
    public static int AV_PIX_FMT_X2BGR10BE() {
        return (int)197L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_P210BE = 198;
     * }
     */
    public static int AV_PIX_FMT_P210BE() {
        return (int)198L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_P210LE = 199;
     * }
     */
    public static int AV_PIX_FMT_P210LE() {
        return (int)199L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_P410BE = 200;
     * }
     */
    public static int AV_PIX_FMT_P410BE() {
        return (int)200L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_P410LE = 201;
     * }
     */
    public static int AV_PIX_FMT_P410LE() {
        return (int)201L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_P216BE = 202;
     * }
     */
    public static int AV_PIX_FMT_P216BE() {
        return (int)202L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_P216LE = 203;
     * }
     */
    public static int AV_PIX_FMT_P216LE() {
        return (int)203L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_P416BE = 204;
     * }
     */
    public static int AV_PIX_FMT_P416BE() {
        return (int)204L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_P416LE = 205;
     * }
     */
    public static int AV_PIX_FMT_P416LE() {
        return (int)205L;
    }
    /**
     * {@snippet :
     * enum AVPixelFormat.AV_PIX_FMT_NB = 206;
     * }
     */
    public static int AV_PIX_FMT_NB() {
        return (int)206L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_RESERVED0 = 0;
     * }
     */
    public static int AVCOL_PRI_RESERVED0() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_BT709 = 1;
     * }
     */
    public static int AVCOL_PRI_BT709() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_UNSPECIFIED = 2;
     * }
     */
    public static int AVCOL_PRI_UNSPECIFIED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_RESERVED = 3;
     * }
     */
    public static int AVCOL_PRI_RESERVED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_BT470M = 4;
     * }
     */
    public static int AVCOL_PRI_BT470M() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_BT470BG = 5;
     * }
     */
    public static int AVCOL_PRI_BT470BG() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_SMPTE170M = 6;
     * }
     */
    public static int AVCOL_PRI_SMPTE170M() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_SMPTE240M = 7;
     * }
     */
    public static int AVCOL_PRI_SMPTE240M() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_FILM = 8;
     * }
     */
    public static int AVCOL_PRI_FILM() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_BT2020 = 9;
     * }
     */
    public static int AVCOL_PRI_BT2020() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_SMPTE428 = 10;
     * }
     */
    public static int AVCOL_PRI_SMPTE428() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_SMPTEST428_1 = 10;
     * }
     */
    public static int AVCOL_PRI_SMPTEST428_1() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_SMPTE431 = 11;
     * }
     */
    public static int AVCOL_PRI_SMPTE431() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_SMPTE432 = 12;
     * }
     */
    public static int AVCOL_PRI_SMPTE432() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_EBU3213 = 22;
     * }
     */
    public static int AVCOL_PRI_EBU3213() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_JEDEC_P22 = 22;
     * }
     */
    public static int AVCOL_PRI_JEDEC_P22() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum AVColorPrimaries.AVCOL_PRI_NB = 23;
     * }
     */
    public static int AVCOL_PRI_NB() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_RESERVED0 = 0;
     * }
     */
    public static int AVCOL_TRC_RESERVED0() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_BT709 = 1;
     * }
     */
    public static int AVCOL_TRC_BT709() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_UNSPECIFIED = 2;
     * }
     */
    public static int AVCOL_TRC_UNSPECIFIED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_RESERVED = 3;
     * }
     */
    public static int AVCOL_TRC_RESERVED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_GAMMA22 = 4;
     * }
     */
    public static int AVCOL_TRC_GAMMA22() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_GAMMA28 = 5;
     * }
     */
    public static int AVCOL_TRC_GAMMA28() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_SMPTE170M = 6;
     * }
     */
    public static int AVCOL_TRC_SMPTE170M() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_SMPTE240M = 7;
     * }
     */
    public static int AVCOL_TRC_SMPTE240M() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_LINEAR = 8;
     * }
     */
    public static int AVCOL_TRC_LINEAR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_LOG = 9;
     * }
     */
    public static int AVCOL_TRC_LOG() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_LOG_SQRT = 10;
     * }
     */
    public static int AVCOL_TRC_LOG_SQRT() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_IEC61966_2_4 = 11;
     * }
     */
    public static int AVCOL_TRC_IEC61966_2_4() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_BT1361_ECG = 12;
     * }
     */
    public static int AVCOL_TRC_BT1361_ECG() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_IEC61966_2_1 = 13;
     * }
     */
    public static int AVCOL_TRC_IEC61966_2_1() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_BT2020_10 = 14;
     * }
     */
    public static int AVCOL_TRC_BT2020_10() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_BT2020_12 = 15;
     * }
     */
    public static int AVCOL_TRC_BT2020_12() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_SMPTE2084 = 16;
     * }
     */
    public static int AVCOL_TRC_SMPTE2084() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_SMPTEST2084 = 16;
     * }
     */
    public static int AVCOL_TRC_SMPTEST2084() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_SMPTE428 = 17;
     * }
     */
    public static int AVCOL_TRC_SMPTE428() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_SMPTEST428_1 = 17;
     * }
     */
    public static int AVCOL_TRC_SMPTEST428_1() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_ARIB_STD_B67 = 18;
     * }
     */
    public static int AVCOL_TRC_ARIB_STD_B67() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum AVColorTransferCharacteristic.AVCOL_TRC_NB = 19;
     * }
     */
    public static int AVCOL_TRC_NB() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_RGB = 0;
     * }
     */
    public static int AVCOL_SPC_RGB() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_BT709 = 1;
     * }
     */
    public static int AVCOL_SPC_BT709() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_UNSPECIFIED = 2;
     * }
     */
    public static int AVCOL_SPC_UNSPECIFIED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_RESERVED = 3;
     * }
     */
    public static int AVCOL_SPC_RESERVED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_FCC = 4;
     * }
     */
    public static int AVCOL_SPC_FCC() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_BT470BG = 5;
     * }
     */
    public static int AVCOL_SPC_BT470BG() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_SMPTE170M = 6;
     * }
     */
    public static int AVCOL_SPC_SMPTE170M() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_SMPTE240M = 7;
     * }
     */
    public static int AVCOL_SPC_SMPTE240M() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_YCGCO = 8;
     * }
     */
    public static int AVCOL_SPC_YCGCO() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_YCOCG = 8;
     * }
     */
    public static int AVCOL_SPC_YCOCG() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_BT2020_NCL = 9;
     * }
     */
    public static int AVCOL_SPC_BT2020_NCL() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_BT2020_CL = 10;
     * }
     */
    public static int AVCOL_SPC_BT2020_CL() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_SMPTE2085 = 11;
     * }
     */
    public static int AVCOL_SPC_SMPTE2085() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_CHROMA_DERIVED_NCL = 12;
     * }
     */
    public static int AVCOL_SPC_CHROMA_DERIVED_NCL() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_CHROMA_DERIVED_CL = 13;
     * }
     */
    public static int AVCOL_SPC_CHROMA_DERIVED_CL() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_ICTCP = 14;
     * }
     */
    public static int AVCOL_SPC_ICTCP() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum AVColorSpace.AVCOL_SPC_NB = 15;
     * }
     */
    public static int AVCOL_SPC_NB() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum AVColorRange.AVCOL_RANGE_UNSPECIFIED = 0;
     * }
     */
    public static int AVCOL_RANGE_UNSPECIFIED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVColorRange.AVCOL_RANGE_MPEG = 1;
     * }
     */
    public static int AVCOL_RANGE_MPEG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVColorRange.AVCOL_RANGE_JPEG = 2;
     * }
     */
    public static int AVCOL_RANGE_JPEG() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVColorRange.AVCOL_RANGE_NB = 3;
     * }
     */
    public static int AVCOL_RANGE_NB() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVChromaLocation.AVCHROMA_LOC_UNSPECIFIED = 0;
     * }
     */
    public static int AVCHROMA_LOC_UNSPECIFIED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVChromaLocation.AVCHROMA_LOC_LEFT = 1;
     * }
     */
    public static int AVCHROMA_LOC_LEFT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVChromaLocation.AVCHROMA_LOC_CENTER = 2;
     * }
     */
    public static int AVCHROMA_LOC_CENTER() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVChromaLocation.AVCHROMA_LOC_TOPLEFT = 3;
     * }
     */
    public static int AVCHROMA_LOC_TOPLEFT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVChromaLocation.AVCHROMA_LOC_TOP = 4;
     * }
     */
    public static int AVCHROMA_LOC_TOP() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVChromaLocation.AVCHROMA_LOC_BOTTOMLEFT = 5;
     * }
     */
    public static int AVCHROMA_LOC_BOTTOMLEFT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVChromaLocation.AVCHROMA_LOC_BOTTOM = 6;
     * }
     */
    public static int AVCHROMA_LOC_BOTTOM() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVChromaLocation.AVCHROMA_LOC_NB = 7;
     * }
     */
    public static int AVCHROMA_LOC_NB() {
        return (int)7L;
    }
    public static MethodHandle av_int_list_length_for_size$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$4,"av_int_list_length_for_size");
    }
    /**
     * {@snippet :
     * unsigned int av_int_list_length_for_size(unsigned int elsize, void* list, unsigned long term);
     * }
     */
    public static int av_int_list_length_for_size(int elsize, MemorySegment list, long term) {
        var mh$ = av_int_list_length_for_size$MH();
        try {
            return (int)mh$.invokeExact(elsize, list, term);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_fopen_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$147.const$5,"av_fopen_utf8");
    }
    /**
     * {@snippet :
     * struct _IO_FILE* av_fopen_utf8(char* path, char* mode);
     * }
     */
    public static MemorySegment av_fopen_utf8(MemorySegment path, MemorySegment mode) {
        var mh$ = av_fopen_utf8$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_time_base_q$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$1,"av_get_time_base_q");
    }
    /**
     * {@snippet :
     * struct AVRational av_get_time_base_q();
     * }
     */
    public static MemorySegment av_get_time_base_q(SegmentAllocator allocator) {
        var mh$ = av_get_time_base_q$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_fourcc_make_string$MH() {
        return RuntimeHelper.requireNonNull(constants$148.const$2,"av_fourcc_make_string");
    }
    /**
     * {@snippet :
     * char* av_fourcc_make_string(char* buf, unsigned int fourcc);
     * }
     */
    public static MemorySegment av_fourcc_make_string(MemorySegment buf, int fourcc) {
        var mh$ = av_fourcc_make_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buf, fourcc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$149.const$1,"av_buffer_alloc");
    }
    /**
     * {@snippet :
     * struct AVBufferRef* av_buffer_alloc(unsigned long size);
     * }
     */
    public static MemorySegment av_buffer_alloc(long size) {
        var mh$ = av_buffer_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_allocz$MH() {
        return RuntimeHelper.requireNonNull(constants$149.const$2,"av_buffer_allocz");
    }
    /**
     * {@snippet :
     * struct AVBufferRef* av_buffer_allocz(unsigned long size);
     * }
     */
    public static MemorySegment av_buffer_allocz(long size) {
        var mh$ = av_buffer_allocz$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_create$MH() {
        return RuntimeHelper.requireNonNull(constants$149.const$6,"av_buffer_create");
    }
    /**
     * {@snippet :
     * struct AVBufferRef* av_buffer_create(unsigned char* data, unsigned long size, void (*free)(void*,unsigned char*), void* opaque, int flags);
     * }
     */
    public static MemorySegment av_buffer_create(MemorySegment data, long size, MemorySegment free, MemorySegment opaque, int flags) {
        var mh$ = av_buffer_create$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data, size, free, opaque, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_default_free$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$0,"av_buffer_default_free");
    }
    /**
     * {@snippet :
     * void av_buffer_default_free(void* opaque, unsigned char* data);
     * }
     */
    public static void av_buffer_default_free(MemorySegment opaque, MemorySegment data) {
        var mh$ = av_buffer_default_free$MH();
        try {
            mh$.invokeExact(opaque, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$1,"av_buffer_ref");
    }
    /**
     * {@snippet :
     * struct AVBufferRef* av_buffer_ref(struct AVBufferRef* buf);
     * }
     */
    public static MemorySegment av_buffer_ref(MemorySegment buf) {
        var mh$ = av_buffer_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$2,"av_buffer_unref");
    }
    /**
     * {@snippet :
     * void av_buffer_unref(struct AVBufferRef** buf);
     * }
     */
    public static void av_buffer_unref(MemorySegment buf) {
        var mh$ = av_buffer_unref$MH();
        try {
            mh$.invokeExact(buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_is_writable$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$3,"av_buffer_is_writable");
    }
    /**
     * {@snippet :
     * int av_buffer_is_writable(struct AVBufferRef* buf);
     * }
     */
    public static int av_buffer_is_writable(MemorySegment buf) {
        var mh$ = av_buffer_is_writable$MH();
        try {
            return (int)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_get_opaque$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$4,"av_buffer_get_opaque");
    }
    /**
     * {@snippet :
     * void* av_buffer_get_opaque(struct AVBufferRef* buf);
     * }
     */
    public static MemorySegment av_buffer_get_opaque(MemorySegment buf) {
        var mh$ = av_buffer_get_opaque$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_get_ref_count$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$5,"av_buffer_get_ref_count");
    }
    /**
     * {@snippet :
     * int av_buffer_get_ref_count(struct AVBufferRef* buf);
     * }
     */
    public static int av_buffer_get_ref_count(MemorySegment buf) {
        var mh$ = av_buffer_get_ref_count$MH();
        try {
            return (int)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_make_writable$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$0,"av_buffer_make_writable");
    }
    /**
     * {@snippet :
     * int av_buffer_make_writable(struct AVBufferRef** buf);
     * }
     */
    public static int av_buffer_make_writable(MemorySegment buf) {
        var mh$ = av_buffer_make_writable$MH();
        try {
            return (int)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$1,"av_buffer_realloc");
    }
    /**
     * {@snippet :
     * int av_buffer_realloc(struct AVBufferRef** buf, unsigned long size);
     * }
     */
    public static int av_buffer_realloc(MemorySegment buf, long size) {
        var mh$ = av_buffer_realloc$MH();
        try {
            return (int)mh$.invokeExact(buf, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_replace$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$2,"av_buffer_replace");
    }
    /**
     * {@snippet :
     * int av_buffer_replace(struct AVBufferRef** dst, struct AVBufferRef* src);
     * }
     */
    public static int av_buffer_replace(MemorySegment dst, MemorySegment src) {
        var mh$ = av_buffer_replace$MH();
        try {
            return (int)mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_pool_init$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$6,"av_buffer_pool_init");
    }
    /**
     * {@snippet :
     * struct AVBufferPool* av_buffer_pool_init(unsigned long size, struct AVBufferRef* (*alloc)(unsigned long));
     * }
     */
    public static MemorySegment av_buffer_pool_init(long size, MemorySegment alloc) {
        var mh$ = av_buffer_pool_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size, alloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_pool_init2$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$5,"av_buffer_pool_init2");
    }
    /**
     * {@snippet :
     * struct AVBufferPool* av_buffer_pool_init2(unsigned long size, void* opaque, struct AVBufferRef* (*alloc)(void*,unsigned long), void (*pool_free)(void*));
     * }
     */
    public static MemorySegment av_buffer_pool_init2(long size, MemorySegment opaque, MemorySegment alloc, MemorySegment pool_free) {
        var mh$ = av_buffer_pool_init2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size, opaque, alloc, pool_free);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_pool_uninit$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$0,"av_buffer_pool_uninit");
    }
    /**
     * {@snippet :
     * void av_buffer_pool_uninit(struct AVBufferPool** pool);
     * }
     */
    public static void av_buffer_pool_uninit(MemorySegment pool) {
        var mh$ = av_buffer_pool_uninit$MH();
        try {
            mh$.invokeExact(pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_pool_get$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$1,"av_buffer_pool_get");
    }
    /**
     * {@snippet :
     * struct AVBufferRef* av_buffer_pool_get(struct AVBufferPool* pool);
     * }
     */
    public static MemorySegment av_buffer_pool_get(MemorySegment pool) {
        var mh$ = av_buffer_pool_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_buffer_pool_buffer_get_opaque$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$2,"av_buffer_pool_buffer_get_opaque");
    }
    /**
     * {@snippet :
     * void* av_buffer_pool_buffer_get_opaque(struct AVBufferRef* ref);
     * }
     */
    public static MemorySegment av_buffer_pool_buffer_get_opaque(MemorySegment ref) {
        var mh$ = av_buffer_pool_buffer_get_opaque$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_dict_get$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$1,"av_dict_get");
    }
    /**
     * {@snippet :
     * struct AVDictionaryEntry* av_dict_get(struct AVDictionary* m, char* key, struct AVDictionaryEntry* prev, int flags);
     * }
     */
    public static MemorySegment av_dict_get(MemorySegment m, MemorySegment key, MemorySegment prev, int flags) {
        var mh$ = av_dict_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(m, key, prev, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_dict_count$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$2,"av_dict_count");
    }
    /**
     * {@snippet :
     * int av_dict_count(struct AVDictionary* m);
     * }
     */
    public static int av_dict_count(MemorySegment m) {
        var mh$ = av_dict_count$MH();
        try {
            return (int)mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_dict_set$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$3,"av_dict_set");
    }
    /**
     * {@snippet :
     * int av_dict_set(struct AVDictionary** pm, char* key, char* value, int flags);
     * }
     */
    public static int av_dict_set(MemorySegment pm, MemorySegment key, MemorySegment value, int flags) {
        var mh$ = av_dict_set$MH();
        try {
            return (int)mh$.invokeExact(pm, key, value, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_dict_set_int$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$5,"av_dict_set_int");
    }
    /**
     * {@snippet :
     * int av_dict_set_int(struct AVDictionary** pm, char* key, long value, int flags);
     * }
     */
    public static int av_dict_set_int(MemorySegment pm, MemorySegment key, long value, int flags) {
        var mh$ = av_dict_set_int$MH();
        try {
            return (int)mh$.invokeExact(pm, key, value, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_dict_parse_string$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$1,"av_dict_parse_string");
    }
    /**
     * {@snippet :
     * int av_dict_parse_string(struct AVDictionary** pm, char* str, char* key_val_sep, char* pairs_sep, int flags);
     * }
     */
    public static int av_dict_parse_string(MemorySegment pm, MemorySegment str, MemorySegment key_val_sep, MemorySegment pairs_sep, int flags) {
        var mh$ = av_dict_parse_string$MH();
        try {
            return (int)mh$.invokeExact(pm, str, key_val_sep, pairs_sep, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_dict_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$2,"av_dict_copy");
    }
    /**
     * {@snippet :
     * int av_dict_copy(struct AVDictionary** dst, struct AVDictionary* src, int flags);
     * }
     */
    public static int av_dict_copy(MemorySegment dst, MemorySegment src, int flags) {
        var mh$ = av_dict_copy$MH();
        try {
            return (int)mh$.invokeExact(dst, src, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_dict_free$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$3,"av_dict_free");
    }
    /**
     * {@snippet :
     * void av_dict_free(struct AVDictionary** m);
     * }
     */
    public static void av_dict_free(MemorySegment m) {
        var mh$ = av_dict_free$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_dict_get_string$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$5,"av_dict_get_string");
    }
    /**
     * {@snippet :
     * int av_dict_get_string(struct AVDictionary* m, char** buffer, char key_val_sep, char pairs_sep);
     * }
     */
    public static int av_dict_get_string(MemorySegment m, MemorySegment buffer, byte key_val_sep, byte pairs_sep) {
        var mh$ = av_dict_get_string$MH();
        try {
            return (int)mh$.invokeExact(m, buffer, key_val_sep, pairs_sep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_NONE = -1;
     * }
     */
    public static int AV_CHAN_NONE() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_FRONT_LEFT = 0;
     * }
     */
    public static int AV_CHAN_FRONT_LEFT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_FRONT_RIGHT = 1;
     * }
     */
    public static int AV_CHAN_FRONT_RIGHT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_FRONT_CENTER = 2;
     * }
     */
    public static int AV_CHAN_FRONT_CENTER() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_LOW_FREQUENCY = 3;
     * }
     */
    public static int AV_CHAN_LOW_FREQUENCY() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_BACK_LEFT = 4;
     * }
     */
    public static int AV_CHAN_BACK_LEFT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_BACK_RIGHT = 5;
     * }
     */
    public static int AV_CHAN_BACK_RIGHT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_FRONT_LEFT_OF_CENTER = 6;
     * }
     */
    public static int AV_CHAN_FRONT_LEFT_OF_CENTER() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_FRONT_RIGHT_OF_CENTER = 7;
     * }
     */
    public static int AV_CHAN_FRONT_RIGHT_OF_CENTER() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_BACK_CENTER = 8;
     * }
     */
    public static int AV_CHAN_BACK_CENTER() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_SIDE_LEFT = 9;
     * }
     */
    public static int AV_CHAN_SIDE_LEFT() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_SIDE_RIGHT = 10;
     * }
     */
    public static int AV_CHAN_SIDE_RIGHT() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_TOP_CENTER = 11;
     * }
     */
    public static int AV_CHAN_TOP_CENTER() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_TOP_FRONT_LEFT = 12;
     * }
     */
    public static int AV_CHAN_TOP_FRONT_LEFT() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_TOP_FRONT_CENTER = 13;
     * }
     */
    public static int AV_CHAN_TOP_FRONT_CENTER() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_TOP_FRONT_RIGHT = 14;
     * }
     */
    public static int AV_CHAN_TOP_FRONT_RIGHT() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_TOP_BACK_LEFT = 15;
     * }
     */
    public static int AV_CHAN_TOP_BACK_LEFT() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_TOP_BACK_CENTER = 16;
     * }
     */
    public static int AV_CHAN_TOP_BACK_CENTER() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_TOP_BACK_RIGHT = 17;
     * }
     */
    public static int AV_CHAN_TOP_BACK_RIGHT() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_STEREO_LEFT = 29;
     * }
     */
    public static int AV_CHAN_STEREO_LEFT() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_STEREO_RIGHT = 30;
     * }
     */
    public static int AV_CHAN_STEREO_RIGHT() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_WIDE_LEFT = 31;
     * }
     */
    public static int AV_CHAN_WIDE_LEFT() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_WIDE_RIGHT = 32;
     * }
     */
    public static int AV_CHAN_WIDE_RIGHT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_SURROUND_DIRECT_LEFT = 33;
     * }
     */
    public static int AV_CHAN_SURROUND_DIRECT_LEFT() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_SURROUND_DIRECT_RIGHT = 34;
     * }
     */
    public static int AV_CHAN_SURROUND_DIRECT_RIGHT() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_LOW_FREQUENCY_2 = 35;
     * }
     */
    public static int AV_CHAN_LOW_FREQUENCY_2() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_TOP_SIDE_LEFT = 36;
     * }
     */
    public static int AV_CHAN_TOP_SIDE_LEFT() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_TOP_SIDE_RIGHT = 37;
     * }
     */
    public static int AV_CHAN_TOP_SIDE_RIGHT() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_BOTTOM_FRONT_CENTER = 38;
     * }
     */
    public static int AV_CHAN_BOTTOM_FRONT_CENTER() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_BOTTOM_FRONT_LEFT = 39;
     * }
     */
    public static int AV_CHAN_BOTTOM_FRONT_LEFT() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_BOTTOM_FRONT_RIGHT = 40;
     * }
     */
    public static int AV_CHAN_BOTTOM_FRONT_RIGHT() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_UNUSED = 512;
     * }
     */
    public static int AV_CHAN_UNUSED() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_UNKNOWN = 768;
     * }
     */
    public static int AV_CHAN_UNKNOWN() {
        return (int)768L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_AMBISONIC_BASE = 1024;
     * }
     */
    public static int AV_CHAN_AMBISONIC_BASE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum AVChannel.AV_CHAN_AMBISONIC_END = 2047;
     * }
     */
    public static int AV_CHAN_AMBISONIC_END() {
        return (int)2047L;
    }
    /**
     * {@snippet :
     * enum AVChannelOrder.AV_CHANNEL_ORDER_UNSPEC = 0;
     * }
     */
    public static int AV_CHANNEL_ORDER_UNSPEC() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVChannelOrder.AV_CHANNEL_ORDER_NATIVE = 1;
     * }
     */
    public static int AV_CHANNEL_ORDER_NATIVE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVChannelOrder.AV_CHANNEL_ORDER_CUSTOM = 2;
     * }
     */
    public static int AV_CHANNEL_ORDER_CUSTOM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVChannelOrder.AV_CHANNEL_ORDER_AMBISONIC = 3;
     * }
     */
    public static int AV_CHANNEL_ORDER_AMBISONIC() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVMatrixEncoding.AV_MATRIX_ENCODING_NONE = 0;
     * }
     */
    public static int AV_MATRIX_ENCODING_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVMatrixEncoding.AV_MATRIX_ENCODING_DOLBY = 1;
     * }
     */
    public static int AV_MATRIX_ENCODING_DOLBY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVMatrixEncoding.AV_MATRIX_ENCODING_DPLII = 2;
     * }
     */
    public static int AV_MATRIX_ENCODING_DPLII() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVMatrixEncoding.AV_MATRIX_ENCODING_DPLIIX = 3;
     * }
     */
    public static int AV_MATRIX_ENCODING_DPLIIX() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVMatrixEncoding.AV_MATRIX_ENCODING_DPLIIZ = 4;
     * }
     */
    public static int AV_MATRIX_ENCODING_DPLIIZ() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVMatrixEncoding.AV_MATRIX_ENCODING_DOLBYEX = 5;
     * }
     */
    public static int AV_MATRIX_ENCODING_DOLBYEX() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVMatrixEncoding.AV_MATRIX_ENCODING_DOLBYHEADPHONE = 6;
     * }
     */
    public static int AV_MATRIX_ENCODING_DOLBYHEADPHONE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVMatrixEncoding.AV_MATRIX_ENCODING_NB = 7;
     * }
     */
    public static int AV_MATRIX_ENCODING_NB() {
        return (int)7L;
    }
    public static MethodHandle av_get_channel_layout$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$4,"av_get_channel_layout");
    }
    /**
     * {@snippet :
     * unsigned long av_get_channel_layout(char* name);
     * }
     */
    public static long av_get_channel_layout(MemorySegment name) {
        var mh$ = av_get_channel_layout$MH();
        try {
            return (long)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_extended_channel_layout$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$5,"av_get_extended_channel_layout");
    }
    /**
     * {@snippet :
     * int av_get_extended_channel_layout(char* name, unsigned long* channel_layout, int* nb_channels);
     * }
     */
    public static int av_get_extended_channel_layout(MemorySegment name, MemorySegment channel_layout, MemorySegment nb_channels) {
        var mh$ = av_get_extended_channel_layout$MH();
        try {
            return (int)mh$.invokeExact(name, channel_layout, nb_channels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_channel_layout_string$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$1,"av_get_channel_layout_string");
    }
    /**
     * {@snippet :
     * void av_get_channel_layout_string(char* buf, int buf_size, int nb_channels, unsigned long channel_layout);
     * }
     */
    public static void av_get_channel_layout_string(MemorySegment buf, int buf_size, int nb_channels, long channel_layout) {
        var mh$ = av_get_channel_layout_string$MH();
        try {
            mh$.invokeExact(buf, buf_size, nb_channels, channel_layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_bprint_channel_layout$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$3,"av_bprint_channel_layout");
    }
    /**
     * {@snippet :
     * void av_bprint_channel_layout(struct AVBPrint* bp, int nb_channels, unsigned long channel_layout);
     * }
     */
    public static void av_bprint_channel_layout(MemorySegment bp, int nb_channels, long channel_layout) {
        var mh$ = av_bprint_channel_layout$MH();
        try {
            mh$.invokeExact(bp, nb_channels, channel_layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_channel_layout_nb_channels$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$4,"av_get_channel_layout_nb_channels");
    }
    /**
     * {@snippet :
     * int av_get_channel_layout_nb_channels(unsigned long channel_layout);
     * }
     */
    public static int av_get_channel_layout_nb_channels(long channel_layout) {
        var mh$ = av_get_channel_layout_nb_channels$MH();
        try {
            return (int)mh$.invokeExact(channel_layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_default_channel_layout$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$6,"av_get_default_channel_layout");
    }
    /**
     * {@snippet :
     * long av_get_default_channel_layout(int nb_channels);
     * }
     */
    public static long av_get_default_channel_layout(int nb_channels) {
        var mh$ = av_get_default_channel_layout$MH();
        try {
            return (long)mh$.invokeExact(nb_channels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_channel_layout_channel_index$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$1,"av_get_channel_layout_channel_index");
    }
    /**
     * {@snippet :
     * int av_get_channel_layout_channel_index(unsigned long channel_layout, unsigned long channel);
     * }
     */
    public static int av_get_channel_layout_channel_index(long channel_layout, long channel) {
        var mh$ = av_get_channel_layout_channel_index$MH();
        try {
            return (int)mh$.invokeExact(channel_layout, channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_extract_channel$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$3,"av_channel_layout_extract_channel");
    }
    /**
     * {@snippet :
     * unsigned long av_channel_layout_extract_channel(unsigned long channel_layout, int index);
     * }
     */
    public static long av_channel_layout_extract_channel(long channel_layout, int index) {
        var mh$ = av_channel_layout_extract_channel$MH();
        try {
            return (long)mh$.invokeExact(channel_layout, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_channel_name$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$4,"av_get_channel_name");
    }
    /**
     * {@snippet :
     * char* av_get_channel_name(unsigned long channel);
     * }
     */
    public static MemorySegment av_get_channel_name(long channel) {
        var mh$ = av_get_channel_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_channel_description$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$5,"av_get_channel_description");
    }
    /**
     * {@snippet :
     * char* av_get_channel_description(unsigned long channel);
     * }
     */
    public static MemorySegment av_get_channel_description(long channel) {
        var mh$ = av_get_channel_description$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_get_standard_channel_layout$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$0,"av_get_standard_channel_layout");
    }
    /**
     * {@snippet :
     * int av_get_standard_channel_layout(unsigned int index, unsigned long* layout, char** name);
     * }
     */
    public static int av_get_standard_channel_layout(int index, MemorySegment layout, MemorySegment name) {
        var mh$ = av_get_standard_channel_layout$MH();
        try {
            return (int)mh$.invokeExact(index, layout, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_name$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$1,"av_channel_name");
    }
    /**
     * {@snippet :
     * int av_channel_name(char* buf, unsigned long buf_size, enum AVChannel channel);
     * }
     */
    public static int av_channel_name(MemorySegment buf, long buf_size, int channel) {
        var mh$ = av_channel_name$MH();
        try {
            return (int)mh$.invokeExact(buf, buf_size, channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_name_bprint$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$3,"av_channel_name_bprint");
    }
    /**
     * {@snippet :
     * void av_channel_name_bprint(struct AVBPrint* bp, enum AVChannel channel_id);
     * }
     */
    public static void av_channel_name_bprint(MemorySegment bp, int channel_id) {
        var mh$ = av_channel_name_bprint$MH();
        try {
            mh$.invokeExact(bp, channel_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_description$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$4,"av_channel_description");
    }
    /**
     * {@snippet :
     * int av_channel_description(char* buf, unsigned long buf_size, enum AVChannel channel);
     * }
     */
    public static int av_channel_description(MemorySegment buf, long buf_size, int channel) {
        var mh$ = av_channel_description$MH();
        try {
            return (int)mh$.invokeExact(buf, buf_size, channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_description_bprint$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$5,"av_channel_description_bprint");
    }
    /**
     * {@snippet :
     * void av_channel_description_bprint(struct AVBPrint* bp, enum AVChannel channel_id);
     * }
     */
    public static void av_channel_description_bprint(MemorySegment bp, int channel_id) {
        var mh$ = av_channel_description_bprint$MH();
        try {
            mh$.invokeExact(bp, channel_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$0,"av_channel_from_string");
    }
    /**
     * {@snippet :
     * enum AVChannel av_channel_from_string(char* name);
     * }
     */
    public static int av_channel_from_string(MemorySegment name) {
        var mh$ = av_channel_from_string$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_from_mask$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$1,"av_channel_layout_from_mask");
    }
    /**
     * {@snippet :
     * int av_channel_layout_from_mask(struct AVChannelLayout* channel_layout, unsigned long mask);
     * }
     */
    public static int av_channel_layout_from_mask(MemorySegment channel_layout, long mask) {
        var mh$ = av_channel_layout_from_mask$MH();
        try {
            return (int)mh$.invokeExact(channel_layout, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$2,"av_channel_layout_from_string");
    }
    /**
     * {@snippet :
     * int av_channel_layout_from_string(struct AVChannelLayout* channel_layout, char* str);
     * }
     */
    public static int av_channel_layout_from_string(MemorySegment channel_layout, MemorySegment str) {
        var mh$ = av_channel_layout_from_string$MH();
        try {
            return (int)mh$.invokeExact(channel_layout, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_default$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$3,"av_channel_layout_default");
    }
    /**
     * {@snippet :
     * void av_channel_layout_default(struct AVChannelLayout* ch_layout, int nb_channels);
     * }
     */
    public static void av_channel_layout_default(MemorySegment ch_layout, int nb_channels) {
        var mh$ = av_channel_layout_default$MH();
        try {
            mh$.invokeExact(ch_layout, nb_channels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_standard$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$4,"av_channel_layout_standard");
    }
    /**
     * {@snippet :
     * struct AVChannelLayout* av_channel_layout_standard(void** opaque);
     * }
     */
    public static MemorySegment av_channel_layout_standard(MemorySegment opaque) {
        var mh$ = av_channel_layout_standard$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(opaque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_uninit$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$5,"av_channel_layout_uninit");
    }
    /**
     * {@snippet :
     * void av_channel_layout_uninit(struct AVChannelLayout* channel_layout);
     * }
     */
    public static void av_channel_layout_uninit(MemorySegment channel_layout) {
        var mh$ = av_channel_layout_uninit$MH();
        try {
            mh$.invokeExact(channel_layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$0,"av_channel_layout_copy");
    }
    /**
     * {@snippet :
     * int av_channel_layout_copy(struct AVChannelLayout* dst, struct AVChannelLayout* src);
     * }
     */
    public static int av_channel_layout_copy(MemorySegment dst, MemorySegment src) {
        var mh$ = av_channel_layout_copy$MH();
        try {
            return (int)mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_describe$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$1,"av_channel_layout_describe");
    }
    /**
     * {@snippet :
     * int av_channel_layout_describe(struct AVChannelLayout* channel_layout, char* buf, unsigned long buf_size);
     * }
     */
    public static int av_channel_layout_describe(MemorySegment channel_layout, MemorySegment buf, long buf_size) {
        var mh$ = av_channel_layout_describe$MH();
        try {
            return (int)mh$.invokeExact(channel_layout, buf, buf_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_describe_bprint$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$2,"av_channel_layout_describe_bprint");
    }
    /**
     * {@snippet :
     * int av_channel_layout_describe_bprint(struct AVChannelLayout* channel_layout, struct AVBPrint* bp);
     * }
     */
    public static int av_channel_layout_describe_bprint(MemorySegment channel_layout, MemorySegment bp) {
        var mh$ = av_channel_layout_describe_bprint$MH();
        try {
            return (int)mh$.invokeExact(channel_layout, bp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_channel_from_index$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$3,"av_channel_layout_channel_from_index");
    }
    /**
     * {@snippet :
     * enum AVChannel av_channel_layout_channel_from_index(struct AVChannelLayout* channel_layout, unsigned int idx);
     * }
     */
    public static int av_channel_layout_channel_from_index(MemorySegment channel_layout, int idx) {
        var mh$ = av_channel_layout_channel_from_index$MH();
        try {
            return (int)mh$.invokeExact(channel_layout, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_index_from_channel$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$4,"av_channel_layout_index_from_channel");
    }
    /**
     * {@snippet :
     * int av_channel_layout_index_from_channel(struct AVChannelLayout* channel_layout, enum AVChannel channel);
     * }
     */
    public static int av_channel_layout_index_from_channel(MemorySegment channel_layout, int channel) {
        var mh$ = av_channel_layout_index_from_channel$MH();
        try {
            return (int)mh$.invokeExact(channel_layout, channel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_index_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$5,"av_channel_layout_index_from_string");
    }
    /**
     * {@snippet :
     * int av_channel_layout_index_from_string(struct AVChannelLayout* channel_layout, char* name);
     * }
     */
    public static int av_channel_layout_index_from_string(MemorySegment channel_layout, MemorySegment name) {
        var mh$ = av_channel_layout_index_from_string$MH();
        try {
            return (int)mh$.invokeExact(channel_layout, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_channel_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$0,"av_channel_layout_channel_from_string");
    }
    /**
     * {@snippet :
     * enum AVChannel av_channel_layout_channel_from_string(struct AVChannelLayout* channel_layout, char* name);
     * }
     */
    public static int av_channel_layout_channel_from_string(MemorySegment channel_layout, MemorySegment name) {
        var mh$ = av_channel_layout_channel_from_string$MH();
        try {
            return (int)mh$.invokeExact(channel_layout, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_subset$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$1,"av_channel_layout_subset");
    }
    /**
     * {@snippet :
     * unsigned long av_channel_layout_subset(struct AVChannelLayout* channel_layout, unsigned long mask);
     * }
     */
    public static long av_channel_layout_subset(MemorySegment channel_layout, long mask) {
        var mh$ = av_channel_layout_subset$MH();
        try {
            return (long)mh$.invokeExact(channel_layout, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_check$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$2,"av_channel_layout_check");
    }
    /**
     * {@snippet :
     * int av_channel_layout_check(struct AVChannelLayout* channel_layout);
     * }
     */
    public static int av_channel_layout_check(MemorySegment channel_layout) {
        var mh$ = av_channel_layout_check$MH();
        try {
            return (int)mh$.invokeExact(channel_layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_channel_layout_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$3,"av_channel_layout_compare");
    }
    /**
     * {@snippet :
     * int av_channel_layout_compare(struct AVChannelLayout* chl, struct AVChannelLayout* chl1);
     * }
     */
    public static int av_channel_layout_compare(MemorySegment chl, MemorySegment chl1) {
        var mh$ = av_channel_layout_compare$MH();
        try {
            return (int)mh$.invokeExact(chl, chl1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_PANSCAN = 0;
     * }
     */
    public static int AV_FRAME_DATA_PANSCAN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_A53_CC = 1;
     * }
     */
    public static int AV_FRAME_DATA_A53_CC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_STEREO3D = 2;
     * }
     */
    public static int AV_FRAME_DATA_STEREO3D() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_MATRIXENCODING = 3;
     * }
     */
    public static int AV_FRAME_DATA_MATRIXENCODING() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_DOWNMIX_INFO = 4;
     * }
     */
    public static int AV_FRAME_DATA_DOWNMIX_INFO() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_REPLAYGAIN = 5;
     * }
     */
    public static int AV_FRAME_DATA_REPLAYGAIN() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_DISPLAYMATRIX = 6;
     * }
     */
    public static int AV_FRAME_DATA_DISPLAYMATRIX() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_AFD = 7;
     * }
     */
    public static int AV_FRAME_DATA_AFD() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_MOTION_VECTORS = 8;
     * }
     */
    public static int AV_FRAME_DATA_MOTION_VECTORS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_SKIP_SAMPLES = 9;
     * }
     */
    public static int AV_FRAME_DATA_SKIP_SAMPLES() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_AUDIO_SERVICE_TYPE = 10;
     * }
     */
    public static int AV_FRAME_DATA_AUDIO_SERVICE_TYPE() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_MASTERING_DISPLAY_METADATA = 11;
     * }
     */
    public static int AV_FRAME_DATA_MASTERING_DISPLAY_METADATA() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_GOP_TIMECODE = 12;
     * }
     */
    public static int AV_FRAME_DATA_GOP_TIMECODE() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_SPHERICAL = 13;
     * }
     */
    public static int AV_FRAME_DATA_SPHERICAL() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_CONTENT_LIGHT_LEVEL = 14;
     * }
     */
    public static int AV_FRAME_DATA_CONTENT_LIGHT_LEVEL() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_ICC_PROFILE = 15;
     * }
     */
    public static int AV_FRAME_DATA_ICC_PROFILE() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_S12M_TIMECODE = 16;
     * }
     */
    public static int AV_FRAME_DATA_S12M_TIMECODE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_DYNAMIC_HDR_PLUS = 17;
     * }
     */
    public static int AV_FRAME_DATA_DYNAMIC_HDR_PLUS() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_REGIONS_OF_INTEREST = 18;
     * }
     */
    public static int AV_FRAME_DATA_REGIONS_OF_INTEREST() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_VIDEO_ENC_PARAMS = 19;
     * }
     */
    public static int AV_FRAME_DATA_VIDEO_ENC_PARAMS() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_SEI_UNREGISTERED = 20;
     * }
     */
    public static int AV_FRAME_DATA_SEI_UNREGISTERED() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_FILM_GRAIN_PARAMS = 21;
     * }
     */
    public static int AV_FRAME_DATA_FILM_GRAIN_PARAMS() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_DETECTION_BBOXES = 22;
     * }
     */
    public static int AV_FRAME_DATA_DETECTION_BBOXES() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_DOVI_RPU_BUFFER = 23;
     * }
     */
    public static int AV_FRAME_DATA_DOVI_RPU_BUFFER() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_DOVI_METADATA = 24;
     * }
     */
    public static int AV_FRAME_DATA_DOVI_METADATA() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum AVFrameSideDataType.AV_FRAME_DATA_DYNAMIC_HDR_VIVID = 25;
     * }
     */
    public static int AV_FRAME_DATA_DYNAMIC_HDR_VIVID() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum AVActiveFormatDescription.AV_AFD_SAME = 8;
     * }
     */
    public static int AV_AFD_SAME() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVActiveFormatDescription.AV_AFD_4_3 = 9;
     * }
     */
    public static int AV_AFD_4_3() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum AVActiveFormatDescription.AV_AFD_16_9 = 10;
     * }
     */
    public static int AV_AFD_16_9() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum AVActiveFormatDescription.AV_AFD_14_9 = 11;
     * }
     */
    public static int AV_AFD_14_9() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum AVActiveFormatDescription.AV_AFD_4_3_SP_14_9 = 13;
     * }
     */
    public static int AV_AFD_4_3_SP_14_9() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum AVActiveFormatDescription.AV_AFD_16_9_SP_14_9 = 14;
     * }
     */
    public static int AV_AFD_16_9_SP_14_9() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum AVActiveFormatDescription.AV_AFD_SP_4_3 = 15;
     * }
     */
    public static int AV_AFD_SP_4_3() {
        return (int)15L;
    }
    public static MethodHandle av_get_colorspace_name$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$1,"av_get_colorspace_name");
    }
    /**
     * {@snippet :
     * char* av_get_colorspace_name(enum AVColorSpace val);
     * }
     */
    public static MemorySegment av_get_colorspace_name(int val) {
        var mh$ = av_get_colorspace_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$2,"av_frame_alloc");
    }
    /**
     * {@snippet :
     * struct AVFrame* av_frame_alloc();
     * }
     */
    public static MemorySegment av_frame_alloc() {
        var mh$ = av_frame_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_free$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$3,"av_frame_free");
    }
    /**
     * {@snippet :
     * void av_frame_free(struct AVFrame** frame);
     * }
     */
    public static void av_frame_free(MemorySegment frame) {
        var mh$ = av_frame_free$MH();
        try {
            mh$.invokeExact(frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$4,"av_frame_ref");
    }
    /**
     * {@snippet :
     * int av_frame_ref(struct AVFrame* dst, struct AVFrame* src);
     * }
     */
    public static int av_frame_ref(MemorySegment dst, MemorySegment src) {
        var mh$ = av_frame_ref$MH();
        try {
            return (int)mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_clone$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$5,"av_frame_clone");
    }
    /**
     * {@snippet :
     * struct AVFrame* av_frame_clone(struct AVFrame* src);
     * }
     */
    public static MemorySegment av_frame_clone(MemorySegment src) {
        var mh$ = av_frame_clone$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$0,"av_frame_unref");
    }
    /**
     * {@snippet :
     * void av_frame_unref(struct AVFrame* frame);
     * }
     */
    public static void av_frame_unref(MemorySegment frame) {
        var mh$ = av_frame_unref$MH();
        try {
            mh$.invokeExact(frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_move_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$1,"av_frame_move_ref");
    }
    /**
     * {@snippet :
     * void av_frame_move_ref(struct AVFrame* dst, struct AVFrame* src);
     * }
     */
    public static void av_frame_move_ref(MemorySegment dst, MemorySegment src) {
        var mh$ = av_frame_move_ref$MH();
        try {
            mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_get_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$2,"av_frame_get_buffer");
    }
    /**
     * {@snippet :
     * int av_frame_get_buffer(struct AVFrame* frame, int align);
     * }
     */
    public static int av_frame_get_buffer(MemorySegment frame, int align) {
        var mh$ = av_frame_get_buffer$MH();
        try {
            return (int)mh$.invokeExact(frame, align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_is_writable$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$3,"av_frame_is_writable");
    }
    /**
     * {@snippet :
     * int av_frame_is_writable(struct AVFrame* frame);
     * }
     */
    public static int av_frame_is_writable(MemorySegment frame) {
        var mh$ = av_frame_is_writable$MH();
        try {
            return (int)mh$.invokeExact(frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_make_writable$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$4,"av_frame_make_writable");
    }
    /**
     * {@snippet :
     * int av_frame_make_writable(struct AVFrame* frame);
     * }
     */
    public static int av_frame_make_writable(MemorySegment frame) {
        var mh$ = av_frame_make_writable$MH();
        try {
            return (int)mh$.invokeExact(frame);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$5,"av_frame_copy");
    }
    /**
     * {@snippet :
     * int av_frame_copy(struct AVFrame* dst, struct AVFrame* src);
     * }
     */
    public static int av_frame_copy(MemorySegment dst, MemorySegment src) {
        var mh$ = av_frame_copy$MH();
        try {
            return (int)mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_copy_props$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$0,"av_frame_copy_props");
    }
    /**
     * {@snippet :
     * int av_frame_copy_props(struct AVFrame* dst, struct AVFrame* src);
     * }
     */
    public static int av_frame_copy_props(MemorySegment dst, MemorySegment src) {
        var mh$ = av_frame_copy_props$MH();
        try {
            return (int)mh$.invokeExact(dst, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_get_plane_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$1,"av_frame_get_plane_buffer");
    }
    /**
     * {@snippet :
     * struct AVBufferRef* av_frame_get_plane_buffer(struct AVFrame* frame, int plane);
     * }
     */
    public static MemorySegment av_frame_get_plane_buffer(MemorySegment frame, int plane) {
        var mh$ = av_frame_get_plane_buffer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(frame, plane);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_new_side_data$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$2,"av_frame_new_side_data");
    }
    /**
     * {@snippet :
     * struct AVFrameSideData* av_frame_new_side_data(struct AVFrame* frame, enum AVFrameSideDataType type, unsigned long size);
     * }
     */
    public static MemorySegment av_frame_new_side_data(MemorySegment frame, int type, long size) {
        var mh$ = av_frame_new_side_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(frame, type, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_new_side_data_from_buf$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$3,"av_frame_new_side_data_from_buf");
    }
    /**
     * {@snippet :
     * struct AVFrameSideData* av_frame_new_side_data_from_buf(struct AVFrame* frame, enum AVFrameSideDataType type, struct AVBufferRef* buf);
     * }
     */
    public static MemorySegment av_frame_new_side_data_from_buf(MemorySegment frame, int type, MemorySegment buf) {
        var mh$ = av_frame_new_side_data_from_buf$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(frame, type, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_get_side_data$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$4,"av_frame_get_side_data");
    }
    /**
     * {@snippet :
     * struct AVFrameSideData* av_frame_get_side_data(struct AVFrame* frame, enum AVFrameSideDataType type);
     * }
     */
    public static MemorySegment av_frame_get_side_data(MemorySegment frame, int type) {
        var mh$ = av_frame_get_side_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(frame, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_remove_side_data$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$5,"av_frame_remove_side_data");
    }
    /**
     * {@snippet :
     * void av_frame_remove_side_data(struct AVFrame* frame, enum AVFrameSideDataType type);
     * }
     */
    public static void av_frame_remove_side_data(MemorySegment frame, int type) {
        var mh$ = av_frame_remove_side_data$MH();
        try {
            mh$.invokeExact(frame, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/libavutil/frame.h:908:1).AV_FRAME_CROP_UNALIGNED = 1;
     * }
     */
    public static int AV_FRAME_CROP_UNALIGNED() {
        return (int)1L;
    }
    public static MethodHandle av_frame_apply_cropping$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$0,"av_frame_apply_cropping");
    }
    /**
     * {@snippet :
     * int av_frame_apply_cropping(struct AVFrame* frame, int flags);
     * }
     */
    public static int av_frame_apply_cropping(MemorySegment frame, int flags) {
        var mh$ = av_frame_apply_cropping$MH();
        try {
            return (int)mh$.invokeExact(frame, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_frame_side_data_name$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$1,"av_frame_side_data_name");
    }
    /**
     * {@snippet :
     * char* av_frame_side_data_name(enum AVFrameSideDataType type);
     * }
     */
    public static MemorySegment av_frame_side_data_name(int type) {
        var mh$ = av_frame_side_data_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVHWDeviceType.AV_HWDEVICE_TYPE_NONE = 0;
     * }
     */
    public static int AV_HWDEVICE_TYPE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVHWDeviceType.AV_HWDEVICE_TYPE_VDPAU = 1;
     * }
     */
    public static int AV_HWDEVICE_TYPE_VDPAU() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum AVHWDeviceType.AV_HWDEVICE_TYPE_CUDA = 2;
     * }
     */
    public static int AV_HWDEVICE_TYPE_CUDA() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum AVHWDeviceType.AV_HWDEVICE_TYPE_VAAPI = 3;
     * }
     */
    public static int AV_HWDEVICE_TYPE_VAAPI() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum AVHWDeviceType.AV_HWDEVICE_TYPE_DXVA2 = 4;
     * }
     */
    public static int AV_HWDEVICE_TYPE_DXVA2() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum AVHWDeviceType.AV_HWDEVICE_TYPE_QSV = 5;
     * }
     */
    public static int AV_HWDEVICE_TYPE_QSV() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum AVHWDeviceType.AV_HWDEVICE_TYPE_VIDEOTOOLBOX = 6;
     * }
     */
    public static int AV_HWDEVICE_TYPE_VIDEOTOOLBOX() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum AVHWDeviceType.AV_HWDEVICE_TYPE_D3D11VA = 7;
     * }
     */
    public static int AV_HWDEVICE_TYPE_D3D11VA() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum AVHWDeviceType.AV_HWDEVICE_TYPE_DRM = 8;
     * }
     */
    public static int AV_HWDEVICE_TYPE_DRM() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum AVHWDeviceType.AV_HWDEVICE_TYPE_OPENCL = 9;
     * }
     */
    public static int AV_HWDEVICE_TYPE_OPENCL() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum AVHWDeviceType.AV_HWDEVICE_TYPE_MEDIACODEC = 10;
     * }
     */
    public static int AV_HWDEVICE_TYPE_MEDIACODEC() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum AVHWDeviceType.AV_HWDEVICE_TYPE_VULKAN = 11;
     * }
     */
    public static int AV_HWDEVICE_TYPE_VULKAN() {
        return (int)11L;
    }
    public static MethodHandle av_hwdevice_find_type_by_name$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$1,"av_hwdevice_find_type_by_name");
    }
    /**
     * {@snippet :
     * enum AVHWDeviceType av_hwdevice_find_type_by_name(char* name);
     * }
     */
    public static int av_hwdevice_find_type_by_name(MemorySegment name) {
        var mh$ = av_hwdevice_find_type_by_name$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwdevice_get_type_name$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$2,"av_hwdevice_get_type_name");
    }
    /**
     * {@snippet :
     * char* av_hwdevice_get_type_name(enum AVHWDeviceType type);
     * }
     */
    public static MemorySegment av_hwdevice_get_type_name(int type) {
        var mh$ = av_hwdevice_get_type_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwdevice_iterate_types$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$3,"av_hwdevice_iterate_types");
    }
    /**
     * {@snippet :
     * enum AVHWDeviceType av_hwdevice_iterate_types(enum AVHWDeviceType prev);
     * }
     */
    public static int av_hwdevice_iterate_types(int prev) {
        var mh$ = av_hwdevice_iterate_types$MH();
        try {
            return (int)mh$.invokeExact(prev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwdevice_ctx_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$4,"av_hwdevice_ctx_alloc");
    }
    /**
     * {@snippet :
     * struct AVBufferRef* av_hwdevice_ctx_alloc(enum AVHWDeviceType type);
     * }
     */
    public static MemorySegment av_hwdevice_ctx_alloc(int type) {
        var mh$ = av_hwdevice_ctx_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwdevice_ctx_init$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$5,"av_hwdevice_ctx_init");
    }
    /**
     * {@snippet :
     * int av_hwdevice_ctx_init(struct AVBufferRef* ref);
     * }
     */
    public static int av_hwdevice_ctx_init(MemorySegment ref) {
        var mh$ = av_hwdevice_ctx_init$MH();
        try {
            return (int)mh$.invokeExact(ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwdevice_ctx_create$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$1,"av_hwdevice_ctx_create");
    }
    /**
     * {@snippet :
     * int av_hwdevice_ctx_create(struct AVBufferRef** device_ctx, enum AVHWDeviceType type, char* device, struct AVDictionary* opts, int flags);
     * }
     */
    public static int av_hwdevice_ctx_create(MemorySegment device_ctx, int type, MemorySegment device, MemorySegment opts, int flags) {
        var mh$ = av_hwdevice_ctx_create$MH();
        try {
            return (int)mh$.invokeExact(device_ctx, type, device, opts, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwdevice_ctx_create_derived$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$3,"av_hwdevice_ctx_create_derived");
    }
    /**
     * {@snippet :
     * int av_hwdevice_ctx_create_derived(struct AVBufferRef** dst_ctx, enum AVHWDeviceType type, struct AVBufferRef* src_ctx, int flags);
     * }
     */
    public static int av_hwdevice_ctx_create_derived(MemorySegment dst_ctx, int type, MemorySegment src_ctx, int flags) {
        var mh$ = av_hwdevice_ctx_create_derived$MH();
        try {
            return (int)mh$.invokeExact(dst_ctx, type, src_ctx, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwdevice_ctx_create_derived_opts$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$4,"av_hwdevice_ctx_create_derived_opts");
    }
    /**
     * {@snippet :
     * int av_hwdevice_ctx_create_derived_opts(struct AVBufferRef** dst_ctx, enum AVHWDeviceType type, struct AVBufferRef* src_ctx, struct AVDictionary* options, int flags);
     * }
     */
    public static int av_hwdevice_ctx_create_derived_opts(MemorySegment dst_ctx, int type, MemorySegment src_ctx, MemorySegment options, int flags) {
        var mh$ = av_hwdevice_ctx_create_derived_opts$MH();
        try {
            return (int)mh$.invokeExact(dst_ctx, type, src_ctx, options, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwframe_ctx_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$5,"av_hwframe_ctx_alloc");
    }
    /**
     * {@snippet :
     * struct AVBufferRef* av_hwframe_ctx_alloc(struct AVBufferRef* device_ctx);
     * }
     */
    public static MemorySegment av_hwframe_ctx_alloc(MemorySegment device_ctx) {
        var mh$ = av_hwframe_ctx_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwframe_ctx_init$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$0,"av_hwframe_ctx_init");
    }
    /**
     * {@snippet :
     * int av_hwframe_ctx_init(struct AVBufferRef* ref);
     * }
     */
    public static int av_hwframe_ctx_init(MemorySegment ref) {
        var mh$ = av_hwframe_ctx_init$MH();
        try {
            return (int)mh$.invokeExact(ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwframe_get_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$1,"av_hwframe_get_buffer");
    }
    /**
     * {@snippet :
     * int av_hwframe_get_buffer(struct AVBufferRef* hwframe_ctx, struct AVFrame* frame, int flags);
     * }
     */
    public static int av_hwframe_get_buffer(MemorySegment hwframe_ctx, MemorySegment frame, int flags) {
        var mh$ = av_hwframe_get_buffer$MH();
        try {
            return (int)mh$.invokeExact(hwframe_ctx, frame, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwframe_transfer_data$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$2,"av_hwframe_transfer_data");
    }
    /**
     * {@snippet :
     * int av_hwframe_transfer_data(struct AVFrame* dst, struct AVFrame* src, int flags);
     * }
     */
    public static int av_hwframe_transfer_data(MemorySegment dst, MemorySegment src, int flags) {
        var mh$ = av_hwframe_transfer_data$MH();
        try {
            return (int)mh$.invokeExact(dst, src, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum AVHWFrameTransferDirection.AV_HWFRAME_TRANSFER_DIRECTION_FROM = 0;
     * }
     */
    public static int AV_HWFRAME_TRANSFER_DIRECTION_FROM() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum AVHWFrameTransferDirection.AV_HWFRAME_TRANSFER_DIRECTION_TO = 1;
     * }
     */
    public static int AV_HWFRAME_TRANSFER_DIRECTION_TO() {
        return (int)1L;
    }
    public static MethodHandle av_hwframe_transfer_get_formats$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$3,"av_hwframe_transfer_get_formats");
    }
    /**
     * {@snippet :
     * int av_hwframe_transfer_get_formats(struct AVBufferRef* hwframe_ctx, enum AVHWFrameTransferDirection dir, enum AVPixelFormat** formats, int flags);
     * }
     */
    public static int av_hwframe_transfer_get_formats(MemorySegment hwframe_ctx, int dir, MemorySegment formats, int flags) {
        var mh$ = av_hwframe_transfer_get_formats$MH();
        try {
            return (int)mh$.invokeExact(hwframe_ctx, dir, formats, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle av_hwdevice_hwconfig_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$5,"av_hwdevice_hwconfig_alloc");
    }
    /**
     * {@snippet :
     * void* av_hwdevice_hwconfig_alloc(struct AVBufferRef* device_ctx);
     * }
     */
    public static MemorySegment av_hwdevice_hwconfig_alloc(MemorySegment device_ctx) {
        var mh$ = av_hwdevice_hwconfig_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


