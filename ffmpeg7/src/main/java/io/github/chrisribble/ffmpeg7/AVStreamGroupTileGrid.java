// Generated by jextract

package io.github.chrisribble.ffmpeg7;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct AVStreamGroupTileGrid {
 *     const AVClass *av_class;
 *     unsigned int nb_tiles;
 *     int coded_width;
 *     int coded_height;
 *     struct {
 *         unsigned int idx;
 *         int horizontal;
 *         int vertical;
 *     } *offsets;
 *     uint8_t background[4];
 *     int horizontal_offset;
 *     int vertical_offset;
 *     int width;
 *     int height;
 * }
 * }
 */
public class AVStreamGroupTileGrid {

    AVStreamGroupTileGrid() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FFmpeg.C_POINTER.withName("av_class"),
        FFmpeg.C_INT.withName("nb_tiles"),
        FFmpeg.C_INT.withName("coded_width"),
        FFmpeg.C_INT.withName("coded_height"),
        MemoryLayout.paddingLayout(4),
        FFmpeg.C_POINTER.withName("offsets"),
        MemoryLayout.sequenceLayout(4, FFmpeg.C_CHAR).withName("background"),
        FFmpeg.C_INT.withName("horizontal_offset"),
        FFmpeg.C_INT.withName("vertical_offset"),
        FFmpeg.C_INT.withName("width"),
        FFmpeg.C_INT.withName("height"),
        MemoryLayout.paddingLayout(4)
    ).withName("AVStreamGroupTileGrid");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout av_class$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("av_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const AVClass *av_class
     * }
     */
    public static final AddressLayout av_class$layout() {
        return av_class$LAYOUT;
    }

    private static final long av_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const AVClass *av_class
     * }
     */
    public static final long av_class$offset() {
        return av_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const AVClass *av_class
     * }
     */
    public static MemorySegment av_class(MemorySegment struct) {
        return struct.get(av_class$LAYOUT, av_class$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const AVClass *av_class
     * }
     */
    public static void av_class(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(av_class$LAYOUT, av_class$OFFSET, fieldValue);
    }

    private static final OfInt nb_tiles$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nb_tiles"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int nb_tiles
     * }
     */
    public static final OfInt nb_tiles$layout() {
        return nb_tiles$LAYOUT;
    }

    private static final long nb_tiles$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int nb_tiles
     * }
     */
    public static final long nb_tiles$offset() {
        return nb_tiles$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int nb_tiles
     * }
     */
    public static int nb_tiles(MemorySegment struct) {
        return struct.get(nb_tiles$LAYOUT, nb_tiles$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int nb_tiles
     * }
     */
    public static void nb_tiles(MemorySegment struct, int fieldValue) {
        struct.set(nb_tiles$LAYOUT, nb_tiles$OFFSET, fieldValue);
    }

    private static final OfInt coded_width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("coded_width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int coded_width
     * }
     */
    public static final OfInt coded_width$layout() {
        return coded_width$LAYOUT;
    }

    private static final long coded_width$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int coded_width
     * }
     */
    public static final long coded_width$offset() {
        return coded_width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int coded_width
     * }
     */
    public static int coded_width(MemorySegment struct) {
        return struct.get(coded_width$LAYOUT, coded_width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int coded_width
     * }
     */
    public static void coded_width(MemorySegment struct, int fieldValue) {
        struct.set(coded_width$LAYOUT, coded_width$OFFSET, fieldValue);
    }

    private static final OfInt coded_height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("coded_height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int coded_height
     * }
     */
    public static final OfInt coded_height$layout() {
        return coded_height$LAYOUT;
    }

    private static final long coded_height$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int coded_height
     * }
     */
    public static final long coded_height$offset() {
        return coded_height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int coded_height
     * }
     */
    public static int coded_height(MemorySegment struct) {
        return struct.get(coded_height$LAYOUT, coded_height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int coded_height
     * }
     */
    public static void coded_height(MemorySegment struct, int fieldValue) {
        struct.set(coded_height$LAYOUT, coded_height$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     unsigned int idx;
     *     int horizontal;
     *     int vertical;
     * }
     * }
     */
    public static class offsets {

        offsets() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            FFmpeg.C_INT.withName("idx"),
            FFmpeg.C_INT.withName("horizontal"),
            FFmpeg.C_INT.withName("vertical")
        ).withName("$anon$1017:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt idx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("idx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * unsigned int idx
         * }
         */
        public static final OfInt idx$layout() {
            return idx$LAYOUT;
        }

        private static final long idx$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * unsigned int idx
         * }
         */
        public static final long idx$offset() {
            return idx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * unsigned int idx
         * }
         */
        public static int idx(MemorySegment struct) {
            return struct.get(idx$LAYOUT, idx$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * unsigned int idx
         * }
         */
        public static void idx(MemorySegment struct, int fieldValue) {
            struct.set(idx$LAYOUT, idx$OFFSET, fieldValue);
        }

        private static final OfInt horizontal$LAYOUT = (OfInt)$LAYOUT.select(groupElement("horizontal"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int horizontal
         * }
         */
        public static final OfInt horizontal$layout() {
            return horizontal$LAYOUT;
        }

        private static final long horizontal$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int horizontal
         * }
         */
        public static final long horizontal$offset() {
            return horizontal$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int horizontal
         * }
         */
        public static int horizontal(MemorySegment struct) {
            return struct.get(horizontal$LAYOUT, horizontal$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int horizontal
         * }
         */
        public static void horizontal(MemorySegment struct, int fieldValue) {
            struct.set(horizontal$LAYOUT, horizontal$OFFSET, fieldValue);
        }

        private static final OfInt vertical$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vertical"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int vertical
         * }
         */
        public static final OfInt vertical$layout() {
            return vertical$LAYOUT;
        }

        private static final long vertical$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int vertical
         * }
         */
        public static final long vertical$offset() {
            return vertical$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int vertical
         * }
         */
        public static int vertical(MemorySegment struct) {
            return struct.get(vertical$LAYOUT, vertical$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int vertical
         * }
         */
        public static void vertical(MemorySegment struct, int fieldValue) {
            struct.set(vertical$LAYOUT, vertical$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final AddressLayout offsets$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("offsets"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int idx;
     *     int horizontal;
     *     int vertical;
     * } *offsets
     * }
     */
    public static final AddressLayout offsets$layout() {
        return offsets$LAYOUT;
    }

    private static final long offsets$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int idx;
     *     int horizontal;
     *     int vertical;
     * } *offsets
     * }
     */
    public static final long offsets$offset() {
        return offsets$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int idx;
     *     int horizontal;
     *     int vertical;
     * } *offsets
     * }
     */
    public static MemorySegment offsets(MemorySegment struct) {
        return struct.get(offsets$LAYOUT, offsets$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     unsigned int idx;
     *     int horizontal;
     *     int vertical;
     * } *offsets
     * }
     */
    public static void offsets(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(offsets$LAYOUT, offsets$OFFSET, fieldValue);
    }

    private static final SequenceLayout background$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("background"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t background[4]
     * }
     */
    public static final SequenceLayout background$layout() {
        return background$LAYOUT;
    }

    private static final long background$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t background[4]
     * }
     */
    public static final long background$offset() {
        return background$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t background[4]
     * }
     */
    public static MemorySegment background(MemorySegment struct) {
        return struct.asSlice(background$OFFSET, background$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t background[4]
     * }
     */
    public static void background(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, background$OFFSET, background$LAYOUT.byteSize());
    }

    private static long[] background$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t background[4]
     * }
     */
    public static long[] background$dimensions() {
        return background$DIMS;
    }
    private static final VarHandle background$ELEM_HANDLE = background$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t background[4]
     * }
     */
    public static byte background(MemorySegment struct, long index0) {
        return (byte)background$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t background[4]
     * }
     */
    public static void background(MemorySegment struct, long index0, byte fieldValue) {
        background$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt horizontal_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("horizontal_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int horizontal_offset
     * }
     */
    public static final OfInt horizontal_offset$layout() {
        return horizontal_offset$LAYOUT;
    }

    private static final long horizontal_offset$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int horizontal_offset
     * }
     */
    public static final long horizontal_offset$offset() {
        return horizontal_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int horizontal_offset
     * }
     */
    public static int horizontal_offset(MemorySegment struct) {
        return struct.get(horizontal_offset$LAYOUT, horizontal_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int horizontal_offset
     * }
     */
    public static void horizontal_offset(MemorySegment struct, int fieldValue) {
        struct.set(horizontal_offset$LAYOUT, horizontal_offset$OFFSET, fieldValue);
    }

    private static final OfInt vertical_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vertical_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int vertical_offset
     * }
     */
    public static final OfInt vertical_offset$layout() {
        return vertical_offset$LAYOUT;
    }

    private static final long vertical_offset$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int vertical_offset
     * }
     */
    public static final long vertical_offset$offset() {
        return vertical_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int vertical_offset
     * }
     */
    public static int vertical_offset(MemorySegment struct) {
        return struct.get(vertical_offset$LAYOUT, vertical_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int vertical_offset
     * }
     */
    public static void vertical_offset(MemorySegment struct, int fieldValue) {
        struct.set(vertical_offset$LAYOUT, vertical_offset$OFFSET, fieldValue);
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

