// Generated by jextract

package io.github.chrisribble.ffmpeg6;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct AVPacket {
 *     AVBufferRef *buf;
 *     int64_t pts;
 *     int64_t dts;
 *     uint8_t *data;
 *     int size;
 *     int stream_index;
 *     int flags;
 *     AVPacketSideData *side_data;
 *     int side_data_elems;
 *     int64_t duration;
 *     int64_t pos;
 *     void *opaque;
 *     AVBufferRef *opaque_ref;
 *     AVRational time_base;
 * }
 * }
 */
public class AVPacket {

    AVPacket() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FFmpeg.C_POINTER.withName("buf"),
        FFmpeg.C_LONG.withName("pts"),
        FFmpeg.C_LONG.withName("dts"),
        FFmpeg.C_POINTER.withName("data"),
        FFmpeg.C_INT.withName("size"),
        FFmpeg.C_INT.withName("stream_index"),
        FFmpeg.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4),
        FFmpeg.C_POINTER.withName("side_data"),
        FFmpeg.C_INT.withName("side_data_elems"),
        MemoryLayout.paddingLayout(4),
        FFmpeg.C_LONG.withName("duration"),
        FFmpeg.C_LONG.withName("pos"),
        FFmpeg.C_POINTER.withName("opaque"),
        FFmpeg.C_POINTER.withName("opaque_ref"),
        AVRational.layout().withName("time_base")
    ).withName("AVPacket");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout buf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AVBufferRef *buf
     * }
     */
    public static final AddressLayout buf$layout() {
        return buf$LAYOUT;
    }

    private static final long buf$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AVBufferRef *buf
     * }
     */
    public static final long buf$offset() {
        return buf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AVBufferRef *buf
     * }
     */
    public static MemorySegment buf(MemorySegment struct) {
        return struct.get(buf$LAYOUT, buf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AVBufferRef *buf
     * }
     */
    public static void buf(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buf$LAYOUT, buf$OFFSET, fieldValue);
    }

    private static final OfLong pts$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t pts
     * }
     */
    public static final OfLong pts$layout() {
        return pts$LAYOUT;
    }

    private static final long pts$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t pts
     * }
     */
    public static final long pts$offset() {
        return pts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t pts
     * }
     */
    public static long pts(MemorySegment struct) {
        return struct.get(pts$LAYOUT, pts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t pts
     * }
     */
    public static void pts(MemorySegment struct, long fieldValue) {
        struct.set(pts$LAYOUT, pts$OFFSET, fieldValue);
    }

    private static final OfLong dts$LAYOUT = (OfLong)$LAYOUT.select(groupElement("dts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t dts
     * }
     */
    public static final OfLong dts$layout() {
        return dts$LAYOUT;
    }

    private static final long dts$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t dts
     * }
     */
    public static final long dts$offset() {
        return dts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t dts
     * }
     */
    public static long dts(MemorySegment struct) {
        return struct.get(dts$LAYOUT, dts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t dts
     * }
     */
    public static void dts(MemorySegment struct, long fieldValue) {
        struct.set(dts$LAYOUT, dts$OFFSET, fieldValue);
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static final OfInt size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static int size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static void size(MemorySegment struct, int fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfInt stream_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stream_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int stream_index
     * }
     */
    public static final OfInt stream_index$layout() {
        return stream_index$LAYOUT;
    }

    private static final long stream_index$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int stream_index
     * }
     */
    public static final long stream_index$offset() {
        return stream_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int stream_index
     * }
     */
    public static int stream_index(MemorySegment struct) {
        return struct.get(stream_index$LAYOUT, stream_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int stream_index
     * }
     */
    public static void stream_index(MemorySegment struct, int fieldValue) {
        struct.set(stream_index$LAYOUT, stream_index$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final AddressLayout side_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("side_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AVPacketSideData *side_data
     * }
     */
    public static final AddressLayout side_data$layout() {
        return side_data$LAYOUT;
    }

    private static final long side_data$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AVPacketSideData *side_data
     * }
     */
    public static final long side_data$offset() {
        return side_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AVPacketSideData *side_data
     * }
     */
    public static MemorySegment side_data(MemorySegment struct) {
        return struct.get(side_data$LAYOUT, side_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AVPacketSideData *side_data
     * }
     */
    public static void side_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(side_data$LAYOUT, side_data$OFFSET, fieldValue);
    }

    private static final OfInt side_data_elems$LAYOUT = (OfInt)$LAYOUT.select(groupElement("side_data_elems"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int side_data_elems
     * }
     */
    public static final OfInt side_data_elems$layout() {
        return side_data_elems$LAYOUT;
    }

    private static final long side_data_elems$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int side_data_elems
     * }
     */
    public static final long side_data_elems$offset() {
        return side_data_elems$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int side_data_elems
     * }
     */
    public static int side_data_elems(MemorySegment struct) {
        return struct.get(side_data_elems$LAYOUT, side_data_elems$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int side_data_elems
     * }
     */
    public static void side_data_elems(MemorySegment struct, int fieldValue) {
        struct.set(side_data_elems$LAYOUT, side_data_elems$OFFSET, fieldValue);
    }

    private static final OfLong duration$LAYOUT = (OfLong)$LAYOUT.select(groupElement("duration"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t duration
     * }
     */
    public static final OfLong duration$layout() {
        return duration$LAYOUT;
    }

    private static final long duration$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t duration
     * }
     */
    public static final long duration$offset() {
        return duration$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t duration
     * }
     */
    public static long duration(MemorySegment struct) {
        return struct.get(duration$LAYOUT, duration$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t duration
     * }
     */
    public static void duration(MemorySegment struct, long fieldValue) {
        struct.set(duration$LAYOUT, duration$OFFSET, fieldValue);
    }

    private static final OfLong pos$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t pos
     * }
     */
    public static final OfLong pos$layout() {
        return pos$LAYOUT;
    }

    private static final long pos$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t pos
     * }
     */
    public static final long pos$offset() {
        return pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t pos
     * }
     */
    public static long pos(MemorySegment struct) {
        return struct.get(pos$LAYOUT, pos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t pos
     * }
     */
    public static void pos(MemorySegment struct, long fieldValue) {
        struct.set(pos$LAYOUT, pos$OFFSET, fieldValue);
    }

    private static final AddressLayout opaque$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("opaque"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *opaque
     * }
     */
    public static final AddressLayout opaque$layout() {
        return opaque$LAYOUT;
    }

    private static final long opaque$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *opaque
     * }
     */
    public static final long opaque$offset() {
        return opaque$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *opaque
     * }
     */
    public static MemorySegment opaque(MemorySegment struct) {
        return struct.get(opaque$LAYOUT, opaque$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *opaque
     * }
     */
    public static void opaque(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(opaque$LAYOUT, opaque$OFFSET, fieldValue);
    }

    private static final AddressLayout opaque_ref$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("opaque_ref"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AVBufferRef *opaque_ref
     * }
     */
    public static final AddressLayout opaque_ref$layout() {
        return opaque_ref$LAYOUT;
    }

    private static final long opaque_ref$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AVBufferRef *opaque_ref
     * }
     */
    public static final long opaque_ref$offset() {
        return opaque_ref$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AVBufferRef *opaque_ref
     * }
     */
    public static MemorySegment opaque_ref(MemorySegment struct) {
        return struct.get(opaque_ref$LAYOUT, opaque_ref$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AVBufferRef *opaque_ref
     * }
     */
    public static void opaque_ref(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(opaque_ref$LAYOUT, opaque_ref$OFFSET, fieldValue);
    }

    private static final GroupLayout time_base$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("time_base"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AVRational time_base
     * }
     */
    public static final GroupLayout time_base$layout() {
        return time_base$LAYOUT;
    }

    private static final long time_base$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AVRational time_base
     * }
     */
    public static final long time_base$offset() {
        return time_base$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AVRational time_base
     * }
     */
    public static MemorySegment time_base(MemorySegment struct) {
        return struct.asSlice(time_base$OFFSET, time_base$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AVRational time_base
     * }
     */
    public static void time_base(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, time_base$OFFSET, time_base$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

