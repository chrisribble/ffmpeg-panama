// Generated by jextract

package io.github.chrisribble.ffmpeg6;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct RcOverride {
 *     int start_frame;
 *     int end_frame;
 *     int qscale;
 *     float quality_factor;
 * }
 * }
 */
public class RcOverride {

    RcOverride() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FFmpeg.C_INT.withName("start_frame"),
        FFmpeg.C_INT.withName("end_frame"),
        FFmpeg.C_INT.withName("qscale"),
        FFmpeg.C_FLOAT.withName("quality_factor")
    ).withName("RcOverride");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt start_frame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("start_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int start_frame
     * }
     */
    public static final OfInt start_frame$layout() {
        return start_frame$LAYOUT;
    }

    private static final long start_frame$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int start_frame
     * }
     */
    public static final long start_frame$offset() {
        return start_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int start_frame
     * }
     */
    public static int start_frame(MemorySegment struct) {
        return struct.get(start_frame$LAYOUT, start_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int start_frame
     * }
     */
    public static void start_frame(MemorySegment struct, int fieldValue) {
        struct.set(start_frame$LAYOUT, start_frame$OFFSET, fieldValue);
    }

    private static final OfInt end_frame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("end_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int end_frame
     * }
     */
    public static final OfInt end_frame$layout() {
        return end_frame$LAYOUT;
    }

    private static final long end_frame$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int end_frame
     * }
     */
    public static final long end_frame$offset() {
        return end_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int end_frame
     * }
     */
    public static int end_frame(MemorySegment struct) {
        return struct.get(end_frame$LAYOUT, end_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int end_frame
     * }
     */
    public static void end_frame(MemorySegment struct, int fieldValue) {
        struct.set(end_frame$LAYOUT, end_frame$OFFSET, fieldValue);
    }

    private static final OfInt qscale$LAYOUT = (OfInt)$LAYOUT.select(groupElement("qscale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int qscale
     * }
     */
    public static final OfInt qscale$layout() {
        return qscale$LAYOUT;
    }

    private static final long qscale$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int qscale
     * }
     */
    public static final long qscale$offset() {
        return qscale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int qscale
     * }
     */
    public static int qscale(MemorySegment struct) {
        return struct.get(qscale$LAYOUT, qscale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int qscale
     * }
     */
    public static void qscale(MemorySegment struct, int fieldValue) {
        struct.set(qscale$LAYOUT, qscale$OFFSET, fieldValue);
    }

    private static final OfFloat quality_factor$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("quality_factor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float quality_factor
     * }
     */
    public static final OfFloat quality_factor$layout() {
        return quality_factor$LAYOUT;
    }

    private static final long quality_factor$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float quality_factor
     * }
     */
    public static final long quality_factor$offset() {
        return quality_factor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float quality_factor
     * }
     */
    public static float quality_factor(MemorySegment struct) {
        return struct.get(quality_factor$LAYOUT, quality_factor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float quality_factor
     * }
     */
    public static void quality_factor(MemorySegment struct, float fieldValue) {
        struct.set(quality_factor$LAYOUT, quality_factor$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

