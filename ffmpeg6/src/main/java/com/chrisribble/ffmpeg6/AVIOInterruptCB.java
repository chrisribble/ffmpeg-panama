// Generated by jextract

package com.chrisribble.ffmpeg6;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVIOInterruptCB {
 *     int (*callback)(void*);
 *     void* opaque;
 * };
 * }
 */
public class AVIOInterruptCB {

    public static MemoryLayout $LAYOUT() {
        return constants$271.const$0;
    }
    /**
     * {@snippet :
 * int (*callback)(void*);
     * }
     */
    public interface callback {

        int apply(java.lang.foreign.MemorySegment __cookie);
        static MemorySegment allocate(callback fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$271.const$1, fi, constants$0.const$3, scope);
        }
        static callback ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment ___cookie) -> {
                try {
                    return (int)constants$66.const$4.invokeExact(symbol, ___cookie);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle callback$VH() {
        return constants$271.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*callback)(void*);
     * }
     */
    public static MemorySegment callback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$271.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*callback)(void*);
     * }
     */
    public static void callback$set(MemorySegment seg, MemorySegment x) {
        constants$271.const$2.set(seg, x);
    }
    public static MemorySegment callback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$271.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void callback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$271.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static callback callback(MemorySegment segment, Arena scope) {
        return callback.ofAddress(callback$get(segment), scope);
    }
    public static VarHandle opaque$VH() {
        return constants$271.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static MemorySegment opaque$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$271.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static void opaque$set(MemorySegment seg, MemorySegment x) {
        constants$271.const$3.set(seg, x);
    }
    public static MemorySegment opaque$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$271.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void opaque$set(MemorySegment seg, long index, MemorySegment x) {
        constants$271.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


