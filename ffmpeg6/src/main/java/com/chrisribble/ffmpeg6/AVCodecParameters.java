// Generated by jextract

package com.chrisribble.ffmpeg6;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVCodecParameters {
 *     enum AVMediaType codec_type;
 *     enum AVCodecID codec_id;
 *     uint32_t codec_tag;
 *     uint8_t* extradata;
 *     int extradata_size;
 *     int format;
 *     int64_t bit_rate;
 *     int bits_per_coded_sample;
 *     int bits_per_raw_sample;
 *     int profile;
 *     int level;
 *     int width;
 *     int height;
 *     AVRational sample_aspect_ratio;
 *     enum AVFieldOrder field_order;
 *     enum AVColorRange color_range;
 *     enum AVColorPrimaries color_primaries;
 *     enum AVColorTransferCharacteristic color_trc;
 *     enum AVColorSpace color_space;
 *     enum AVChromaLocation chroma_location;
 *     int video_delay;
 *     uint64_t channel_layout;
 *     int channels;
 *     int sample_rate;
 *     int block_align;
 *     int frame_size;
 *     int initial_padding;
 *     int trailing_padding;
 *     int seek_preroll;
 *     AVChannelLayout ch_layout;
 * };
 * }
 */
public class AVCodecParameters {

    public static MemoryLayout $LAYOUT() {
        return constants$192.const$0;
    }
    public static VarHandle codec_type$VH() {
        return constants$192.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVMediaType codec_type;
     * }
     */
    public static int codec_type$get(MemorySegment seg) {
        return (int)constants$192.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVMediaType codec_type;
     * }
     */
    public static void codec_type$set(MemorySegment seg, int x) {
        constants$192.const$1.set(seg, x);
    }
    public static int codec_type$get(MemorySegment seg, long index) {
        return (int)constants$192.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void codec_type$set(MemorySegment seg, long index, int x) {
        constants$192.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle codec_id$VH() {
        return constants$192.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVCodecID codec_id;
     * }
     */
    public static int codec_id$get(MemorySegment seg) {
        return (int)constants$192.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVCodecID codec_id;
     * }
     */
    public static void codec_id$set(MemorySegment seg, int x) {
        constants$192.const$2.set(seg, x);
    }
    public static int codec_id$get(MemorySegment seg, long index) {
        return (int)constants$192.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void codec_id$set(MemorySegment seg, long index, int x) {
        constants$192.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle codec_tag$VH() {
        return constants$192.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t codec_tag;
     * }
     */
    public static int codec_tag$get(MemorySegment seg) {
        return (int)constants$192.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t codec_tag;
     * }
     */
    public static void codec_tag$set(MemorySegment seg, int x) {
        constants$192.const$3.set(seg, x);
    }
    public static int codec_tag$get(MemorySegment seg, long index) {
        return (int)constants$192.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void codec_tag$set(MemorySegment seg, long index, int x) {
        constants$192.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extradata$VH() {
        return constants$192.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t* extradata;
     * }
     */
    public static MemorySegment extradata$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$192.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t* extradata;
     * }
     */
    public static void extradata$set(MemorySegment seg, MemorySegment x) {
        constants$192.const$4.set(seg, x);
    }
    public static MemorySegment extradata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$192.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void extradata$set(MemorySegment seg, long index, MemorySegment x) {
        constants$192.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle extradata_size$VH() {
        return constants$192.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int extradata_size;
     * }
     */
    public static int extradata_size$get(MemorySegment seg) {
        return (int)constants$192.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int extradata_size;
     * }
     */
    public static void extradata_size$set(MemorySegment seg, int x) {
        constants$192.const$5.set(seg, x);
    }
    public static int extradata_size$get(MemorySegment seg, long index) {
        return (int)constants$192.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void extradata_size$set(MemorySegment seg, long index, int x) {
        constants$192.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle format$VH() {
        return constants$193.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int format;
     * }
     */
    public static int format$get(MemorySegment seg) {
        return (int)constants$193.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int format;
     * }
     */
    public static void format$set(MemorySegment seg, int x) {
        constants$193.const$0.set(seg, x);
    }
    public static int format$get(MemorySegment seg, long index) {
        return (int)constants$193.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void format$set(MemorySegment seg, long index, int x) {
        constants$193.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bit_rate$VH() {
        return constants$193.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t bit_rate;
     * }
     */
    public static long bit_rate$get(MemorySegment seg) {
        return (long)constants$193.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t bit_rate;
     * }
     */
    public static void bit_rate$set(MemorySegment seg, long x) {
        constants$193.const$1.set(seg, x);
    }
    public static long bit_rate$get(MemorySegment seg, long index) {
        return (long)constants$193.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_rate$set(MemorySegment seg, long index, long x) {
        constants$193.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bits_per_coded_sample$VH() {
        return constants$193.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bits_per_coded_sample;
     * }
     */
    public static int bits_per_coded_sample$get(MemorySegment seg) {
        return (int)constants$193.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bits_per_coded_sample;
     * }
     */
    public static void bits_per_coded_sample$set(MemorySegment seg, int x) {
        constants$193.const$2.set(seg, x);
    }
    public static int bits_per_coded_sample$get(MemorySegment seg, long index) {
        return (int)constants$193.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void bits_per_coded_sample$set(MemorySegment seg, long index, int x) {
        constants$193.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle bits_per_raw_sample$VH() {
        return constants$193.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int bits_per_raw_sample;
     * }
     */
    public static int bits_per_raw_sample$get(MemorySegment seg) {
        return (int)constants$193.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int bits_per_raw_sample;
     * }
     */
    public static void bits_per_raw_sample$set(MemorySegment seg, int x) {
        constants$193.const$3.set(seg, x);
    }
    public static int bits_per_raw_sample$get(MemorySegment seg, long index) {
        return (int)constants$193.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void bits_per_raw_sample$set(MemorySegment seg, long index, int x) {
        constants$193.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle profile$VH() {
        return constants$193.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int profile;
     * }
     */
    public static int profile$get(MemorySegment seg) {
        return (int)constants$193.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int profile;
     * }
     */
    public static void profile$set(MemorySegment seg, int x) {
        constants$193.const$4.set(seg, x);
    }
    public static int profile$get(MemorySegment seg, long index) {
        return (int)constants$193.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void profile$set(MemorySegment seg, long index, int x) {
        constants$193.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle level$VH() {
        return constants$193.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int level;
     * }
     */
    public static int level$get(MemorySegment seg) {
        return (int)constants$193.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int level;
     * }
     */
    public static void level$set(MemorySegment seg, int x) {
        constants$193.const$5.set(seg, x);
    }
    public static int level$get(MemorySegment seg, long index) {
        return (int)constants$193.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void level$set(MemorySegment seg, long index, int x) {
        constants$193.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle width$VH() {
        return constants$194.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static int width$get(MemorySegment seg) {
        return (int)constants$194.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static void width$set(MemorySegment seg, int x) {
        constants$194.const$0.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)constants$194.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        constants$194.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height$VH() {
        return constants$194.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)constants$194.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        constants$194.const$1.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)constants$194.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        constants$194.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sample_aspect_ratio$slice(MemorySegment seg) {
        return seg.asSlice(64, 8);
    }
    public static VarHandle field_order$VH() {
        return constants$194.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVFieldOrder field_order;
     * }
     */
    public static int field_order$get(MemorySegment seg) {
        return (int)constants$194.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVFieldOrder field_order;
     * }
     */
    public static void field_order$set(MemorySegment seg, int x) {
        constants$194.const$2.set(seg, x);
    }
    public static int field_order$get(MemorySegment seg, long index) {
        return (int)constants$194.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void field_order$set(MemorySegment seg, long index, int x) {
        constants$194.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle color_range$VH() {
        return constants$194.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorRange color_range;
     * }
     */
    public static int color_range$get(MemorySegment seg) {
        return (int)constants$194.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorRange color_range;
     * }
     */
    public static void color_range$set(MemorySegment seg, int x) {
        constants$194.const$3.set(seg, x);
    }
    public static int color_range$get(MemorySegment seg, long index) {
        return (int)constants$194.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void color_range$set(MemorySegment seg, long index, int x) {
        constants$194.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle color_primaries$VH() {
        return constants$194.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorPrimaries color_primaries;
     * }
     */
    public static int color_primaries$get(MemorySegment seg) {
        return (int)constants$194.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorPrimaries color_primaries;
     * }
     */
    public static void color_primaries$set(MemorySegment seg, int x) {
        constants$194.const$4.set(seg, x);
    }
    public static int color_primaries$get(MemorySegment seg, long index) {
        return (int)constants$194.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primaries$set(MemorySegment seg, long index, int x) {
        constants$194.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle color_trc$VH() {
        return constants$194.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorTransferCharacteristic color_trc;
     * }
     */
    public static int color_trc$get(MemorySegment seg) {
        return (int)constants$194.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorTransferCharacteristic color_trc;
     * }
     */
    public static void color_trc$set(MemorySegment seg, int x) {
        constants$194.const$5.set(seg, x);
    }
    public static int color_trc$get(MemorySegment seg, long index) {
        return (int)constants$194.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void color_trc$set(MemorySegment seg, long index, int x) {
        constants$194.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle color_space$VH() {
        return constants$195.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorSpace color_space;
     * }
     */
    public static int color_space$get(MemorySegment seg) {
        return (int)constants$195.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorSpace color_space;
     * }
     */
    public static void color_space$set(MemorySegment seg, int x) {
        constants$195.const$0.set(seg, x);
    }
    public static int color_space$get(MemorySegment seg, long index) {
        return (int)constants$195.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void color_space$set(MemorySegment seg, long index, int x) {
        constants$195.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle chroma_location$VH() {
        return constants$195.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVChromaLocation chroma_location;
     * }
     */
    public static int chroma_location$get(MemorySegment seg) {
        return (int)constants$195.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVChromaLocation chroma_location;
     * }
     */
    public static void chroma_location$set(MemorySegment seg, int x) {
        constants$195.const$1.set(seg, x);
    }
    public static int chroma_location$get(MemorySegment seg, long index) {
        return (int)constants$195.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void chroma_location$set(MemorySegment seg, long index, int x) {
        constants$195.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle video_delay$VH() {
        return constants$195.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int video_delay;
     * }
     */
    public static int video_delay$get(MemorySegment seg) {
        return (int)constants$195.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int video_delay;
     * }
     */
    public static void video_delay$set(MemorySegment seg, int x) {
        constants$195.const$2.set(seg, x);
    }
    public static int video_delay$get(MemorySegment seg, long index) {
        return (int)constants$195.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void video_delay$set(MemorySegment seg, long index, int x) {
        constants$195.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle channel_layout$VH() {
        return constants$195.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t channel_layout;
     * }
     */
    public static long channel_layout$get(MemorySegment seg) {
        return (long)constants$195.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t channel_layout;
     * }
     */
    public static void channel_layout$set(MemorySegment seg, long x) {
        constants$195.const$3.set(seg, x);
    }
    public static long channel_layout$get(MemorySegment seg, long index) {
        return (long)constants$195.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void channel_layout$set(MemorySegment seg, long index, long x) {
        constants$195.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle channels$VH() {
        return constants$195.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int channels;
     * }
     */
    public static int channels$get(MemorySegment seg) {
        return (int)constants$195.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int channels;
     * }
     */
    public static void channels$set(MemorySegment seg, int x) {
        constants$195.const$4.set(seg, x);
    }
    public static int channels$get(MemorySegment seg, long index) {
        return (int)constants$195.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void channels$set(MemorySegment seg, long index, int x) {
        constants$195.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sample_rate$VH() {
        return constants$195.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int sample_rate;
     * }
     */
    public static int sample_rate$get(MemorySegment seg) {
        return (int)constants$195.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int sample_rate;
     * }
     */
    public static void sample_rate$set(MemorySegment seg, int x) {
        constants$195.const$5.set(seg, x);
    }
    public static int sample_rate$get(MemorySegment seg, long index) {
        return (int)constants$195.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sample_rate$set(MemorySegment seg, long index, int x) {
        constants$195.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle block_align$VH() {
        return constants$196.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int block_align;
     * }
     */
    public static int block_align$get(MemorySegment seg) {
        return (int)constants$196.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int block_align;
     * }
     */
    public static void block_align$set(MemorySegment seg, int x) {
        constants$196.const$0.set(seg, x);
    }
    public static int block_align$get(MemorySegment seg, long index) {
        return (int)constants$196.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void block_align$set(MemorySegment seg, long index, int x) {
        constants$196.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle frame_size$VH() {
        return constants$196.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int frame_size;
     * }
     */
    public static int frame_size$get(MemorySegment seg) {
        return (int)constants$196.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int frame_size;
     * }
     */
    public static void frame_size$set(MemorySegment seg, int x) {
        constants$196.const$1.set(seg, x);
    }
    public static int frame_size$get(MemorySegment seg, long index) {
        return (int)constants$196.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void frame_size$set(MemorySegment seg, long index, int x) {
        constants$196.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle initial_padding$VH() {
        return constants$196.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int initial_padding;
     * }
     */
    public static int initial_padding$get(MemorySegment seg) {
        return (int)constants$196.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int initial_padding;
     * }
     */
    public static void initial_padding$set(MemorySegment seg, int x) {
        constants$196.const$2.set(seg, x);
    }
    public static int initial_padding$get(MemorySegment seg, long index) {
        return (int)constants$196.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void initial_padding$set(MemorySegment seg, long index, int x) {
        constants$196.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle trailing_padding$VH() {
        return constants$196.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int trailing_padding;
     * }
     */
    public static int trailing_padding$get(MemorySegment seg) {
        return (int)constants$196.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int trailing_padding;
     * }
     */
    public static void trailing_padding$set(MemorySegment seg, int x) {
        constants$196.const$3.set(seg, x);
    }
    public static int trailing_padding$get(MemorySegment seg, long index) {
        return (int)constants$196.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void trailing_padding$set(MemorySegment seg, long index, int x) {
        constants$196.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle seek_preroll$VH() {
        return constants$196.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int seek_preroll;
     * }
     */
    public static int seek_preroll$get(MemorySegment seg) {
        return (int)constants$196.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int seek_preroll;
     * }
     */
    public static void seek_preroll$set(MemorySegment seg, int x) {
        constants$196.const$4.set(seg, x);
    }
    public static int seek_preroll$get(MemorySegment seg, long index) {
        return (int)constants$196.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void seek_preroll$set(MemorySegment seg, long index, int x) {
        constants$196.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ch_layout$slice(MemorySegment seg) {
        return seg.asSlice(144, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


