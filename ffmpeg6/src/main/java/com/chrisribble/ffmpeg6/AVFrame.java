// Generated by jextract

package com.chrisribble.ffmpeg6;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVFrame {
 *     uint8_t* data[8];
 *     int linesize[8];
 *     uint8_t** extended_data;
 *     int width;
 *     int height;
 *     int nb_samples;
 *     int format;
 *     int key_frame;
 *     enum AVPictureType pict_type;
 *     AVRational sample_aspect_ratio;
 *     int64_t pts;
 *     int64_t pkt_dts;
 *     AVRational time_base;
 *     int coded_picture_number;
 *     int display_picture_number;
 *     int quality;
 *     void* opaque;
 *     int repeat_pict;
 *     int interlaced_frame;
 *     int top_field_first;
 *     int palette_has_changed;
 *     int64_t reordered_opaque;
 *     int sample_rate;
 *     uint64_t channel_layout;
 *     AVBufferRef* buf[8];
 *     AVBufferRef** extended_buf;
 *     int nb_extended_buf;
 *     AVFrameSideData** side_data;
 *     int nb_side_data;
 *     int flags;
 *     enum AVColorRange color_range;
 *     enum AVColorPrimaries color_primaries;
 *     enum AVColorTransferCharacteristic color_trc;
 *     enum AVColorSpace colorspace;
 *     enum AVChromaLocation chroma_location;
 *     int64_t best_effort_timestamp;
 *     int64_t pkt_pos;
 *     int64_t pkt_duration;
 *     AVDictionary* metadata;
 *     int decode_error_flags;
 *     int channels;
 *     int pkt_size;
 *     AVBufferRef* hw_frames_ctx;
 *     AVBufferRef* opaque_ref;
 *     size_t crop_top;
 *     size_t crop_bottom;
 *     size_t crop_left;
 *     size_t crop_right;
 *     AVBufferRef* private_ref;
 *     AVChannelLayout ch_layout;
 *     int64_t duration;
 * };
 * }
 */
public class AVFrame {

    public static MemoryLayout $LAYOUT() {
        return constants$164.const$4;
    }
    public static MemorySegment data$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    public static MemorySegment linesize$slice(MemorySegment seg) {
        return seg.asSlice(64, 32);
    }
    public static VarHandle extended_data$VH() {
        return constants$164.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t** extended_data;
     * }
     */
    public static MemorySegment extended_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$164.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t** extended_data;
     * }
     */
    public static void extended_data$set(MemorySegment seg, MemorySegment x) {
        constants$164.const$5.set(seg, x);
    }
    public static MemorySegment extended_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$164.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void extended_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$164.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle width$VH() {
        return constants$165.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static int width$get(MemorySegment seg) {
        return (int)constants$165.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static void width$set(MemorySegment seg, int x) {
        constants$165.const$0.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)constants$165.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        constants$165.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height$VH() {
        return constants$165.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)constants$165.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        constants$165.const$1.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)constants$165.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        constants$165.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nb_samples$VH() {
        return constants$165.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nb_samples;
     * }
     */
    public static int nb_samples$get(MemorySegment seg) {
        return (int)constants$165.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nb_samples;
     * }
     */
    public static void nb_samples$set(MemorySegment seg, int x) {
        constants$165.const$2.set(seg, x);
    }
    public static int nb_samples$get(MemorySegment seg, long index) {
        return (int)constants$165.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_samples$set(MemorySegment seg, long index, int x) {
        constants$165.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle format$VH() {
        return constants$165.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int format;
     * }
     */
    public static int format$get(MemorySegment seg) {
        return (int)constants$165.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int format;
     * }
     */
    public static void format$set(MemorySegment seg, int x) {
        constants$165.const$3.set(seg, x);
    }
    public static int format$get(MemorySegment seg, long index) {
        return (int)constants$165.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void format$set(MemorySegment seg, long index, int x) {
        constants$165.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle key_frame$VH() {
        return constants$165.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int key_frame;
     * }
     */
    public static int key_frame$get(MemorySegment seg) {
        return (int)constants$165.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int key_frame;
     * }
     */
    public static void key_frame$set(MemorySegment seg, int x) {
        constants$165.const$4.set(seg, x);
    }
    public static int key_frame$get(MemorySegment seg, long index) {
        return (int)constants$165.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void key_frame$set(MemorySegment seg, long index, int x) {
        constants$165.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pict_type$VH() {
        return constants$165.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVPictureType pict_type;
     * }
     */
    public static int pict_type$get(MemorySegment seg) {
        return (int)constants$165.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVPictureType pict_type;
     * }
     */
    public static void pict_type$set(MemorySegment seg, int x) {
        constants$165.const$5.set(seg, x);
    }
    public static int pict_type$get(MemorySegment seg, long index) {
        return (int)constants$165.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pict_type$set(MemorySegment seg, long index, int x) {
        constants$165.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment sample_aspect_ratio$slice(MemorySegment seg) {
        return seg.asSlice(128, 8);
    }
    public static VarHandle pts$VH() {
        return constants$166.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pts;
     * }
     */
    public static long pts$get(MemorySegment seg) {
        return (long)constants$166.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pts;
     * }
     */
    public static void pts$set(MemorySegment seg, long x) {
        constants$166.const$0.set(seg, x);
    }
    public static long pts$get(MemorySegment seg, long index) {
        return (long)constants$166.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pts$set(MemorySegment seg, long index, long x) {
        constants$166.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pkt_dts$VH() {
        return constants$166.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pkt_dts;
     * }
     */
    public static long pkt_dts$get(MemorySegment seg) {
        return (long)constants$166.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pkt_dts;
     * }
     */
    public static void pkt_dts$set(MemorySegment seg, long x) {
        constants$166.const$1.set(seg, x);
    }
    public static long pkt_dts$get(MemorySegment seg, long index) {
        return (long)constants$166.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pkt_dts$set(MemorySegment seg, long index, long x) {
        constants$166.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment time_base$slice(MemorySegment seg) {
        return seg.asSlice(152, 8);
    }
    public static VarHandle coded_picture_number$VH() {
        return constants$166.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int coded_picture_number;
     * }
     */
    public static int coded_picture_number$get(MemorySegment seg) {
        return (int)constants$166.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int coded_picture_number;
     * }
     */
    public static void coded_picture_number$set(MemorySegment seg, int x) {
        constants$166.const$2.set(seg, x);
    }
    public static int coded_picture_number$get(MemorySegment seg, long index) {
        return (int)constants$166.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void coded_picture_number$set(MemorySegment seg, long index, int x) {
        constants$166.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle display_picture_number$VH() {
        return constants$166.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int display_picture_number;
     * }
     */
    public static int display_picture_number$get(MemorySegment seg) {
        return (int)constants$166.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int display_picture_number;
     * }
     */
    public static void display_picture_number$set(MemorySegment seg, int x) {
        constants$166.const$3.set(seg, x);
    }
    public static int display_picture_number$get(MemorySegment seg, long index) {
        return (int)constants$166.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void display_picture_number$set(MemorySegment seg, long index, int x) {
        constants$166.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle quality$VH() {
        return constants$166.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int quality;
     * }
     */
    public static int quality$get(MemorySegment seg) {
        return (int)constants$166.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int quality;
     * }
     */
    public static void quality$set(MemorySegment seg, int x) {
        constants$166.const$4.set(seg, x);
    }
    public static int quality$get(MemorySegment seg, long index) {
        return (int)constants$166.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void quality$set(MemorySegment seg, long index, int x) {
        constants$166.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle opaque$VH() {
        return constants$166.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static MemorySegment opaque$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$166.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static void opaque$set(MemorySegment seg, MemorySegment x) {
        constants$166.const$5.set(seg, x);
    }
    public static MemorySegment opaque$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$166.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void opaque$set(MemorySegment seg, long index, MemorySegment x) {
        constants$166.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle repeat_pict$VH() {
        return constants$167.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int repeat_pict;
     * }
     */
    public static int repeat_pict$get(MemorySegment seg) {
        return (int)constants$167.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int repeat_pict;
     * }
     */
    public static void repeat_pict$set(MemorySegment seg, int x) {
        constants$167.const$0.set(seg, x);
    }
    public static int repeat_pict$get(MemorySegment seg, long index) {
        return (int)constants$167.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void repeat_pict$set(MemorySegment seg, long index, int x) {
        constants$167.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle interlaced_frame$VH() {
        return constants$167.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int interlaced_frame;
     * }
     */
    public static int interlaced_frame$get(MemorySegment seg) {
        return (int)constants$167.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int interlaced_frame;
     * }
     */
    public static void interlaced_frame$set(MemorySegment seg, int x) {
        constants$167.const$1.set(seg, x);
    }
    public static int interlaced_frame$get(MemorySegment seg, long index) {
        return (int)constants$167.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void interlaced_frame$set(MemorySegment seg, long index, int x) {
        constants$167.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle top_field_first$VH() {
        return constants$167.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int top_field_first;
     * }
     */
    public static int top_field_first$get(MemorySegment seg) {
        return (int)constants$167.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int top_field_first;
     * }
     */
    public static void top_field_first$set(MemorySegment seg, int x) {
        constants$167.const$2.set(seg, x);
    }
    public static int top_field_first$get(MemorySegment seg, long index) {
        return (int)constants$167.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void top_field_first$set(MemorySegment seg, long index, int x) {
        constants$167.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle palette_has_changed$VH() {
        return constants$167.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int palette_has_changed;
     * }
     */
    public static int palette_has_changed$get(MemorySegment seg) {
        return (int)constants$167.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int palette_has_changed;
     * }
     */
    public static void palette_has_changed$set(MemorySegment seg, int x) {
        constants$167.const$3.set(seg, x);
    }
    public static int palette_has_changed$get(MemorySegment seg, long index) {
        return (int)constants$167.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void palette_has_changed$set(MemorySegment seg, long index, int x) {
        constants$167.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reordered_opaque$VH() {
        return constants$167.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t reordered_opaque;
     * }
     */
    public static long reordered_opaque$get(MemorySegment seg) {
        return (long)constants$167.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t reordered_opaque;
     * }
     */
    public static void reordered_opaque$set(MemorySegment seg, long x) {
        constants$167.const$4.set(seg, x);
    }
    public static long reordered_opaque$get(MemorySegment seg, long index) {
        return (long)constants$167.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void reordered_opaque$set(MemorySegment seg, long index, long x) {
        constants$167.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sample_rate$VH() {
        return constants$167.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int sample_rate;
     * }
     */
    public static int sample_rate$get(MemorySegment seg) {
        return (int)constants$167.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int sample_rate;
     * }
     */
    public static void sample_rate$set(MemorySegment seg, int x) {
        constants$167.const$5.set(seg, x);
    }
    public static int sample_rate$get(MemorySegment seg, long index) {
        return (int)constants$167.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void sample_rate$set(MemorySegment seg, long index, int x) {
        constants$167.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle channel_layout$VH() {
        return constants$168.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t channel_layout;
     * }
     */
    public static long channel_layout$get(MemorySegment seg) {
        return (long)constants$168.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t channel_layout;
     * }
     */
    public static void channel_layout$set(MemorySegment seg, long x) {
        constants$168.const$0.set(seg, x);
    }
    public static long channel_layout$get(MemorySegment seg, long index) {
        return (long)constants$168.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void channel_layout$set(MemorySegment seg, long index, long x) {
        constants$168.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment buf$slice(MemorySegment seg) {
        return seg.asSlice(224, 64);
    }
    public static VarHandle extended_buf$VH() {
        return constants$168.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBufferRef** extended_buf;
     * }
     */
    public static MemorySegment extended_buf$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$168.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBufferRef** extended_buf;
     * }
     */
    public static void extended_buf$set(MemorySegment seg, MemorySegment x) {
        constants$168.const$1.set(seg, x);
    }
    public static MemorySegment extended_buf$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$168.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void extended_buf$set(MemorySegment seg, long index, MemorySegment x) {
        constants$168.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nb_extended_buf$VH() {
        return constants$168.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nb_extended_buf;
     * }
     */
    public static int nb_extended_buf$get(MemorySegment seg) {
        return (int)constants$168.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nb_extended_buf;
     * }
     */
    public static void nb_extended_buf$set(MemorySegment seg, int x) {
        constants$168.const$2.set(seg, x);
    }
    public static int nb_extended_buf$get(MemorySegment seg, long index) {
        return (int)constants$168.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_extended_buf$set(MemorySegment seg, long index, int x) {
        constants$168.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle side_data$VH() {
        return constants$168.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVFrameSideData** side_data;
     * }
     */
    public static MemorySegment side_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$168.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVFrameSideData** side_data;
     * }
     */
    public static void side_data$set(MemorySegment seg, MemorySegment x) {
        constants$168.const$3.set(seg, x);
    }
    public static MemorySegment side_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$168.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void side_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$168.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nb_side_data$VH() {
        return constants$168.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nb_side_data;
     * }
     */
    public static int nb_side_data$get(MemorySegment seg) {
        return (int)constants$168.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nb_side_data;
     * }
     */
    public static void nb_side_data$set(MemorySegment seg, int x) {
        constants$168.const$4.set(seg, x);
    }
    public static int nb_side_data$get(MemorySegment seg, long index) {
        return (int)constants$168.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_side_data$set(MemorySegment seg, long index, int x) {
        constants$168.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$168.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$168.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$168.const$5.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$168.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$168.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle color_range$VH() {
        return constants$169.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorRange color_range;
     * }
     */
    public static int color_range$get(MemorySegment seg) {
        return (int)constants$169.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorRange color_range;
     * }
     */
    public static void color_range$set(MemorySegment seg, int x) {
        constants$169.const$0.set(seg, x);
    }
    public static int color_range$get(MemorySegment seg, long index) {
        return (int)constants$169.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void color_range$set(MemorySegment seg, long index, int x) {
        constants$169.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle color_primaries$VH() {
        return constants$169.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorPrimaries color_primaries;
     * }
     */
    public static int color_primaries$get(MemorySegment seg) {
        return (int)constants$169.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorPrimaries color_primaries;
     * }
     */
    public static void color_primaries$set(MemorySegment seg, int x) {
        constants$169.const$1.set(seg, x);
    }
    public static int color_primaries$get(MemorySegment seg, long index) {
        return (int)constants$169.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void color_primaries$set(MemorySegment seg, long index, int x) {
        constants$169.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle color_trc$VH() {
        return constants$169.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorTransferCharacteristic color_trc;
     * }
     */
    public static int color_trc$get(MemorySegment seg) {
        return (int)constants$169.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorTransferCharacteristic color_trc;
     * }
     */
    public static void color_trc$set(MemorySegment seg, int x) {
        constants$169.const$2.set(seg, x);
    }
    public static int color_trc$get(MemorySegment seg, long index) {
        return (int)constants$169.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void color_trc$set(MemorySegment seg, long index, int x) {
        constants$169.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle colorspace$VH() {
        return constants$169.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVColorSpace colorspace;
     * }
     */
    public static int colorspace$get(MemorySegment seg) {
        return (int)constants$169.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVColorSpace colorspace;
     * }
     */
    public static void colorspace$set(MemorySegment seg, int x) {
        constants$169.const$3.set(seg, x);
    }
    public static int colorspace$get(MemorySegment seg, long index) {
        return (int)constants$169.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void colorspace$set(MemorySegment seg, long index, int x) {
        constants$169.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle chroma_location$VH() {
        return constants$169.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVChromaLocation chroma_location;
     * }
     */
    public static int chroma_location$get(MemorySegment seg) {
        return (int)constants$169.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVChromaLocation chroma_location;
     * }
     */
    public static void chroma_location$set(MemorySegment seg, int x) {
        constants$169.const$4.set(seg, x);
    }
    public static int chroma_location$get(MemorySegment seg, long index) {
        return (int)constants$169.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void chroma_location$set(MemorySegment seg, long index, int x) {
        constants$169.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle best_effort_timestamp$VH() {
        return constants$169.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t best_effort_timestamp;
     * }
     */
    public static long best_effort_timestamp$get(MemorySegment seg) {
        return (long)constants$169.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t best_effort_timestamp;
     * }
     */
    public static void best_effort_timestamp$set(MemorySegment seg, long x) {
        constants$169.const$5.set(seg, x);
    }
    public static long best_effort_timestamp$get(MemorySegment seg, long index) {
        return (long)constants$169.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void best_effort_timestamp$set(MemorySegment seg, long index, long x) {
        constants$169.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pkt_pos$VH() {
        return constants$170.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pkt_pos;
     * }
     */
    public static long pkt_pos$get(MemorySegment seg) {
        return (long)constants$170.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pkt_pos;
     * }
     */
    public static void pkt_pos$set(MemorySegment seg, long x) {
        constants$170.const$0.set(seg, x);
    }
    public static long pkt_pos$get(MemorySegment seg, long index) {
        return (long)constants$170.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void pkt_pos$set(MemorySegment seg, long index, long x) {
        constants$170.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pkt_duration$VH() {
        return constants$170.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t pkt_duration;
     * }
     */
    public static long pkt_duration$get(MemorySegment seg) {
        return (long)constants$170.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t pkt_duration;
     * }
     */
    public static void pkt_duration$set(MemorySegment seg, long x) {
        constants$170.const$1.set(seg, x);
    }
    public static long pkt_duration$get(MemorySegment seg, long index) {
        return (long)constants$170.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void pkt_duration$set(MemorySegment seg, long index, long x) {
        constants$170.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle metadata$VH() {
        return constants$170.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVDictionary* metadata;
     * }
     */
    public static MemorySegment metadata$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$170.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVDictionary* metadata;
     * }
     */
    public static void metadata$set(MemorySegment seg, MemorySegment x) {
        constants$170.const$2.set(seg, x);
    }
    public static MemorySegment metadata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$170.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void metadata$set(MemorySegment seg, long index, MemorySegment x) {
        constants$170.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle decode_error_flags$VH() {
        return constants$170.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int decode_error_flags;
     * }
     */
    public static int decode_error_flags$get(MemorySegment seg) {
        return (int)constants$170.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int decode_error_flags;
     * }
     */
    public static void decode_error_flags$set(MemorySegment seg, int x) {
        constants$170.const$3.set(seg, x);
    }
    public static int decode_error_flags$get(MemorySegment seg, long index) {
        return (int)constants$170.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void decode_error_flags$set(MemorySegment seg, long index, int x) {
        constants$170.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle channels$VH() {
        return constants$170.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int channels;
     * }
     */
    public static int channels$get(MemorySegment seg) {
        return (int)constants$170.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int channels;
     * }
     */
    public static void channels$set(MemorySegment seg, int x) {
        constants$170.const$4.set(seg, x);
    }
    public static int channels$get(MemorySegment seg, long index) {
        return (int)constants$170.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void channels$set(MemorySegment seg, long index, int x) {
        constants$170.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pkt_size$VH() {
        return constants$170.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int pkt_size;
     * }
     */
    public static int pkt_size$get(MemorySegment seg) {
        return (int)constants$170.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int pkt_size;
     * }
     */
    public static void pkt_size$set(MemorySegment seg, int x) {
        constants$170.const$5.set(seg, x);
    }
    public static int pkt_size$get(MemorySegment seg, long index) {
        return (int)constants$170.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void pkt_size$set(MemorySegment seg, long index, int x) {
        constants$170.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle hw_frames_ctx$VH() {
        return constants$171.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBufferRef* hw_frames_ctx;
     * }
     */
    public static MemorySegment hw_frames_ctx$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$171.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBufferRef* hw_frames_ctx;
     * }
     */
    public static void hw_frames_ctx$set(MemorySegment seg, MemorySegment x) {
        constants$171.const$0.set(seg, x);
    }
    public static MemorySegment hw_frames_ctx$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$171.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void hw_frames_ctx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$171.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle opaque_ref$VH() {
        return constants$171.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBufferRef* opaque_ref;
     * }
     */
    public static MemorySegment opaque_ref$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$171.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBufferRef* opaque_ref;
     * }
     */
    public static void opaque_ref$set(MemorySegment seg, MemorySegment x) {
        constants$171.const$1.set(seg, x);
    }
    public static MemorySegment opaque_ref$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$171.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void opaque_ref$set(MemorySegment seg, long index, MemorySegment x) {
        constants$171.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle crop_top$VH() {
        return constants$171.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t crop_top;
     * }
     */
    public static long crop_top$get(MemorySegment seg) {
        return (long)constants$171.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t crop_top;
     * }
     */
    public static void crop_top$set(MemorySegment seg, long x) {
        constants$171.const$2.set(seg, x);
    }
    public static long crop_top$get(MemorySegment seg, long index) {
        return (long)constants$171.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void crop_top$set(MemorySegment seg, long index, long x) {
        constants$171.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle crop_bottom$VH() {
        return constants$171.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t crop_bottom;
     * }
     */
    public static long crop_bottom$get(MemorySegment seg) {
        return (long)constants$171.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t crop_bottom;
     * }
     */
    public static void crop_bottom$set(MemorySegment seg, long x) {
        constants$171.const$3.set(seg, x);
    }
    public static long crop_bottom$get(MemorySegment seg, long index) {
        return (long)constants$171.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void crop_bottom$set(MemorySegment seg, long index, long x) {
        constants$171.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle crop_left$VH() {
        return constants$171.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t crop_left;
     * }
     */
    public static long crop_left$get(MemorySegment seg) {
        return (long)constants$171.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t crop_left;
     * }
     */
    public static void crop_left$set(MemorySegment seg, long x) {
        constants$171.const$4.set(seg, x);
    }
    public static long crop_left$get(MemorySegment seg, long index) {
        return (long)constants$171.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void crop_left$set(MemorySegment seg, long index, long x) {
        constants$171.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle crop_right$VH() {
        return constants$171.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t crop_right;
     * }
     */
    public static long crop_right$get(MemorySegment seg) {
        return (long)constants$171.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t crop_right;
     * }
     */
    public static void crop_right$set(MemorySegment seg, long x) {
        constants$171.const$5.set(seg, x);
    }
    public static long crop_right$get(MemorySegment seg, long index) {
        return (long)constants$171.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void crop_right$set(MemorySegment seg, long index, long x) {
        constants$171.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle private_ref$VH() {
        return constants$172.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AVBufferRef* private_ref;
     * }
     */
    public static MemorySegment private_ref$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$172.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AVBufferRef* private_ref;
     * }
     */
    public static void private_ref$set(MemorySegment seg, MemorySegment x) {
        constants$172.const$0.set(seg, x);
    }
    public static MemorySegment private_ref$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$172.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void private_ref$set(MemorySegment seg, long index, MemorySegment x) {
        constants$172.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ch_layout$slice(MemorySegment seg) {
        return seg.asSlice(448, 24);
    }
    public static VarHandle duration$VH() {
        return constants$172.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t duration;
     * }
     */
    public static long duration$get(MemorySegment seg) {
        return (long)constants$172.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t duration;
     * }
     */
    public static void duration$set(MemorySegment seg, long x) {
        constants$172.const$1.set(seg, x);
    }
    public static long duration$get(MemorySegment seg, long index) {
        return (long)constants$172.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void duration$set(MemorySegment seg, long index, long x) {
        constants$172.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


