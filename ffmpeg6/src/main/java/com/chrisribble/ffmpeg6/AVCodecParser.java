// Generated by jextract

package com.chrisribble.ffmpeg6;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVCodecParser {
 *     int codec_ids[7];
 *     int priv_data_size;
 *     int (*parser_init)(AVCodecParserContext*);
 *     int (*parser_parse)(AVCodecParserContext*,AVCodecContext*,const uint8_t**,int*,const uint8_t*,int);
 *     void (*parser_close)(AVCodecParserContext*);
 *     int (*split)(AVCodecContext*,const uint8_t*,int);
 * };
 * }
 */
public class AVCodecParser {

    public static MemoryLayout $LAYOUT() {
        return constants$252.const$5;
    }
    public static MemorySegment codec_ids$slice(MemorySegment seg) {
        return seg.asSlice(0, 28);
    }
    public static VarHandle priv_data_size$VH() {
        return constants$253.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int priv_data_size;
     * }
     */
    public static int priv_data_size$get(MemorySegment seg) {
        return (int)constants$253.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int priv_data_size;
     * }
     */
    public static void priv_data_size$set(MemorySegment seg, int x) {
        constants$253.const$0.set(seg, x);
    }
    public static int priv_data_size$get(MemorySegment seg, long index) {
        return (int)constants$253.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void priv_data_size$set(MemorySegment seg, long index, int x) {
        constants$253.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * int (*parser_init)(AVCodecParserContext*);
     * }
     */
    public interface parser_init {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(parser_init fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$253.const$1, fi, constants$0.const$3, scope);
        }
        static parser_init ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$141.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle parser_init$VH() {
        return constants$253.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*parser_init)(AVCodecParserContext*);
     * }
     */
    public static MemorySegment parser_init$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$253.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*parser_init)(AVCodecParserContext*);
     * }
     */
    public static void parser_init$set(MemorySegment seg, MemorySegment x) {
        constants$253.const$2.set(seg, x);
    }
    public static MemorySegment parser_init$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$253.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void parser_init$set(MemorySegment seg, long index, MemorySegment x) {
        constants$253.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static parser_init parser_init(MemorySegment segment, Arena scope) {
        return parser_init.ofAddress(parser_init$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*parser_parse)(AVCodecParserContext*,AVCodecContext*,const uint8_t**,int*,const uint8_t*,int);
     * }
     */
    public interface parser_parse {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5);
        static MemorySegment allocate(parser_parse fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$253.const$4, fi, constants$253.const$3, scope);
        }
        static parser_parse ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5) -> {
                try {
                    return (int)constants$253.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle parser_parse$VH() {
        return constants$254.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*parser_parse)(AVCodecParserContext*,AVCodecContext*,const uint8_t**,int*,const uint8_t*,int);
     * }
     */
    public static MemorySegment parser_parse$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$254.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*parser_parse)(AVCodecParserContext*,AVCodecContext*,const uint8_t**,int*,const uint8_t*,int);
     * }
     */
    public static void parser_parse$set(MemorySegment seg, MemorySegment x) {
        constants$254.const$0.set(seg, x);
    }
    public static MemorySegment parser_parse$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$254.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void parser_parse$set(MemorySegment seg, long index, MemorySegment x) {
        constants$254.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static parser_parse parser_parse(MemorySegment segment, Arena scope) {
        return parser_parse.ofAddress(parser_parse$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*parser_close)(AVCodecParserContext*);
     * }
     */
    public interface parser_close {

        void apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(parser_close fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$254.const$1, fi, constants$70.const$2, scope);
        }
        static parser_close ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    constants$151.const$3.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle parser_close$VH() {
        return constants$254.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*parser_close)(AVCodecParserContext*);
     * }
     */
    public static MemorySegment parser_close$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$254.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*parser_close)(AVCodecParserContext*);
     * }
     */
    public static void parser_close$set(MemorySegment seg, MemorySegment x) {
        constants$254.const$2.set(seg, x);
    }
    public static MemorySegment parser_close$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$254.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void parser_close$set(MemorySegment seg, long index, MemorySegment x) {
        constants$254.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static parser_close parser_close(MemorySegment segment, Arena scope) {
        return parser_close.ofAddress(parser_close$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*split)(AVCodecContext*,const uint8_t*,int);
     * }
     */
    public interface split {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(split fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$254.const$3, fi, constants$109.const$5, scope);
        }
        static split ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)constants$222.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle split$VH() {
        return constants$254.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*split)(AVCodecContext*,const uint8_t*,int);
     * }
     */
    public static MemorySegment split$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$254.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*split)(AVCodecContext*,const uint8_t*,int);
     * }
     */
    public static void split$set(MemorySegment seg, MemorySegment x) {
        constants$254.const$4.set(seg, x);
    }
    public static MemorySegment split$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$254.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void split$set(MemorySegment seg, long index, MemorySegment x) {
        constants$254.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static split split(MemorySegment segment, Arena scope) {
        return split.ofAddress(split$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


