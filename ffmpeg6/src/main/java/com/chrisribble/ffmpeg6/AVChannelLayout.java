// Generated by jextract

package com.chrisribble.ffmpeg6;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVChannelLayout {
 *     enum AVChannelOrder order;
 *     int nb_channels;
 *     union  u;
 *     void* opaque;
 * };
 * }
 */
public class AVChannelLayout {

    public static MemoryLayout $LAYOUT() {
        return constants$158.const$3;
    }
    public static VarHandle order$VH() {
        return constants$158.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AVChannelOrder order;
     * }
     */
    public static int order$get(MemorySegment seg) {
        return (int)constants$158.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AVChannelOrder order;
     * }
     */
    public static void order$set(MemorySegment seg, int x) {
        constants$158.const$4.set(seg, x);
    }
    public static int order$get(MemorySegment seg, long index) {
        return (int)constants$158.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void order$set(MemorySegment seg, long index, int x) {
        constants$158.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nb_channels$VH() {
        return constants$158.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int nb_channels;
     * }
     */
    public static int nb_channels$get(MemorySegment seg) {
        return (int)constants$158.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int nb_channels;
     * }
     */
    public static void nb_channels$set(MemorySegment seg, int x) {
        constants$158.const$5.set(seg, x);
    }
    public static int nb_channels$get(MemorySegment seg, long index) {
        return (int)constants$158.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_channels$set(MemorySegment seg, long index, int x) {
        constants$158.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     uint64_t mask;
     *     AVChannelCustom* map;
     * };
     * }
     */
    public static final class u {

        // Suppresses default constructor, ensuring non-instantiability.
        private u() {}
        public static MemoryLayout $LAYOUT() {
            return constants$159.const$0;
        }
        public static VarHandle mask$VH() {
            return constants$159.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * uint64_t mask;
         * }
         */
        public static long mask$get(MemorySegment seg) {
            return (long)constants$159.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * uint64_t mask;
         * }
         */
        public static void mask$set(MemorySegment seg, long x) {
            constants$159.const$1.set(seg, x);
        }
        public static long mask$get(MemorySegment seg, long index) {
            return (long)constants$159.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void mask$set(MemorySegment seg, long index, long x) {
            constants$159.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle map$VH() {
            return constants$159.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * AVChannelCustom* map;
         * }
         */
        public static MemorySegment map$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$159.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * AVChannelCustom* map;
         * }
         */
        public static void map$set(MemorySegment seg, MemorySegment x) {
            constants$159.const$2.set(seg, x);
        }
        public static MemorySegment map$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$159.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void map$set(MemorySegment seg, long index, MemorySegment x) {
            constants$159.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static VarHandle opaque$VH() {
        return constants$159.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static MemorySegment opaque$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$159.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* opaque;
     * }
     */
    public static void opaque$set(MemorySegment seg, MemorySegment x) {
        constants$159.const$3.set(seg, x);
    }
    public static MemorySegment opaque$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$159.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void opaque$set(MemorySegment seg, long index, MemorySegment x) {
        constants$159.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


