// Generated by jextract

package com.chrisribble.ffmpeg6;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct AVPixFmtDescriptor {
 *     char* name;
 *     uint8_t nb_components;
 *     uint8_t log2_chroma_w;
 *     uint8_t log2_chroma_h;
 *     uint64_t flags;
 *     AVComponentDescriptor comp[4];
 *     char* alias;
 * };
 * }
 */
public class AVPixFmtDescriptor {

    public static MemoryLayout $LAYOUT() {
        return constants$338.const$0;
    }
    public static VarHandle name$VH() {
        return constants$338.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$338.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        constants$338.const$1.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$338.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$338.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nb_components$VH() {
        return constants$338.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t nb_components;
     * }
     */
    public static byte nb_components$get(MemorySegment seg) {
        return (byte)constants$338.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t nb_components;
     * }
     */
    public static void nb_components$set(MemorySegment seg, byte x) {
        constants$338.const$2.set(seg, x);
    }
    public static byte nb_components$get(MemorySegment seg, long index) {
        return (byte)constants$338.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void nb_components$set(MemorySegment seg, long index, byte x) {
        constants$338.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle log2_chroma_w$VH() {
        return constants$338.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_chroma_w;
     * }
     */
    public static byte log2_chroma_w$get(MemorySegment seg) {
        return (byte)constants$338.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_chroma_w;
     * }
     */
    public static void log2_chroma_w$set(MemorySegment seg, byte x) {
        constants$338.const$3.set(seg, x);
    }
    public static byte log2_chroma_w$get(MemorySegment seg, long index) {
        return (byte)constants$338.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_chroma_w$set(MemorySegment seg, long index, byte x) {
        constants$338.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle log2_chroma_h$VH() {
        return constants$338.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t log2_chroma_h;
     * }
     */
    public static byte log2_chroma_h$get(MemorySegment seg) {
        return (byte)constants$338.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t log2_chroma_h;
     * }
     */
    public static void log2_chroma_h$set(MemorySegment seg, byte x) {
        constants$338.const$4.set(seg, x);
    }
    public static byte log2_chroma_h$get(MemorySegment seg, long index) {
        return (byte)constants$338.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void log2_chroma_h$set(MemorySegment seg, long index, byte x) {
        constants$338.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flags$VH() {
        return constants$338.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t flags;
     * }
     */
    public static long flags$get(MemorySegment seg) {
        return (long)constants$338.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t flags;
     * }
     */
    public static void flags$set(MemorySegment seg, long x) {
        constants$338.const$5.set(seg, x);
    }
    public static long flags$get(MemorySegment seg, long index) {
        return (long)constants$338.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, long x) {
        constants$338.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment comp$slice(MemorySegment seg) {
        return seg.asSlice(24, 80);
    }
    public static VarHandle alias$VH() {
        return constants$339.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* alias;
     * }
     */
    public static MemorySegment alias$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$339.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* alias;
     * }
     */
    public static void alias$set(MemorySegment seg, MemorySegment x) {
        constants$339.const$0.set(seg, x);
    }
    public static MemorySegment alias$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$339.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void alias$set(MemorySegment seg, long index, MemorySegment x) {
        constants$339.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


